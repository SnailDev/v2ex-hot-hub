[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/093f/65e0/59_large.png?m=1615956453", "name": "random", "avatar_normal": "https://cdn.v2ex.com/navatar/093f/65e0/59_normal.png?m=1615956453", "title": "随想", "url": "https://www.v2ex.com/go/random", "topics": 3585, "footer": "", "header": "有的时候，可以停下来找找灵感，然后再继续。", "title_alternative": "Random", "avatar_mini": "https://cdn.v2ex.com/navatar/093f/65e0/59_mini.png?m=1615956453", "stars": 1150, "aliases": [], "root": false, "id": 59, "parent_node_name": "v2ex"}, "member": {"id": 276253, "username": "iMiata", "url": "https://www.v2ex.com/u/iMiata", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "苏州", "tagline": "Keep calm.", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/8727/6d75/276253_mini.png?m=1691480041", "avatar_normal": "https://cdn.v2ex.com/avatar/8727/6d75/276253_normal.png?m=1691480041", "avatar_large": "https://cdn.v2ex.com/avatar/8727/6d75/276253_large.png?m=1691480041", "created": 1513922292, "last_modified": 1691480041}, "last_reply_by": "november", "last_touched": 1692416940, "title": "一堆拿技术当赚钱工具的人，在教一个热爱技术的人 为人处世，真的蛮可悲的", "url": "https://www.v2ex.com/t/966452", "created": 1692342929, "deleted": 0, "content": "从<a href=\"https://v2ex.com/t/966243\" target=\"_blank\">GPT 老哥的这篇帖子</a>过来，看到一堆人在评价楼主 ***幼稚、不成熟、一根筋、情商低、不适合做管理*** 等等，自己失去了对技术的热情、热爱，跑来指责热爱的人不懂人情世故，教人家做事，真的蛮可悲的。\r\n\r\n什么时候职场里的勾心斗角、明枪暗箭成了 **成熟的标志**，热爱、理想成了幼稚，多么可悲的论调，多么可悲的 **“成熟”**\r\n\r\n国内这种没有人重视领导者管理能力的企业氛围，论资排辈、高位低能的普遍现象，甚至发明一套所谓 **“向上管理”**的方法论来给打工人们洗脑，教平级们做事，对领导投其所好，没人觉得不对，没人觉得这种风气不正常吗？\r\n\r\n自己卑躬屈膝惯了，看到有人挺直腰板没得到好果子，就拍手嘲笑“幼稚”、“看吧，情商低”、“我以为你是刚毕业”，**看来你们也知道刚毕业的年轻人还是对技术抱有热情的嘛**\r\n\r\n所谓“知人善用”，所谓“资源调配”，这才叫领导，这才叫管理，而不是不顺我意思的人就打压甚至踢走，这特么叫独裁。先进青年们不是都说 **“大清早就亡了”** 么，怎么到自己身上，奴性还是这么重？\r\n\r\n确实，现在大家打工挣钱都不容易，房价物价都比工资涨得快，挣钱嘛，不寒掺。哪怕你们这些 **强调情商** 的 **成熟职场人** 能在职场里得到自己想要的结果，但是我也希望你们 **“向上管理”** 的时候，不要觉得这是应该，而不觉得是迫于生活的无奈，来嘲笑站直了却吃不到饭的人。\r\n\r\nPS：我自己就是不愿向这种人弯腰，所以从第二家公司开始都是拣着外企拿 offer ，在二线城市现在一年也能挣二十来个平方的钱，不算高，但也过得去，至少我站直了挣钱，心情愉悦。也祝各位腿脚不利索的人能尽早脱离政治斗争、勾心斗角的苦海，我本人也非常乐意帮大家往外企内推，享受下人文关怀，给“你不干有的是人干”的 **领导们** 提高下招人的难度", "content_rendered": "<p>从<a href=\"https://v2ex.com/t/966243\" rel=\"nofollow\">GPT 老哥的这篇帖子</a>过来，看到一堆人在评价楼主 <em><strong>幼稚、不成熟、一根筋、情商低、不适合做管理</strong></em> 等等，自己失去了对技术的热情、热爱，跑来指责热爱的人不懂人情世故，教人家做事，真的蛮可悲的。</p>\n<p>什么时候职场里的勾心斗角、明枪暗箭成了 <strong>成熟的标志</strong>，热爱、理想成了幼稚，多么可悲的论调，多么可悲的 <strong>“成熟”</strong></p>\n<p>国内这种没有人重视领导者管理能力的企业氛围，论资排辈、高位低能的普遍现象，甚至发明一套所谓 <strong>“向上管理”</strong>的方法论来给打工人们洗脑，教平级们做事，对领导投其所好，没人觉得不对，没人觉得这种风气不正常吗？</p>\n<p>自己卑躬屈膝惯了，看到有人挺直腰板没得到好果子，就拍手嘲笑“幼稚”、“看吧，情商低”、“我以为你是刚毕业”，<strong>看来你们也知道刚毕业的年轻人还是对技术抱有热情的嘛</strong></p>\n<p>所谓“知人善用”，所谓“资源调配”，这才叫领导，这才叫管理，而不是不顺我意思的人就打压甚至踢走，这特么叫独裁。先进青年们不是都说 <strong>“大清早就亡了”</strong> 么，怎么到自己身上，奴性还是这么重？</p>\n<p>确实，现在大家打工挣钱都不容易，房价物价都比工资涨得快，挣钱嘛，不寒掺。哪怕你们这些 <strong>强调情商</strong> 的 <strong>成熟职场人</strong> 能在职场里得到自己想要的结果，但是我也希望你们 <strong>“向上管理”</strong> 的时候，不要觉得这是应该，而不觉得是迫于生活的无奈，来嘲笑站直了却吃不到饭的人。</p>\n<p>PS：我自己就是不愿向这种人弯腰，所以从第二家公司开始都是拣着外企拿 offer ，在二线城市现在一年也能挣二十来个平方的钱，不算高，但也过得去，至少我站直了挣钱，心情愉悦。也祝各位腿脚不利索的人能尽早脱离政治斗争、勾心斗角的苦海，我本人也非常乐意帮大家往外企内推，享受下人文关怀，给“你不干有的是人干”的 <strong>领导们</strong> 提高下招人的难度</p>\n", "last_modified": 1692342929, "replies": 172, "id": 966452}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/9bf3/1c7f/15_large.png?m=1678543540", "name": "twitter", "avatar_normal": "https://cdn.v2ex.com/navatar/9bf3/1c7f/15_normal.png?m=1678543540", "title": "Twitter", "url": "https://www.v2ex.com/go/twitter", "topics": 405, "footer": "关于 Twitter 的使用和开发的讨论。", "header": "Find out what’s happening, right now, with the people and organizations you care about.", "title_alternative": "Twitter", "avatar_mini": "https://cdn.v2ex.com/navatar/9bf3/1c7f/15_mini.png?m=1678543540", "stars": 744, "aliases": [], "root": false, "id": 15, "parent_node_name": "internet"}, "member": {"id": 171593, "username": "kiii", "url": "https://www.v2ex.com/u/kiii", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/54eb20d345a1f2002b37392e9f7cdfac?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/54eb20d345a1f2002b37392e9f7cdfac?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/54eb20d345a1f2002b37392e9f7cdfac?s=73&d=retro", "created": 1462287753, "last_modified": 1692335004}, "last_reply_by": "vgbw", "last_touched": 1692415104, "title": "墙内玩推特不要注入感情，因为你不知道什么时候就被封了，因为那里也没有言论自由。", "url": "https://www.v2ex.com/t/966401", "created": 1692335181, "deleted": 0, "content": "这是被封的第 5 个号了，用的是香港卡。99 年注册的 QQ 被封很难受，YouTube 被封过两个，V2EX 被封了一个，总结一下墙内推特玩法，不要经常换代理，尽量少发帖少回复。我被封的理由“在使用 Twitter 的服務時，你不得意圖以人為的方式誇大或壓制資訊，或從事操控或破壞使用者在 Twitter 上的體驗的行為。” WTF ？？？", "content_rendered": "<p>这是被封的第 5 个号了，用的是香港卡。99 年注册的 QQ 被封很难受，YouTube 被封过两个，V2EX 被封了一个，总结一下墙内推特玩法，不要经常换代理，尽量少发帖少回复。我被封的理由“在使用 Twitter 的服務時，你不得意圖以人為的方式誇大或壓制資訊，或從事操控或破壞使用者在 Twitter 上的體驗的行為。” WTF ？？？</p>\n", "last_modified": 1692335181, "replies": 111, "id": 966401}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/8613/985e/90_large.png?m=1648339948", "name": "python", "avatar_normal": "https://cdn.v2ex.com/navatar/8613/985e/90_normal.png?m=1648339948", "title": "Python", "url": "https://www.v2ex.com/go/python", "topics": 15616, "footer": "", "header": "这里讨论各种 Python 语言编程话题，也包括 Django，Tornado 等框架的讨论。这里是一个能够帮助你解决实际问题的地方。", "title_alternative": "Python", "avatar_mini": "https://cdn.v2ex.com/navatar/8613/985e/90_mini.png?m=1648339948", "stars": 10381, "aliases": [], "root": false, "id": 90, "parent_node_name": "programming"}, "member": {"id": 595012, "username": "realNewBee", "url": "https://www.v2ex.com/u/realNewBee", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/bd007f5a83ab8102caffd6df97065e4e?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/bd007f5a83ab8102caffd6df97065e4e?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/bd007f5a83ab8102caffd6df97065e4e?s=73&d=retro", "created": 1663831084, "last_modified": 1663831084}, "last_reply_by": "AS4694lAS4808", "last_touched": 1692415564, "title": "Python 做后端，相对于 Java 或者 go 来说，到底差在哪？", "url": "https://www.v2ex.com/t/966460", "created": 1692343977, "deleted": 0, "content": "在 V 站这看了很多文章，都说 py 做后端怎么怎么差，都劝这转 java 和 go ，那 py 到底差在哪呢？本人就是干 py 的，5 、6 年了，也还没意识到差到哪去呀", "content_rendered": "<p>在 V 站这看了很多文章，都说 py 做后端怎么怎么差，都劝这转 java 和 go ，那 py 到底差在哪呢？本人就是干 py 的，5 、6 年了，也还没意识到差到哪去呀</p>\n", "last_modified": 1692344025, "replies": 66, "id": 966460}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/f61d/6947/375_large.png?m=1658910399", "name": "go", "avatar_normal": "https://cdn.v2ex.com/navatar/f61d/6947/375_normal.png?m=1658910399", "title": "Go 编程语言", "url": "https://www.v2ex.com/go/go", "topics": 2738, "footer": "", "header": "Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。", "title_alternative": "The Go Programming Language", "avatar_mini": "https://cdn.v2ex.com/navatar/f61d/6947/375_mini.png?m=1658910399", "stars": 3656, "aliases": [], "root": false, "id": 375, "parent_node_name": "programming"}, "member": {"id": 583830, "username": "imbigbao", "url": "https://www.v2ex.com/u/imbigbao", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/afe9bb463c81be292f29d3e112f49ce4?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/afe9bb463c81be292f29d3e112f49ce4?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/afe9bb463c81be292f29d3e112f49ce4?s=73&d=retro", "created": 1654396351, "last_modified": 1654396351}, "last_reply_by": "wkong", "last_touched": 1692414234, "title": "我为什么放弃 Go 语言? 转载觉得写的还不错, 轻喷^_^", "url": "https://www.v2ex.com/t/966394", "created": 1692333482, "deleted": 0, "content": "有好几次，当我想起来的时候，总是会问自己：我为什么要放弃 Go 语言？这个决定是正确的吗？是明智和理性的吗？其实我一直在认真思考这个问题。\r\n\r\n开门见山地说，我当初放弃 Go 语言（ golang ），就是因为两个“不爽”：第一，对 Go 语言本身不爽；第二，对 Go 语言社区里的某些人不爽。毫无疑问，这是非常主观的结论。但是我有足够详实的客观的论据，用以支撑这个看似主观的结论。\r\n\r\n第-1 节：更新日志（倒叙）\r\nLiigo 2021-07-13 补记 14：今日 HN 热帖上大伙普遍吐槽 channel ，要用好真的很难。judofyr: \"Channels are extremely subtle in my experience\". laumars: \"It took me a loooong time to fully wrap my head around channels. They’re definitely not explicit and full of subtle yet devastating bugs when used inappropriately (which is all to easy to do too).\" 💡 另将本文更新日志从文末移至文首作为第-1 节，并改为按日期倒叙排列。\r\n\r\nLiigo 2020-2-19 补记 13：本文末尾增加 Golang 2.0 泛型相关信息。\r\n\r\nLiigo 2016-5-15 补记 12：文中第 2 节（我为什么对 Go 社区的人不爽）增加 netroby 和 D 语言联合创始人的现身说法。补充说明 Go 1.5 后不再使用 C 语言开发。\r\n\r\nLiigo 2016-3-3 补记 11：文中 1.5 节（垃圾回收器/GC ）末尾增加一段，再次提示开发者重视 Go 语言 GC 的潜在问题。\r\n\r\nLiigo 2015-7-17 补记 10：文中 1.11 节（泛型）增加来自 HN 的延伸阅读链接，开发者们抱怨 Go 欠缺泛型支持。\r\n\r\nLiigo 2015-7-3 补记 9：文中 1.5 节（垃圾回收器/GC ）增加 “Stop the world” 相关的三个链接。\r\n\r\nLiigo 2015-7-2 补记 8：前两天网上出现了一篇本文的驳文，《驳狗屎文 \"我为什么放弃 Go 语言\"》，作者是 chai2010 ，请读者们参照阅读，顺便领略一下本文后半部分描述过的 Go 粉的\"风采\"。（这篇驳文至少有两个好处：1 它全文引用了本文(便于读者参照)； 2 使用了本文当时的最新版(包含了补记 7)。）\r\n\r\nLiigo 2015-6-2 补记 7：补充两篇英文：Why Go Is Not Good （作者 Will Yager 重点批评了 Go 语言的设计不佳甚至是倒退），Leaving Go （作者 Danny Gratzer 放弃 Go 语言的原因主要是：没有泛型，充满黑魔法）。这两篇文章都是针对具体问题做具体分析的，与本文写作精神一致，务实不务虚。其中提到的对 Go 语言不满的地方，本文也多有涉及，结论类似。\r\n\r\nLiigo 2015-5-29 补记 6：补充说明 Go 语言直到 2015 年下半年 1.5 发布后才将 GOMAXPROCS 设置为大于 1 的默认值(HN)，他们文中承认之前一直默认设置为 1 是因为调度器不完善（与我此文最初发表时的猜测一致）。\r\n\r\nLiigo 2015-4-1 补记 5：文中 1.10 （黑魔法）和 1.12 （接口）章节增加了两处“延伸阅读”链接，被引用的链接后面均有大量网友评论。此举主要是为了说明本文观点并非一家之言。\r\n\r\nLiigo 2015-1-31 补记 4：全世界认为 Go 语言不好的可不只是我 Liigo 一个人。国外著名的问答网站 Quora 上面有个人气很高的提问，“为什么不要用 Go 语言”（英文网页），看看那排名最前的两个答案，以及广大程序员们给这两个答案的数百个“赞”，都足以说明 Go 语言自身的问题是客观存在的。人民群众的眼睛是雪亮的。\r\n\r\nLiigo 2014-4-29 补记 3：Go 语言的拥护者们，似乎连 Go 语言的“核心优势”都说不出几条。知乎上很有人气的一条问答《为什么要使用 Go 语言，Go 语言的优势在哪里》，连静态编译、GC 、跨平台都拿出来说了（无视 C/C++/Java ），甚至连简单易学（无视 Python/易语言）、“丰富的”标准库（跟谁比?敢跟 Java/C#/Python 比么?）、好用的工具链（ gofmt ）都扯出来了，可见除了“并发、网络”之外，他们也讲不出另外的什么核心优势了，只能靠一些周边的东西凑数。\r\n\r\nLiigo 2014-4-29 补记 2：著名的编程语言研究专家王垠写了一篇《对 Go 语言的综合评价》（晚于本博文发表约三五天），也是总体上持批判态度，看衰 Go 语言。读者们可以对照阅读。\r\n\r\nLiigo 2014-4-29 补记 1：Go 语言社区还有一个很奇特的现象，就是中国社区独大，国外社区要小的多。有外国网友还专门写了一篇文章研究《为什么 Golang 中国社区独大》这个问题（文中也提到了我这篇博文）。通常来说，在 IT 和软件领域，向来都是国外先进国家引领技术潮流，然后国内缓慢跟进。而到了 Go 语言这里，恰恰反过来了，似乎暗示着在国外的主流软件开发技术人员并不怎么待见 Go 语言，Go 只是在国内受到一帮人的盲目推崇而已，至于这帮人的眼光如何，反正我不看好。\r\n\r\n第 0 节：我的 Go 语言经历\r\n先说说我的经历吧，以避免被无缘无故地当作 Go 语言的低级黑。\r\n\r\n2009 年底，Go 语言（ golang ）第一个公开版本发布，笼罩着“Google 公司制造”的光环，吸引了许多慕名而来的尝鲜者，我（ Liigo ）也身居其中，笼统的看了一些 Go 语言的资料，学习了基础的教程，因对其语法中的分号和花括号不满，很快就遗忘掉了，没拿它当一回事。\r\n\r\n两年之后，2011 年底，Go 语言发布 1.0 的计划被提上日程，相关的报道又多起来，我再次关注它，[重新评估][1]之后决定深入参与 Go 语言。我订阅了其 users 、nuts 、dev 、commits 等官方邮件组，坚持每天阅读其中的电子邮件，以及开发者提交的每一次源代码更新，给 Go 提交了许多改进意见，甚至包括[修改 Go 语言编译器源代码][2]直接参与开发任务。如此持续了数月时间。\r\n\r\n到 2012 年初，Go 1.0 发布，语言和标准库都已经基本定型，不可能再有大幅改进，我对 Go 语言未能在 1.0 定型之前更上一个台阶、实现自我突破，甚至带着诸多明显缺陷走向 1.0 ，感到非常失望，因而逐渐疏远了它（所以 Go 1.0 之后的事情我很少关心）。后来看到即将发布的 Go 1.1 的 Release Note ，发现语言层面没有太大改变，只是在库和工具层面有所修补和改进，感到它尚在幼年就失去成长的动力，越发失望。外加 Go 语言社区里的某些人，其中也包括 Google 公司负责开发 Go 语言的某些人，其态度、言行，让我极度厌恶，促使我决绝地离弃 Go 语言。\r\n\r\n在上一个 10 年，我（ Liigo ）在我所属的公司里，深度参与了两个编程语言项目的开发。我想，对于如何判断某个编程语言的优劣，或者说至少对于如何判断某个编程语言是否适合于我自己，我应该还是有一点发言权的。\r\n\r\n[1]: https://plus.google.com/+LiigoZhuang/posts/CpRNPeDXUDW\r\n\r\n[2]: http://blog.csdn.net/liigo/article/details/7467309\r\n\r\n第 1 节：我为什么对 Go 语言不爽？\r\nGo 语言有很多让我不爽之处，这里列出我现在还能记起的其中一部分，排名基本上不分先后。读者们耐心地看完之后，还能淡定地说一句“我不在乎”吗？\r\n\r\n1.1 不允许左花括号另起一行\r\n关于对花括号的摆放，在 C 语言、C++、Java 、C#等社区中，十余年来存在持续争议，从未形成一致意见。在我看来，这本来就是主观倾向很重的抉择，不违反原则不涉及是非的情况下，不应该搞一刀切，让程序员或团队自己选择就足够了。编程语言本身强行限制，把自己的喜好强加给别人，得不偿失。无论倾向于其中任意一种，必然得罪与其对立的一群人。虽然我现在已经习惯了把左花括号放在行尾，但一想到被禁止其他选择，就感到十分不爽。Go 语言这这个问题上，没有做到“团结一切可以团结的力量”不说，还有意给自己树敌，太失败了。\r\n\r\n1.2 编译器莫名其妙地给行尾加上分号\r\n对 Go 语言本身而言，行尾的分号是可以省略的。但是在其编译器（ gc ）的实现中，为了方便编译器开发者，却在词法分析阶段强行添加了行尾的分号，反过来又影响到语言规范，对“怎样添加分号”做出特殊规定。这种变态做法前无古人。在左花括号被意外放到下一行行首的情况下，它自动在上一行行尾添加的分号，会导致莫名其妙的编译错误（ Go 1.0 之前），连它自己都解释不明白。如果实在处理不好分号，干脆不要省略分号得了；或者，Scala 和 JavaScript 的编译器是开源的，跟它们学学怎么处理省略行尾分号可以吗？\r\n\r\n1.3 极度强调编译速度，不惜放弃本应提供的功能\r\n程序员是人不是神，编码过程中免不了因为大意或疏忽犯一些错。其中有一些，是大家集体性的很容易就中招的错误（ Go 语言里的例子我暂时想不起来，C++里的例子有“基类析构函数不是虚函数”）。这时候编译器应该站出来，多做一些检查、约束、核对性工作，尽量阻止常规错误的发生，尽量不让有潜在错误的代码编译通过，必要时给出一些警告或提示，让程序员留意。编译器不就是机器么，不就是应该多做脏活累活杂活、减少人的心智负担么？编译器多做一项检查，可能会避免数十万程序员今后多年内无数次犯同样的错误，节省的时间不计其数，这是功德无量的好事。但是 Go 编译器的作者们可不这么想，他们不愿意自己多花几个小时给编译器增加新功能，觉得那是亏本，反而减慢了编译速度。他们以影响编译速度为由，拒绝了很多对编译器改进的要求。典型的因噎废食。强调编译速度固然值得赞赏，但如果因此放弃应有的功能，我不赞成。\r\n\r\n1.4 错误处理机制太原始\r\n在 Go 语言中处理错误的基本模式是：函数通常返回多个值，其中最后一个值是 error 类型，用于表示错误类型极其描述；调用者每次调用完一个函数，都需要检查这个 error 并进行相应的错误处理：if err != nil { /*这种代码写多了不想吐么*/ }。此模式跟 C 语言那种很原始的错误处理相比如出一辙，并无实质性改进。实际应用中很容易形成多层嵌套的 if else 语句，可以想一想这个编码场景：先判断文件是否存在，如果存在则打开文件，如果打开成功则读取文件，如果读取成功再写入一段数据，最后关闭文件，别忘了还要处理每一步骤中出现错误的情况，这代码写出来得有多变态、多丑陋？实践中普遍的做法是，判断操作出错后提前 return ，以避免多层花括号嵌套，但这么做的后果是，许多错误处理代码被放在前面突出的位置，常规的处理逻辑反而被掩埋到后面去了，代码可读性极差。而且，error 对象的标准接口只能返回一个错误文本，有时候调用者为了区分不同的错误类型，甚至需要解析该文本。除此之外，你只能手工强制转换 error 类型到特定子类型（静态类型的优势没了）。至于 panic - recover 机制，致命的缺陷是不能跨越库的边界使用，注定是一个半成品，最多只能在自己的 pkg 里面玩一玩。Java 的异常处理虽然也有自身的问题（比如 Checked Exceptions ），但总体上还是比 Go 的错误处理高明很多。\r\n\r\n1.5 垃圾回收器（ GC ）不完善、有重大缺陷\r\n在 Go 1.0 前夕，其垃圾回收器在 32 位环境下有内存泄漏，一直拖着不肯改进，这且不说。Go 语言垃圾回收器真正致命的缺陷是，会导致整个进程不可预知的间歇性停顿（ Stop the World ）。像某些大型后台服务程序，如游戏服务器、APP 容器等，由于占用内存巨大，其内存对象数量极多，GC 完成一次回收周期，可能需要数秒甚至更长时间，这段时间内，整个服务进程是阻塞的、停顿的，在外界看来就是服务中断、无响应，再牛逼的并发机制到了这里统统失效。垃圾回收器定期启动，每次启动就导致短暂的服务中断，这样下去，还有人敢用吗？这可是后台服务器进程，是 Go 语言的重点应用领域。以上现象可不是我假设出来的，而是事实存在的现实问题，受其严重困扰的也不是一家两家了（ 2013 年底 ECUG Con 2013 ，京东的刘奇提到了 Go 语言的 GC 、defer 、标准库实现是性能杀手，最大的痛苦是 GC ；美团的沈锋也提到 Go 语言的 GC 导致后台服务间隔性停顿是最大的问题。更早的网络游戏仙侠道开发团队也曾受 Go 垃圾回收的沉重打击）。在实践中，你必须努力减少进程中的对象数量，以便把 GC 导致的间歇性停顿控制在可接受范围内。除此之外你别无选择（难道你还想自己更换 GC 算法、甚至砍掉 GC ？那还是 Go 语言吗？）。跳出圈外，我近期一直在思考，一定需要垃圾回收器吗？没有垃圾回收器就一定是历史的倒退吗？（可能会新写一篇博客文章专题探讨。）\r\n\r\n2016 年 3 月 3 日 Liigo 补记：直到 2015 年底，Go 1.5 新 GC 发布后数月，仍获知有大陆圈内知名团队因为 GC 的原因考虑换掉 Go 语言，颇有感触。当软件系统逐步发展到更庞大更复杂的时候，Go 语言的垃圾回收器(GC)就变成了指不定啥时候会出现的拦路虎，让人进退两难。进，暂时没有确切有效的技术手段对付响应延迟和内存暴涨；退，多年开发付出的心血付之东流损失惨重。语言选型之前多做调查分析，如果一定要用 Go 语言开发，控制系统规模和复杂度，避开底层的核心业务，可能是比较明智的选择。\r\n\r\n1.6 禁止未使用变量和多余 import\r\nGo 编译器不允许存在被未被使用的变量和多余的 import ，如果存在，必然导致编译错误。但是现实情况是，在代码编写、重构、调试过程中，例如，临时性的注释掉一行代码，很容易就会导致同时出现未使用的变量和多余的 import ，直接编译错误了，你必须相应的把变量定义注释掉，再翻页回到文件首部把多余的 import 也注释掉，……等事情办完了，想把刚才注释的代码找回来，又要好几个麻烦的步骤。还有一个让人蛋疼的问题，编写数据库相关的代码时，如果你 import 某数据库驱动的 pkg ，它编译给你报错，说不需要 import 这个未被使用的 pkg ；但如果你听信编译器的话删掉该 import ，编译是通过了，运行时必然报错，说找不到数据库驱动；你看看程序员被折腾的两边不是人，最后不得不请出大神：`import _`。对待这种问题，一个比较好的解决方案是，视其为编译警告而非编译错误。但是 Go 语言开发者很固执，不容许这种折中方案。\r\n\r\n1.7 创建对象的方式太多令人纠结\r\n创建对象的方式，调用 new 函数、调用 make 函数、调用 New 方法、使用花括号语法直接初始化结构体，你选哪一种？不好选择，因为没有一个固定的模式。从实践中看，如果要创建一个语言内置类型（如 channel 、map ）的对象，通常用 make 函数创建；如果要创建标准库或第三方库定义的类型的对象，首先要去文档里找一下有没有 New 方法，如果有就最好调用 New 方法创建对象，如果没有 New 方法，则退而求其次，用初始化结构体的方式创建其对象。这个过程颇为周折，不像 C++、Java 、C#那样直接 new 就行了。\r\n\r\n1.8 对象没有构造函数和析构函数\r\n没有构造函数还好说，毕竟还有自定义的 New 方法，大致也算是构造函数了。没有析构函数就比较难受了，没法实现 RAII 。额外的人工处理资源清理工作，无疑加重了程序员的心智负担。没人性啊，还嫌我们程序员加班还少吗？ C++里有析构函数，Java 里虽然没有析构函数但是有人家 finally 语句啊，Go 呢，什么都没有。没错，你有个 defer ，可是那个 defer 问题更大，详见下文吧。\r\n\r\n1.9 defer 语句的语义设定不甚合理\r\nGo 语言设计 defer 语句的出发点是好的，把释放资源的“代码”放在靠近创建资源的地方，但把释放资源的“动作”推迟（ defer ）到函数返回前执行。遗憾的是其执行时机的设置似乎有些不甚合理。设想有一个需要长期运行的函数，其中有无限循环语句，在循环体内不断的创建资源（或分配内存），并用 defer 语句确保释放。由于函数一直运行没有返回，所有 defer 语句都得不到执行，循环过程中创建的大量短暂性资源一直积累着，得不到回收。而且，系统为了存储 defer 列表还要额外占用资源，也是持续增加的。这样下去，过不了多久，整个系统就要因为资源耗尽而崩溃。像这类长期运行的函数，http.ListenAndServe()就是典型的例子。在 Go 语言重点应用领域，可以说几乎每一个后台服务程序都必然有这么一类函数，往往还都是程序的核心部分。如果程序员不小心在这些函数中使用了 defer 语句，可以说后患无穷。如果语言设计者把 defer 的语义设定为在所属代码块结束时（而非函数返回时）执行，是不是更好一点呢？可是 Go 1.0 早已发布定型，为了保持向后兼容性，已经不可能改变了。小心使用 defer 语句！一不小心就中招。\r\n\r\n1.10 许多语言内置设施不支持用户定义的类型\r\nfor in 、make 、range 、channel 、map 等都仅支持语言内置类型，不支持用户定义的类型(?)。用户定义的类型没法支持 for in 循环，用户不能编写像 make 、range 那样“参数类型和个数”甚至“返回值类型和个数”都可变的函数，不能编写像 channel 、map 那样类似泛型的数据类型。语言内置的那些东西，处处充斥着斧凿的痕迹。这体现了语言设计的局限性、封闭性、不完善，可扩展性差，像是新手作品——且不论其设计者和实现者如何权威。延伸阅读：Go 语言是 30 年前的陈旧设计思想，用户定义的东西几乎都是二等公民（ Tikhon Jelvis ）。\r\n\r\n1.11 没有泛型支持，常见数据类型接口丑陋\r\n没有泛型的话，List 、Set 、Tree 这些常见的基础性数据类型的接口就只能很丑陋：放进去的对象是一个具体的类型，取出来之后成了无类型的 interface{}（可以视为所有类型的基础类型），还得强制类型转换之后才能继续使用，令人无语。Go 语言缺少 min 、max 这类函数，求数值绝对值的函数 abs 只接收/返回双精度小数类型，排序接口只能借助 sort.Interface 无奈的回避了被比较对象的类型，等等等等，都是没有泛型导致的结果。没有泛型，接口很难优雅起来。Go 开发者没有明确拒绝泛型，只是说还没有找到很好的方法实现泛型（能不能学学已经开源的语言呀）。现实是，Go 1.0 已经定型，泛型还没有，那些丑陋的接口为了保持向后兼容必须长期存在着。延伸阅读：HN 网友抱怨 Go 没有泛型。\r\n\r\n1.12 实现接口不需要明确声明\r\n这一条通常是被当作 Go 语言的优点来宣传的。但是也有人不赞同，比如我。如果一个类型用 Go 语言的方式默默的实现了某个接口，使用者和代码维护者都很难发现这一点（除非仔细核对该类型的每一个方法的函数签名，并跟所有可能的接口定义相互对照），自然也想不到与该接口有关的应用，显得十分隐晦，不直观。支持者可能会辩解说，我可以在文档中注明它实现了哪些接口。问题是，写在文档中，还不如直接写到类型定义上呢，至少还能得到编译器的静态类型检查。缺少了编译器的支持，当接口类型的函数签名被改变时，当实现该接口的类型方法被无意中改变时，实现者可能很难意识到，该类型实现该接口的隐含约束事实上已经被打破了。又有人辩解说，我可以通过单元测试确保类型正确实现了接口呀。我想说的是，明明可以通过明确声明实现接口，享受编译器提供的类型检查，你却要自己找麻烦，去写原本多余的单元测试，找虐很爽吗？ Go 语言的这种做法，除了减少一些对接口所在库的依赖之外，没有其他好处，得不偿失。延伸阅读：为什么我不喜欢 Go 语言式的接口（老赵）。\r\n\r\n1.13 省掉小括号却省不掉花括号\r\nGo 语言里面的 if 语句，其条件表达式不需要用小括号扩起来，这被作为“代码比较简洁”的证据来宣传。可是，你省掉了小括号，却不能省掉大括号啊，一条完整的 if 语句至少还得三行吧，人家 C 、C++、Java 都可以在一行之内搞定的（可以省掉花括号）。人家还有 x?a:b 表达式呢，也是一行搞定，你 Go 语言用 if else 写至少得五行吧？哪里简洁了？\r\n\r\n1.14 编译生成的可执行文件尺寸非常大\r\n记得当年我写了一个很简单的程序，把所有系统环境变量的名称和值输出到控制台，核心代码也就那么三五行，结果编译出来把我吓坏了：EXE 文件的大小超过 4MB 。如果是 C 语言写的同样功能的程序，0.04MB 都是多的。我把这个信息反馈到官方社区，结果人家不在乎。是，我知道现在的硬盘容量都数百 GB 、上 TB 了……可您这种优化程度……怎么让我相信您在其他地方也能做到不错呢。（再次强调一遍，我所有的经验和数据都来自 Go 1.0 发布前夕。）\r\n\r\n1.15 不支持动态加载类库\r\n静态编译的程序当然是很好的，没有额外的运行时依赖，部署时很方便。但是之前我们说了，静态编译的文件尺寸很大。如果一个软件系统由多个可执行程序构成，累加起来就很可观。如果用动态编译，发布时带同一套动态库，可以节省很多容量。更关键的是，动态库可以运行时加载和卸载，这是静态库做不到的。还有那些 LGPL 等协议的第三方 C 库受版权限制是不允许静态编译的。至于动态库的版本管理难题，可以通过给动态库内的所有符号添加版本号解决。无论如何，应该给予程序员选择权，让他们自己决定使用静态库还是动态库。一刀切的拒绝动态编译是不合适的。\r\n\r\n1.16 其他\r\n不支持方法和函数重载（ overload ）\r\n导入 pkg 的 import 语句后边部分竟然是文本（ import ”fmt”）\r\n没有 enum 类型，全局性常量难以分类，iota 把简单的事情复杂化\r\n定义对象方法时，receiver 类型应该选用指针还是非指针让人纠结\r\n定义结构体和接口的语法稍繁，interface XXX{} struct YYY{} 不是更简洁吗？前面加上 type 关键字显得罗嗦。\r\n测试类库 testing 里面没有 AssertEqual 函数，标准库的单元测试代码中充斥着 if a != b { t.Fatal(...) }。\r\n语言太简单，以至于不得不放弃很多有用的特性，“保持语言简单”往往成为拒绝改进的理由。\r\n标准库的实现总体来说不甚理想，其代码质量大概处于“基本可用”的程度，真正到企业级应用领域，往往就会暴露出诸多不足之处。\r\n版本都发展到 1.2 了，goroutine 调度器依旧默认仅使用一个系统线程。GOMAXPROCS 的长期存在似乎暗示着官方从来没有足够的信心，让调度器正确安全地运行在多核环境中。这跟 Go 语言自身以并发为核心的定位有致命的矛盾。（直到 2015 年下半年 1.5 发布后才有改观）\r\n官方发行版中包含了一个叫 oracle 的辅助程序，与 Oracle 数据库毫无关系，却完全无视两者之间的名称混淆。\r\n上面列出的是我目前还能想到的对 Go 语言的不爽之处，毕竟时间过去两年多，还有一些早就遗忘了。其中一部分固然是小不爽，可能忍一忍就过去了，但是很多不爽积累起来，总会时不时地让人难受，时间久了有自虐的感觉。程序员的工作生活本来就够枯燥的，何必呢。\r\n\r\n必须要说的是，对于其中大多数不爽之处，我（ Liigo ）都曾经试图改变过它们：在 Go 1.0 版本发布之前，我在其官方邮件组提过很多意见和建议（甚至包括提交代码 CL ），极力据理力争，可以说付出很大努力，目的就是希望定型后的 Go 语言是一个相对完善的、没有明显缺陷的编程语言。结果是令人失望的，我人微言轻、势单力薄，不可能影响整个语言的发展走向。1.0 之前，最佳的否定自我、超越自我的机会，就这么遗憾地错过了。我最终发现，很多时候不是技术问题，而是技术人员的问题。\r\n\r\n第 2 节：我为什么对 Go 语言的某些人不爽？\r\n这里提到的“某些人”主要是两类：一、负责专职开发 Go 语言的 Google 公司员工；二、Go 语言的推崇者和脑残粉丝。我跟这两类人打过很多交道，不胜其烦。再次强调一遍，我指的是“某些”人，而不是所有人，请不要对号入座。\r\n\r\nGoogle 公司内部负责专职开发 Go 语言的核心开发组某些成员，他们倾向于闭门造车，固执己见，对第三方提出的建议不重视。他们常常挂在嘴边的口头禅是：现有的做法很好、不需要那个功能、我们开发 Go 语言是给 Google 自己用的、Google 不需要那个功能、如果你一定要改请 fork 之后自己改、别干提意见请提交代码。很多言行都是“反开源”的。通过一些具体的例子，还能更形象的看清这一层。就留下作为课后作业吧。\r\n\r\n我最不能接受的就是他们对 1.0 版本的散漫处理。那时候 Go 还没到 1.0 ，初出茅庐的小学生，有很大的改进空间，是全面翻新的最佳时机，彼时不改更待何时？ 1.0 是打地基的版本，基础不牢靠，等 1.0 定型之后，处处受到向后兼容性的牵制，束手缚脚，每前进一步都阻力重重。急于发布 1.0 ，过早定型，留下诸多遗憾，彰显了开发者的功利性强，在技术上不追求尽善尽美。\r\n\r\nGo 语言的核心开发成员，他们日常的开发工作是使用 C 语言——Go 语言的编译器和运行时库，包括语言核心数据结构和算法 map 、channel 、scheduler ，都是 C 开发的——真正用自己开发的 Go 语言进行实际的大型应用开发的机会并不多。虽然标准库是用 Go 语言自己写的，但他们却没有大范围使用标准库的经历。实际上，他们缺少使用 Go 语言的实战开发经验，往往不知道处于开发第一线的用户真正需要什么，无法做到设身处地为程序员着想。缺少使用 Go 语言的亲身经历，也意味着他们不能在日常开发中，及时发现和改进 Go 语言的不足。这也是他们往往自我感觉良好的原因。（ 2016 年 5 月 15 日补记：2015 年 8 月 Go 1.5 版本之后不再使用 C 语言开发。）\r\n\r\nGo 语言社区里，有一大批 Go 语言的推崇者和脑残粉丝，他们满足于现状，不思进取，处处维护心中的“神”，容不得批评意见，不支持对语言的改进要求。当年我对 Go 语言的很多批评和改进意见，极少得到他们的支持，他们不但不支持还给予打击，我就纳闷了，他们难道不希望 Go 语言更完善、更优秀吗？我后来才意识到，他们跟乔帮主的苹果脑残粉丝们，言行一脉相承，具有极端宗教倾向，神化主子、打击异己真是不遗余力呀。简简单单的技术问题，就能被他们上升到意识形态之争。现实的例子是蛮多的，有兴趣的到网上去找吧。正是因为他们的存在，导致更多理智、清醒的 Go 语言用户无法真正融入整个社区。\r\n\r\n如果一个项目、团队、社区，到处充斥着赞美、孤芳自赏、自我满足、不思进取，排斥不同意见，拒绝接纳新方案，我想不到它还有什么前进的动力。逆水行舟，是不进反退的。\r\n\r\n2016 年 5 月 15 日补记：@netroby：“Golang 社区的神经病和固执，我深有体会。我曾经发过 Issue ，请求 Golang 官方，能为 doc 加上高亮，这样浏览器阅读文档的时候，能快速阅读代码参考。但是被各种拒绝. 他们的理由是很多开发者不喜欢高亮。” https://github.com/golang/go/issues/13178\r\n\r\n2016 年 5 月 15 日补记：C++天才人物、D 语言联合创始人 Andrei Alexandrescu：“Go 所走的路线在一些问题上持有极其强硬和死板态度，这些问题有大有小。在比较大的方面，泛型编程被严格控制，甚至贬低到只有\"N\"个字；有关泛型编程的讨论都是试图去劝阻任何有意义的尝试，这已经足够让人觉得耻辱。从长远来看，技术问题的政治化是一种极其有害的模式，所以希望 Go 社区能够找到修正它的方法。”  http://www.csdn.net/article/2015-12-20/2826517\r\n\r\n第 3 节：还有比 Go 语言更好的选择吗？\r\n我始终坚持一个颇有辩证法意味的哲学观点：在更好的替代品出现之前，现有的就是最好的。失望是没有用的，抱怨是没有用的，要么接受，要么逃离。我曾经努力尝试过接受 Go 语言，失败之后，注定要逃离。发现更好的替代品之后，无疑加速了逃离过程。还有比 Go 语言更好的替代品吗？当然有。作为一个屌丝程序员，我应该告诉你它是什么，但是我不说。现在还不是时候。我现在不想把这两门编程语言对立起来，引发另一场潜在的语言战争。这不是此文的本意。如果你非要从现有信息中推测它是什么，那完全是你自己的事。如果你原意等，它或许很快会浮出水面，也未可知。\r\n\r\n第 4 节：写在最后\r\n我不原意被别人代表，也不愿意代表别人。这篇文章写的是我，一个叫 Liigo 的 80 后屌丝程序员，自己的观点。你完全可以主观地认为它是主观的，也完全可以客观地以为它是客观的，无论如何，那是你的观点。\r\n\r\n这篇文字是从记忆里收拾出来的。有些细节虽可考，而不值得考。——我早已逃离，不愿再回到当年的场景。文中涉及的某些细节，可能会因为些许偏差，影响其准确性；也可能会因为缺少出处，影响其客观性。如果有人较真，非要去核实，我相信那些东西应该还在那里。\r\n\r\nGo 语言也非上文所述一无是处，它当然有它的优势和特色。读者们判断一件事物，应该是优劣并陈，做综合分析，不能单听我一家负面之言。但是它的那些不爽之处，始终让我不爽，且不能从其优秀处得以完全中和，这是我不得不放弃它的原因。\r\n\r\n关于对作者倾向性质疑的声明：\r\n\r\n读者看到本文全都是 Go 语言负面性的内容，没有涉及一点 Go 语言好的地方，因而质疑作者的盲目倾向。出现这种结果完全是因为文章主题所限。此前本文末尾也简单提到过，评估一件事物，应当优劣并陈，优势项加分，劣势项减分，做综合评估分析。如果有突出的重大优势，则可以容忍一些较大的劣势；但如果有致命的劣势或多项大劣势，则再大的优势也无法与之中和。中国乒乓球界讲领军人物必须做到“技术全面，特长突出，没有明显弱点”，我甚为赞同。用这句话套用 Go 语言，可以说“技术不全面（人家自己说成简洁），有一点特长（并发），有明显的弱点（包括但不限于本文列出的这些）”。如此一来，优势都被劣势中和了，劣势还是那么突出，自然是得负分，自然是弃用，自然是没有好印象。我在这里可以说观点鲜明、态度明确，不和稀泥。与其看那些盲目推崇 Go 语言的人和文章，笼统的说“好”，不如也顺便看看本文，具体到细节地说“不好”。凡是具体到细节的东西，都是容易证实或证伪的，比笼统的东西（无论是\"黑\"还是\"粉\"）可信性更高一些。\r\n\r\n关于对作者阴谋论的声明：\r\n\r\n有某些阴谋论者（例如谢某），说我因一个 Pull Request 被 Go 开发者拒绝而“怀恨至今”，暗示此文是故意报复、抹黑 Go 语言。我对 Golang 有恨吗？当然是有的，那是一个不爽接一个不爽（如本文一一罗列的那些），逐步累积，由量变形成质变的结果，是我对 Golang 综合客观评估之后的主观态度，并非由哪一个单独的事件所主导。要说 Pull Request 被拒绝，Rust 开发者拒绝我的 PR 次数还少吗？比如 https://github.com/mozilla/rust/pull/13014 和 https://github.com/liigo/rust/tree/xp ( https://github.com/rust-lang/rust/issues/12842)，要是再算上被拒的 Issues ，那就多的数不清了。我显然不可能因为某些个别的事件，影响到我对某个事物的综合评估（参见前文）。那本文是“故意抹黑”Go 语言吗？我觉得不是，理由有二：1 、这是作者的主观感受，2 、这些感受是以许多客观事实为基础的。如果本文一一列出的那些现象，是不存在的，是虚构出来的，是凭空生成的，那么作者一定是“低级黑”。问题是，那些都是客观存在的事实。把事实说出来，怎么能叫“黑”呢？欢迎读者客观而详细的指正本文中的所有错误。\r\n\r\n关于 Golang 2.0 的泛型：\r\n\r\n今天（ 2020 年 2 月 19 日）看到 HN 的一篇关于 Go2 Generics 的讨论。有网友说到：\r\n\r\nKen Thompson and Rob Pike are mostly out not at all involved with Go anymore. They are 2/3 of the original creators. It’s different people making the decisions now.\r\n\r\n我找到如下两个链接基本证实了 Rob Pike 确实已经淡出 Golang 的核心开发组：\r\n\r\ngolang/go#33892\r\ngolang/go#33502\r\nRob Pike 最近两年仅提交了 4k 行无关紧要的代码； Ken Thompson 就更不用说了，许多年前就已经淡出； Russ Cox 似乎也不太参与 Go2 相关的决策。如此看来，对于 Go2 的泛型而言，非技术方面的障碍已不存在，剩下只是技术性障碍。\r\n\r\nIan Lance Taylor 上周（ 2020 年 2 月 13 日）说到：\r\n\r\nWe're working on it. Some things take time.\r\n\r\n转自:https://blog.csdn.net/liigo/article/details/23699459", "content_rendered": "<p>有好几次，当我想起来的时候，总是会问自己：我为什么要放弃 Go 语言？这个决定是正确的吗？是明智和理性的吗？其实我一直在认真思考这个问题。</p>\n<p>开门见山地说，我当初放弃 Go 语言（ golang ），就是因为两个“不爽”：第一，对 Go 语言本身不爽；第二，对 Go 语言社区里的某些人不爽。毫无疑问，这是非常主观的结论。但是我有足够详实的客观的论据，用以支撑这个看似主观的结论。</p>\n<p>第-1 节：更新日志（倒叙）\nLiigo 2021-07-13 补记 14：今日 HN 热帖上大伙普遍吐槽 channel ，要用好真的很难。judofyr: \"Channels are extremely subtle in my experience\". laumars: \"It took me a loooong time to fully wrap my head around channels. They’re definitely not explicit and full of subtle yet devastating bugs when used inappropriately (which is all to easy to do too).\" 💡 另将本文更新日志从文末移至文首作为第-1 节，并改为按日期倒叙排列。</p>\n<p>Liigo 2020-2-19 补记 13：本文末尾增加 Golang 2.0 泛型相关信息。</p>\n<p>Liigo 2016-5-15 补记 12：文中第 2 节（我为什么对 Go 社区的人不爽）增加 netroby 和 D 语言联合创始人的现身说法。补充说明 Go 1.5 后不再使用 C 语言开发。</p>\n<p>Liigo 2016-3-3 补记 11：文中 1.5 节（垃圾回收器/GC ）末尾增加一段，再次提示开发者重视 Go 语言 GC 的潜在问题。</p>\n<p>Liigo 2015-7-17 补记 10：文中 1.11 节（泛型）增加来自 HN 的延伸阅读链接，开发者们抱怨 Go 欠缺泛型支持。</p>\n<p>Liigo 2015-7-3 补记 9：文中 1.5 节（垃圾回收器/GC ）增加 “Stop the world” 相关的三个链接。</p>\n<p>Liigo 2015-7-2 补记 8：前两天网上出现了一篇本文的驳文，《驳狗屎文 \"我为什么放弃 Go 语言\"》，作者是 chai2010 ，请读者们参照阅读，顺便领略一下本文后半部分描述过的 Go 粉的\"风采\"。（这篇驳文至少有两个好处：1 它全文引用了本文(便于读者参照)； 2 使用了本文当时的最新版(包含了补记 7)。）</p>\n<p>Liigo 2015-6-2 补记 7：补充两篇英文：Why Go Is Not Good （作者 Will Yager 重点批评了 Go 语言的设计不佳甚至是倒退），Leaving Go （作者 Danny Gratzer 放弃 Go 语言的原因主要是：没有泛型，充满黑魔法）。这两篇文章都是针对具体问题做具体分析的，与本文写作精神一致，务实不务虚。其中提到的对 Go 语言不满的地方，本文也多有涉及，结论类似。</p>\n<p>Liigo 2015-5-29 补记 6：补充说明 Go 语言直到 2015 年下半年 1.5 发布后才将 GOMAXPROCS 设置为大于 1 的默认值(HN)，他们文中承认之前一直默认设置为 1 是因为调度器不完善（与我此文最初发表时的猜测一致）。</p>\n<p>Liigo 2015-4-1 补记 5：文中 1.10 （黑魔法）和 1.12 （接口）章节增加了两处“延伸阅读”链接，被引用的链接后面均有大量网友评论。此举主要是为了说明本文观点并非一家之言。</p>\n<p>Liigo 2015-1-31 补记 4：全世界认为 Go 语言不好的可不只是我 Liigo 一个人。国外著名的问答网站 Quora 上面有个人气很高的提问，“为什么不要用 Go 语言”（英文网页），看看那排名最前的两个答案，以及广大程序员们给这两个答案的数百个“赞”，都足以说明 Go 语言自身的问题是客观存在的。人民群众的眼睛是雪亮的。</p>\n<p>Liigo 2014-4-29 补记 3：Go 语言的拥护者们，似乎连 Go 语言的“核心优势”都说不出几条。知乎上很有人气的一条问答《为什么要使用 Go 语言，Go 语言的优势在哪里》，连静态编译、GC 、跨平台都拿出来说了（无视 C/C++/Java ），甚至连简单易学（无视 Python/易语言）、“丰富的”标准库（跟谁比?敢跟 Java/C#/Python 比么?）、好用的工具链（ gofmt ）都扯出来了，可见除了“并发、网络”之外，他们也讲不出另外的什么核心优势了，只能靠一些周边的东西凑数。</p>\n<p>Liigo 2014-4-29 补记 2：著名的编程语言研究专家王垠写了一篇《对 Go 语言的综合评价》（晚于本博文发表约三五天），也是总体上持批判态度，看衰 Go 语言。读者们可以对照阅读。</p>\n<p>Liigo 2014-4-29 补记 1：Go 语言社区还有一个很奇特的现象，就是中国社区独大，国外社区要小的多。有外国网友还专门写了一篇文章研究《为什么 Golang 中国社区独大》这个问题（文中也提到了我这篇博文）。通常来说，在 IT 和软件领域，向来都是国外先进国家引领技术潮流，然后国内缓慢跟进。而到了 Go 语言这里，恰恰反过来了，似乎暗示着在国外的主流软件开发技术人员并不怎么待见 Go 语言，Go 只是在国内受到一帮人的盲目推崇而已，至于这帮人的眼光如何，反正我不看好。</p>\n<p>第 0 节：我的 Go 语言经历\n先说说我的经历吧，以避免被无缘无故地当作 Go 语言的低级黑。</p>\n<p>2009 年底，Go 语言（ golang ）第一个公开版本发布，笼罩着“Google 公司制造”的光环，吸引了许多慕名而来的尝鲜者，我（ Liigo ）也身居其中，笼统的看了一些 Go 语言的资料，学习了基础的教程，因对其语法中的分号和花括号不满，很快就遗忘掉了，没拿它当一回事。</p>\n<p>两年之后，2011 年底，Go 语言发布 1.0 的计划被提上日程，相关的报道又多起来，我再次关注它，<a href=\"https://plus.google.com/+LiigoZhuang/posts/CpRNPeDXUDW\" rel=\"nofollow\">重新评估</a>之后决定深入参与 Go 语言。我订阅了其 users 、nuts 、dev 、commits 等官方邮件组，坚持每天阅读其中的电子邮件，以及开发者提交的每一次源代码更新，给 Go 提交了许多改进意见，甚至包括<a href=\"http://blog.csdn.net/liigo/article/details/7467309\" rel=\"nofollow\">修改 Go 语言编译器源代码</a>直接参与开发任务。如此持续了数月时间。</p>\n<p>到 2012 年初，Go 1.0 发布，语言和标准库都已经基本定型，不可能再有大幅改进，我对 Go 语言未能在 1.0 定型之前更上一个台阶、实现自我突破，甚至带着诸多明显缺陷走向 1.0 ，感到非常失望，因而逐渐疏远了它（所以 Go 1.0 之后的事情我很少关心）。后来看到即将发布的 Go 1.1 的 Release Note ，发现语言层面没有太大改变，只是在库和工具层面有所修补和改进，感到它尚在幼年就失去成长的动力，越发失望。外加 Go 语言社区里的某些人，其中也包括 Google 公司负责开发 Go 语言的某些人，其态度、言行，让我极度厌恶，促使我决绝地离弃 Go 语言。</p>\n<p>在上一个 10 年，我（ Liigo ）在我所属的公司里，深度参与了两个编程语言项目的开发。我想，对于如何判断某个编程语言的优劣，或者说至少对于如何判断某个编程语言是否适合于我自己，我应该还是有一点发言权的。</p>\n<p>第 1 节：我为什么对 Go 语言不爽？\nGo 语言有很多让我不爽之处，这里列出我现在还能记起的其中一部分，排名基本上不分先后。读者们耐心地看完之后，还能淡定地说一句“我不在乎”吗？</p>\n<p>1.1 不允许左花括号另起一行\n关于对花括号的摆放，在 C 语言、C++、Java 、C#等社区中，十余年来存在持续争议，从未形成一致意见。在我看来，这本来就是主观倾向很重的抉择，不违反原则不涉及是非的情况下，不应该搞一刀切，让程序员或团队自己选择就足够了。编程语言本身强行限制，把自己的喜好强加给别人，得不偿失。无论倾向于其中任意一种，必然得罪与其对立的一群人。虽然我现在已经习惯了把左花括号放在行尾，但一想到被禁止其他选择，就感到十分不爽。Go 语言这这个问题上，没有做到“团结一切可以团结的力量”不说，还有意给自己树敌，太失败了。</p>\n<p>1.2 编译器莫名其妙地给行尾加上分号\n对 Go 语言本身而言，行尾的分号是可以省略的。但是在其编译器（ gc ）的实现中，为了方便编译器开发者，却在词法分析阶段强行添加了行尾的分号，反过来又影响到语言规范，对“怎样添加分号”做出特殊规定。这种变态做法前无古人。在左花括号被意外放到下一行行首的情况下，它自动在上一行行尾添加的分号，会导致莫名其妙的编译错误（ Go 1.0 之前），连它自己都解释不明白。如果实在处理不好分号，干脆不要省略分号得了；或者，Scala 和 JavaScript 的编译器是开源的，跟它们学学怎么处理省略行尾分号可以吗？</p>\n<p>1.3 极度强调编译速度，不惜放弃本应提供的功能\n程序员是人不是神，编码过程中免不了因为大意或疏忽犯一些错。其中有一些，是大家集体性的很容易就中招的错误（ Go 语言里的例子我暂时想不起来，C++里的例子有“基类析构函数不是虚函数”）。这时候编译器应该站出来，多做一些检查、约束、核对性工作，尽量阻止常规错误的发生，尽量不让有潜在错误的代码编译通过，必要时给出一些警告或提示，让程序员留意。编译器不就是机器么，不就是应该多做脏活累活杂活、减少人的心智负担么？编译器多做一项检查，可能会避免数十万程序员今后多年内无数次犯同样的错误，节省的时间不计其数，这是功德无量的好事。但是 Go 编译器的作者们可不这么想，他们不愿意自己多花几个小时给编译器增加新功能，觉得那是亏本，反而减慢了编译速度。他们以影响编译速度为由，拒绝了很多对编译器改进的要求。典型的因噎废食。强调编译速度固然值得赞赏，但如果因此放弃应有的功能，我不赞成。</p>\n<p>1.4 错误处理机制太原始\n在 Go 语言中处理错误的基本模式是：函数通常返回多个值，其中最后一个值是 error 类型，用于表示错误类型极其描述；调用者每次调用完一个函数，都需要检查这个 error 并进行相应的错误处理：if err != nil { /<em>这种代码写多了不想吐么</em>/ }。此模式跟 C 语言那种很原始的错误处理相比如出一辙，并无实质性改进。实际应用中很容易形成多层嵌套的 if else 语句，可以想一想这个编码场景：先判断文件是否存在，如果存在则打开文件，如果打开成功则读取文件，如果读取成功再写入一段数据，最后关闭文件，别忘了还要处理每一步骤中出现错误的情况，这代码写出来得有多变态、多丑陋？实践中普遍的做法是，判断操作出错后提前 return ，以避免多层花括号嵌套，但这么做的后果是，许多错误处理代码被放在前面突出的位置，常规的处理逻辑反而被掩埋到后面去了，代码可读性极差。而且，error 对象的标准接口只能返回一个错误文本，有时候调用者为了区分不同的错误类型，甚至需要解析该文本。除此之外，你只能手工强制转换 error 类型到特定子类型（静态类型的优势没了）。至于 panic - recover 机制，致命的缺陷是不能跨越库的边界使用，注定是一个半成品，最多只能在自己的 pkg 里面玩一玩。Java 的异常处理虽然也有自身的问题（比如 Checked Exceptions ），但总体上还是比 Go 的错误处理高明很多。</p>\n<p>1.5 垃圾回收器（ GC ）不完善、有重大缺陷\n在 Go 1.0 前夕，其垃圾回收器在 32 位环境下有内存泄漏，一直拖着不肯改进，这且不说。Go 语言垃圾回收器真正致命的缺陷是，会导致整个进程不可预知的间歇性停顿（ Stop the World ）。像某些大型后台服务程序，如游戏服务器、APP 容器等，由于占用内存巨大，其内存对象数量极多，GC 完成一次回收周期，可能需要数秒甚至更长时间，这段时间内，整个服务进程是阻塞的、停顿的，在外界看来就是服务中断、无响应，再牛逼的并发机制到了这里统统失效。垃圾回收器定期启动，每次启动就导致短暂的服务中断，这样下去，还有人敢用吗？这可是后台服务器进程，是 Go 语言的重点应用领域。以上现象可不是我假设出来的，而是事实存在的现实问题，受其严重困扰的也不是一家两家了（ 2013 年底 ECUG Con 2013 ，京东的刘奇提到了 Go 语言的 GC 、defer 、标准库实现是性能杀手，最大的痛苦是 GC ；美团的沈锋也提到 Go 语言的 GC 导致后台服务间隔性停顿是最大的问题。更早的网络游戏仙侠道开发团队也曾受 Go 垃圾回收的沉重打击）。在实践中，你必须努力减少进程中的对象数量，以便把 GC 导致的间歇性停顿控制在可接受范围内。除此之外你别无选择（难道你还想自己更换 GC 算法、甚至砍掉 GC ？那还是 Go 语言吗？）。跳出圈外，我近期一直在思考，一定需要垃圾回收器吗？没有垃圾回收器就一定是历史的倒退吗？（可能会新写一篇博客文章专题探讨。）</p>\n<p>2016 年 3 月 3 日 Liigo 补记：直到 2015 年底，Go 1.5 新 GC 发布后数月，仍获知有大陆圈内知名团队因为 GC 的原因考虑换掉 Go 语言，颇有感触。当软件系统逐步发展到更庞大更复杂的时候，Go 语言的垃圾回收器(GC)就变成了指不定啥时候会出现的拦路虎，让人进退两难。进，暂时没有确切有效的技术手段对付响应延迟和内存暴涨；退，多年开发付出的心血付之东流损失惨重。语言选型之前多做调查分析，如果一定要用 Go 语言开发，控制系统规模和复杂度，避开底层的核心业务，可能是比较明智的选择。</p>\n<p>1.6 禁止未使用变量和多余 import\nGo 编译器不允许存在被未被使用的变量和多余的 import ，如果存在，必然导致编译错误。但是现实情况是，在代码编写、重构、调试过程中，例如，临时性的注释掉一行代码，很容易就会导致同时出现未使用的变量和多余的 import ，直接编译错误了，你必须相应的把变量定义注释掉，再翻页回到文件首部把多余的 import 也注释掉，……等事情办完了，想把刚才注释的代码找回来，又要好几个麻烦的步骤。还有一个让人蛋疼的问题，编写数据库相关的代码时，如果你 import 某数据库驱动的 pkg ，它编译给你报错，说不需要 import 这个未被使用的 pkg ；但如果你听信编译器的话删掉该 import ，编译是通过了，运行时必然报错，说找不到数据库驱动；你看看程序员被折腾的两边不是人，最后不得不请出大神：<code>import _</code>。对待这种问题，一个比较好的解决方案是，视其为编译警告而非编译错误。但是 Go 语言开发者很固执，不容许这种折中方案。</p>\n<p>1.7 创建对象的方式太多令人纠结\n创建对象的方式，调用 new 函数、调用 make 函数、调用 New 方法、使用花括号语法直接初始化结构体，你选哪一种？不好选择，因为没有一个固定的模式。从实践中看，如果要创建一个语言内置类型（如 channel 、map ）的对象，通常用 make 函数创建；如果要创建标准库或第三方库定义的类型的对象，首先要去文档里找一下有没有 New 方法，如果有就最好调用 New 方法创建对象，如果没有 New 方法，则退而求其次，用初始化结构体的方式创建其对象。这个过程颇为周折，不像 C++、Java 、C#那样直接 new 就行了。</p>\n<p>1.8 对象没有构造函数和析构函数\n没有构造函数还好说，毕竟还有自定义的 New 方法，大致也算是构造函数了。没有析构函数就比较难受了，没法实现 RAII 。额外的人工处理资源清理工作，无疑加重了程序员的心智负担。没人性啊，还嫌我们程序员加班还少吗？ C++里有析构函数，Java 里虽然没有析构函数但是有人家 finally 语句啊，Go 呢，什么都没有。没错，你有个 defer ，可是那个 defer 问题更大，详见下文吧。</p>\n<p>1.9 defer 语句的语义设定不甚合理\nGo 语言设计 defer 语句的出发点是好的，把释放资源的“代码”放在靠近创建资源的地方，但把释放资源的“动作”推迟（ defer ）到函数返回前执行。遗憾的是其执行时机的设置似乎有些不甚合理。设想有一个需要长期运行的函数，其中有无限循环语句，在循环体内不断的创建资源（或分配内存），并用 defer 语句确保释放。由于函数一直运行没有返回，所有 defer 语句都得不到执行，循环过程中创建的大量短暂性资源一直积累着，得不到回收。而且，系统为了存储 defer 列表还要额外占用资源，也是持续增加的。这样下去，过不了多久，整个系统就要因为资源耗尽而崩溃。像这类长期运行的函数，http.ListenAndServe()就是典型的例子。在 Go 语言重点应用领域，可以说几乎每一个后台服务程序都必然有这么一类函数，往往还都是程序的核心部分。如果程序员不小心在这些函数中使用了 defer 语句，可以说后患无穷。如果语言设计者把 defer 的语义设定为在所属代码块结束时（而非函数返回时）执行，是不是更好一点呢？可是 Go 1.0 早已发布定型，为了保持向后兼容性，已经不可能改变了。小心使用 defer 语句！一不小心就中招。</p>\n<p>1.10 许多语言内置设施不支持用户定义的类型\nfor in 、make 、range 、channel 、map 等都仅支持语言内置类型，不支持用户定义的类型(?)。用户定义的类型没法支持 for in 循环，用户不能编写像 make 、range 那样“参数类型和个数”甚至“返回值类型和个数”都可变的函数，不能编写像 channel 、map 那样类似泛型的数据类型。语言内置的那些东西，处处充斥着斧凿的痕迹。这体现了语言设计的局限性、封闭性、不完善，可扩展性差，像是新手作品——且不论其设计者和实现者如何权威。延伸阅读：Go 语言是 30 年前的陈旧设计思想，用户定义的东西几乎都是二等公民（ Tikhon Jelvis ）。</p>\n<p>1.11 没有泛型支持，常见数据类型接口丑陋\n没有泛型的话，List 、Set 、Tree 这些常见的基础性数据类型的接口就只能很丑陋：放进去的对象是一个具体的类型，取出来之后成了无类型的 interface{}（可以视为所有类型的基础类型），还得强制类型转换之后才能继续使用，令人无语。Go 语言缺少 min 、max 这类函数，求数值绝对值的函数 abs 只接收/返回双精度小数类型，排序接口只能借助 sort.Interface 无奈的回避了被比较对象的类型，等等等等，都是没有泛型导致的结果。没有泛型，接口很难优雅起来。Go 开发者没有明确拒绝泛型，只是说还没有找到很好的方法实现泛型（能不能学学已经开源的语言呀）。现实是，Go 1.0 已经定型，泛型还没有，那些丑陋的接口为了保持向后兼容必须长期存在着。延伸阅读：HN 网友抱怨 Go 没有泛型。</p>\n<p>1.12 实现接口不需要明确声明\n这一条通常是被当作 Go 语言的优点来宣传的。但是也有人不赞同，比如我。如果一个类型用 Go 语言的方式默默的实现了某个接口，使用者和代码维护者都很难发现这一点（除非仔细核对该类型的每一个方法的函数签名，并跟所有可能的接口定义相互对照），自然也想不到与该接口有关的应用，显得十分隐晦，不直观。支持者可能会辩解说，我可以在文档中注明它实现了哪些接口。问题是，写在文档中，还不如直接写到类型定义上呢，至少还能得到编译器的静态类型检查。缺少了编译器的支持，当接口类型的函数签名被改变时，当实现该接口的类型方法被无意中改变时，实现者可能很难意识到，该类型实现该接口的隐含约束事实上已经被打破了。又有人辩解说，我可以通过单元测试确保类型正确实现了接口呀。我想说的是，明明可以通过明确声明实现接口，享受编译器提供的类型检查，你却要自己找麻烦，去写原本多余的单元测试，找虐很爽吗？ Go 语言的这种做法，除了减少一些对接口所在库的依赖之外，没有其他好处，得不偿失。延伸阅读：为什么我不喜欢 Go 语言式的接口（老赵）。</p>\n<p>1.13 省掉小括号却省不掉花括号\nGo 语言里面的 if 语句，其条件表达式不需要用小括号扩起来，这被作为“代码比较简洁”的证据来宣传。可是，你省掉了小括号，却不能省掉大括号啊，一条完整的 if 语句至少还得三行吧，人家 C 、C++、Java 都可以在一行之内搞定的（可以省掉花括号）。人家还有 x?a:b 表达式呢，也是一行搞定，你 Go 语言用 if else 写至少得五行吧？哪里简洁了？</p>\n<p>1.14 编译生成的可执行文件尺寸非常大\n记得当年我写了一个很简单的程序，把所有系统环境变量的名称和值输出到控制台，核心代码也就那么三五行，结果编译出来把我吓坏了：EXE 文件的大小超过 4MB 。如果是 C 语言写的同样功能的程序，0.04MB 都是多的。我把这个信息反馈到官方社区，结果人家不在乎。是，我知道现在的硬盘容量都数百 GB 、上 TB 了……可您这种优化程度……怎么让我相信您在其他地方也能做到不错呢。（再次强调一遍，我所有的经验和数据都来自 Go 1.0 发布前夕。）</p>\n<p>1.15 不支持动态加载类库\n静态编译的程序当然是很好的，没有额外的运行时依赖，部署时很方便。但是之前我们说了，静态编译的文件尺寸很大。如果一个软件系统由多个可执行程序构成，累加起来就很可观。如果用动态编译，发布时带同一套动态库，可以节省很多容量。更关键的是，动态库可以运行时加载和卸载，这是静态库做不到的。还有那些 LGPL 等协议的第三方 C 库受版权限制是不允许静态编译的。至于动态库的版本管理难题，可以通过给动态库内的所有符号添加版本号解决。无论如何，应该给予程序员选择权，让他们自己决定使用静态库还是动态库。一刀切的拒绝动态编译是不合适的。</p>\n<p>1.16 其他\n不支持方法和函数重载（ overload ）\n导入 pkg 的 import 语句后边部分竟然是文本（ import ”fmt”）\n没有 enum 类型，全局性常量难以分类，iota 把简单的事情复杂化\n定义对象方法时，receiver 类型应该选用指针还是非指针让人纠结\n定义结构体和接口的语法稍繁，interface XXX{} struct YYY{} 不是更简洁吗？前面加上 type 关键字显得罗嗦。\n测试类库 testing 里面没有 AssertEqual 函数，标准库的单元测试代码中充斥着 if a != b { t.Fatal(...) }。\n语言太简单，以至于不得不放弃很多有用的特性，“保持语言简单”往往成为拒绝改进的理由。\n标准库的实现总体来说不甚理想，其代码质量大概处于“基本可用”的程度，真正到企业级应用领域，往往就会暴露出诸多不足之处。\n版本都发展到 1.2 了，goroutine 调度器依旧默认仅使用一个系统线程。GOMAXPROCS 的长期存在似乎暗示着官方从来没有足够的信心，让调度器正确安全地运行在多核环境中。这跟 Go 语言自身以并发为核心的定位有致命的矛盾。（直到 2015 年下半年 1.5 发布后才有改观）\n官方发行版中包含了一个叫 oracle 的辅助程序，与 Oracle 数据库毫无关系，却完全无视两者之间的名称混淆。\n上面列出的是我目前还能想到的对 Go 语言的不爽之处，毕竟时间过去两年多，还有一些早就遗忘了。其中一部分固然是小不爽，可能忍一忍就过去了，但是很多不爽积累起来，总会时不时地让人难受，时间久了有自虐的感觉。程序员的工作生活本来就够枯燥的，何必呢。</p>\n<p>必须要说的是，对于其中大多数不爽之处，我（ Liigo ）都曾经试图改变过它们：在 Go 1.0 版本发布之前，我在其官方邮件组提过很多意见和建议（甚至包括提交代码 CL ），极力据理力争，可以说付出很大努力，目的就是希望定型后的 Go 语言是一个相对完善的、没有明显缺陷的编程语言。结果是令人失望的，我人微言轻、势单力薄，不可能影响整个语言的发展走向。1.0 之前，最佳的否定自我、超越自我的机会，就这么遗憾地错过了。我最终发现，很多时候不是技术问题，而是技术人员的问题。</p>\n<p>第 2 节：我为什么对 Go 语言的某些人不爽？\n这里提到的“某些人”主要是两类：一、负责专职开发 Go 语言的 Google 公司员工；二、Go 语言的推崇者和脑残粉丝。我跟这两类人打过很多交道，不胜其烦。再次强调一遍，我指的是“某些”人，而不是所有人，请不要对号入座。</p>\n<p>Google 公司内部负责专职开发 Go 语言的核心开发组某些成员，他们倾向于闭门造车，固执己见，对第三方提出的建议不重视。他们常常挂在嘴边的口头禅是：现有的做法很好、不需要那个功能、我们开发 Go 语言是给 Google 自己用的、Google 不需要那个功能、如果你一定要改请 fork 之后自己改、别干提意见请提交代码。很多言行都是“反开源”的。通过一些具体的例子，还能更形象的看清这一层。就留下作为课后作业吧。</p>\n<p>我最不能接受的就是他们对 1.0 版本的散漫处理。那时候 Go 还没到 1.0 ，初出茅庐的小学生，有很大的改进空间，是全面翻新的最佳时机，彼时不改更待何时？ 1.0 是打地基的版本，基础不牢靠，等 1.0 定型之后，处处受到向后兼容性的牵制，束手缚脚，每前进一步都阻力重重。急于发布 1.0 ，过早定型，留下诸多遗憾，彰显了开发者的功利性强，在技术上不追求尽善尽美。</p>\n<p>Go 语言的核心开发成员，他们日常的开发工作是使用 C 语言——Go 语言的编译器和运行时库，包括语言核心数据结构和算法 map 、channel 、scheduler ，都是 C 开发的——真正用自己开发的 Go 语言进行实际的大型应用开发的机会并不多。虽然标准库是用 Go 语言自己写的，但他们却没有大范围使用标准库的经历。实际上，他们缺少使用 Go 语言的实战开发经验，往往不知道处于开发第一线的用户真正需要什么，无法做到设身处地为程序员着想。缺少使用 Go 语言的亲身经历，也意味着他们不能在日常开发中，及时发现和改进 Go 语言的不足。这也是他们往往自我感觉良好的原因。（ 2016 年 5 月 15 日补记：2015 年 8 月 Go 1.5 版本之后不再使用 C 语言开发。）</p>\n<p>Go 语言社区里，有一大批 Go 语言的推崇者和脑残粉丝，他们满足于现状，不思进取，处处维护心中的“神”，容不得批评意见，不支持对语言的改进要求。当年我对 Go 语言的很多批评和改进意见，极少得到他们的支持，他们不但不支持还给予打击，我就纳闷了，他们难道不希望 Go 语言更完善、更优秀吗？我后来才意识到，他们跟乔帮主的苹果脑残粉丝们，言行一脉相承，具有极端宗教倾向，神化主子、打击异己真是不遗余力呀。简简单单的技术问题，就能被他们上升到意识形态之争。现实的例子是蛮多的，有兴趣的到网上去找吧。正是因为他们的存在，导致更多理智、清醒的 Go 语言用户无法真正融入整个社区。</p>\n<p>如果一个项目、团队、社区，到处充斥着赞美、孤芳自赏、自我满足、不思进取，排斥不同意见，拒绝接纳新方案，我想不到它还有什么前进的动力。逆水行舟，是不进反退的。</p>\n<p>2016 年 5 月 15 日补记：@netroby：“Golang 社区的神经病和固执，我深有体会。我曾经发过 Issue ，请求 Golang 官方，能为 doc 加上高亮，这样浏览器阅读文档的时候，能快速阅读代码参考。但是被各种拒绝. 他们的理由是很多开发者不喜欢高亮。” <a href=\"https://github.com/golang/go/issues/13178\" rel=\"nofollow\">https://github.com/golang/go/issues/13178</a></p>\n<p>2016 年 5 月 15 日补记：C++天才人物、D 语言联合创始人 Andrei Alexandrescu：“Go 所走的路线在一些问题上持有极其强硬和死板态度，这些问题有大有小。在比较大的方面，泛型编程被严格控制，甚至贬低到只有\"N\"个字；有关泛型编程的讨论都是试图去劝阻任何有意义的尝试，这已经足够让人觉得耻辱。从长远来看，技术问题的政治化是一种极其有害的模式，所以希望 Go 社区能够找到修正它的方法。”  <a href=\"http://www.csdn.net/article/2015-12-20/2826517\" rel=\"nofollow\">http://www.csdn.net/article/2015-12-20/2826517</a></p>\n<p>第 3 节：还有比 Go 语言更好的选择吗？\n我始终坚持一个颇有辩证法意味的哲学观点：在更好的替代品出现之前，现有的就是最好的。失望是没有用的，抱怨是没有用的，要么接受，要么逃离。我曾经努力尝试过接受 Go 语言，失败之后，注定要逃离。发现更好的替代品之后，无疑加速了逃离过程。还有比 Go 语言更好的替代品吗？当然有。作为一个屌丝程序员，我应该告诉你它是什么，但是我不说。现在还不是时候。我现在不想把这两门编程语言对立起来，引发另一场潜在的语言战争。这不是此文的本意。如果你非要从现有信息中推测它是什么，那完全是你自己的事。如果你原意等，它或许很快会浮出水面，也未可知。</p>\n<p>第 4 节：写在最后\n我不原意被别人代表，也不愿意代表别人。这篇文章写的是我，一个叫 Liigo 的 80 后屌丝程序员，自己的观点。你完全可以主观地认为它是主观的，也完全可以客观地以为它是客观的，无论如何，那是你的观点。</p>\n<p>这篇文字是从记忆里收拾出来的。有些细节虽可考，而不值得考。——我早已逃离，不愿再回到当年的场景。文中涉及的某些细节，可能会因为些许偏差，影响其准确性；也可能会因为缺少出处，影响其客观性。如果有人较真，非要去核实，我相信那些东西应该还在那里。</p>\n<p>Go 语言也非上文所述一无是处，它当然有它的优势和特色。读者们判断一件事物，应该是优劣并陈，做综合分析，不能单听我一家负面之言。但是它的那些不爽之处，始终让我不爽，且不能从其优秀处得以完全中和，这是我不得不放弃它的原因。</p>\n<p>关于对作者倾向性质疑的声明：</p>\n<p>读者看到本文全都是 Go 语言负面性的内容，没有涉及一点 Go 语言好的地方，因而质疑作者的盲目倾向。出现这种结果完全是因为文章主题所限。此前本文末尾也简单提到过，评估一件事物，应当优劣并陈，优势项加分，劣势项减分，做综合评估分析。如果有突出的重大优势，则可以容忍一些较大的劣势；但如果有致命的劣势或多项大劣势，则再大的优势也无法与之中和。中国乒乓球界讲领军人物必须做到“技术全面，特长突出，没有明显弱点”，我甚为赞同。用这句话套用 Go 语言，可以说“技术不全面（人家自己说成简洁），有一点特长（并发），有明显的弱点（包括但不限于本文列出的这些）”。如此一来，优势都被劣势中和了，劣势还是那么突出，自然是得负分，自然是弃用，自然是没有好印象。我在这里可以说观点鲜明、态度明确，不和稀泥。与其看那些盲目推崇 Go 语言的人和文章，笼统的说“好”，不如也顺便看看本文，具体到细节地说“不好”。凡是具体到细节的东西，都是容易证实或证伪的，比笼统的东西（无论是\"黑\"还是\"粉\"）可信性更高一些。</p>\n<p>关于对作者阴谋论的声明：</p>\n<p>有某些阴谋论者（例如谢某），说我因一个 Pull Request 被 Go 开发者拒绝而“怀恨至今”，暗示此文是故意报复、抹黑 Go 语言。我对 Golang 有恨吗？当然是有的，那是一个不爽接一个不爽（如本文一一罗列的那些），逐步累积，由量变形成质变的结果，是我对 Golang 综合客观评估之后的主观态度，并非由哪一个单独的事件所主导。要说 Pull Request 被拒绝，Rust 开发者拒绝我的 PR 次数还少吗？比如 <a href=\"https://github.com/mozilla/rust/pull/13014\" rel=\"nofollow\">https://github.com/mozilla/rust/pull/13014</a> 和 <a href=\"https://github.com/liigo/rust/tree/xp\" rel=\"nofollow\">https://github.com/liigo/rust/tree/xp</a> ( <a href=\"https://github.com/rust-lang/rust/issues/12842)%EF%BC%8C%E8%A6%81%E6%98%AF%E5%86%8D%E7%AE%97%E4%B8%8A%E8%A2%AB%E6%8B%92%E7%9A%84\" rel=\"nofollow\">https://github.com/rust-lang/rust/issues/12842)，要是再算上被拒的</a> Issues ，那就多的数不清了。我显然不可能因为某些个别的事件，影响到我对某个事物的综合评估（参见前文）。那本文是“故意抹黑”Go 语言吗？我觉得不是，理由有二：1 、这是作者的主观感受，2 、这些感受是以许多客观事实为基础的。如果本文一一列出的那些现象，是不存在的，是虚构出来的，是凭空生成的，那么作者一定是“低级黑”。问题是，那些都是客观存在的事实。把事实说出来，怎么能叫“黑”呢？欢迎读者客观而详细的指正本文中的所有错误。</p>\n<p>关于 Golang 2.0 的泛型：</p>\n<p>今天（ 2020 年 2 月 19 日）看到 HN 的一篇关于 Go2 Generics 的讨论。有网友说到：</p>\n<p>Ken Thompson and Rob Pike are mostly out not at all involved with Go anymore. They are 2/3 of the original creators. It’s different people making the decisions now.</p>\n<p>我找到如下两个链接基本证实了 Rob Pike 确实已经淡出 Golang 的核心开发组：</p>\n<p>golang/go#33892\ngolang/go#33502\nRob Pike 最近两年仅提交了 4k 行无关紧要的代码； Ken Thompson 就更不用说了，许多年前就已经淡出； Russ Cox 似乎也不太参与 Go2 相关的决策。如此看来，对于 Go2 的泛型而言，非技术方面的障碍已不存在，剩下只是技术性障碍。</p>\n<p>Ian Lance Taylor 上周（ 2020 年 2 月 13 日）说到：</p>\n<p>We're working on it. Some things take time.</p>\n<p>转自:<a href=\"https://blog.csdn.net/liigo/article/details/23699459\" rel=\"nofollow\">https://blog.csdn.net/liigo/article/details/23699459</a></p>\n", "last_modified": 1692333482, "replies": 66, "id": 966394}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1692078075", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1692078075", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 58216, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1692078075", "stars": 8545, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 644153, "username": "xiyy02", "url": "https://www.v2ex.com/u/xiyy02", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/b904f10a521653b0a627e5378884a0c8?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/b904f10a521653b0a627e5378884a0c8?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/b904f10a521653b0a627e5378884a0c8?s=73&d=retro", "created": 1692280927, "last_modified": 1692280927}, "last_reply_by": "shawnsh", "last_touched": 1692417907, "title": "既然总是避免不了被淘汰，那努力钻研技术的意义是什么？", "url": "https://www.v2ex.com/t/966561", "created": 1692370706, "deleted": 0, "content": "这几天看多了脉脉和 v2 ，发现市场非常差，35 岁前，看学历，看技术水平，看是否有大厂经验，全满足都不一定有 offer ，35 岁后更是销声匿迹，如果你混到管理层，那尚且安全，如果还是大头兵，无论上面的几项你是否匹配，都希望渺茫。\r\n\r\n但管理层和大头兵的比例又非常悬殊，就注定了大部分人都是炮灰，然后校招换血，这批校招生继续卷几年，一部分混成管理，一部分逐渐淘汰，然后再换血，继续这个循环。\r\n\r\n混到管理岗不就行了？但管理岗是不能单单看技术的，程序员非常喜欢夸大技术的作用，但技术不懂可以学，可以学的东西都不值钱，管理岗需要特殊能力/运气加成/技术，所以对于大部分技术人来说，最终的归宿可能就是随着年龄增大被淘汰，既然是这样，努力钻研技术/卷算法的意义在哪里？如果是因为喜欢也就罢了，但大多数人只是想让自己晚些被淘汰。\r\n\r\n连着好几天失眠，每天都是早上 5 点才睡着，心慌，浑身出冷汗，觉得自己的人生毫无意义，觉得整个人类历史也都毫无意义，隔几年就要经济危机，危机大了就打仗，打仗形成新秩序，然后循环；每个人为了延续基因掏空钱包背上贷款买房，但根据统计学推演，大部分人的直系后代会在千年以内相继消失，在绝对的时间面前，无论是历史的更迭，还是基因的延续，似乎也都失去了意义...", "content_rendered": "<p>这几天看多了脉脉和 v2 ，发现市场非常差，35 岁前，看学历，看技术水平，看是否有大厂经验，全满足都不一定有 offer ，35 岁后更是销声匿迹，如果你混到管理层，那尚且安全，如果还是大头兵，无论上面的几项你是否匹配，都希望渺茫。</p>\n<p>但管理层和大头兵的比例又非常悬殊，就注定了大部分人都是炮灰，然后校招换血，这批校招生继续卷几年，一部分混成管理，一部分逐渐淘汰，然后再换血，继续这个循环。</p>\n<p>混到管理岗不就行了？但管理岗是不能单单看技术的，程序员非常喜欢夸大技术的作用，但技术不懂可以学，可以学的东西都不值钱，管理岗需要特殊能力/运气加成/技术，所以对于大部分技术人来说，最终的归宿可能就是随着年龄增大被淘汰，既然是这样，努力钻研技术/卷算法的意义在哪里？如果是因为喜欢也就罢了，但大多数人只是想让自己晚些被淘汰。</p>\n<p>连着好几天失眠，每天都是早上 5 点才睡着，心慌，浑身出冷汗，觉得自己的人生毫无意义，觉得整个人类历史也都毫无意义，隔几年就要经济危机，危机大了就打仗，打仗形成新秩序，然后循环；每个人为了延续基因掏空钱包背上贷款买房，但根据统计学推演，大部分人的直系后代会在千年以内相继消失，在绝对的时间面前，无论是历史的更迭，还是基因的延续，似乎也都失去了意义...</p>\n", "last_modified": 1692370706, "replies": 59, "id": 966561}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1692078075", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1692078075", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 58216, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1692078075", "stars": 8545, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 623017, "username": "zhangpingz", "url": "https://www.v2ex.com/u/zhangpingz", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/28d33a8602e2bb0b3a78d703f531cdbf?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/28d33a8602e2bb0b3a78d703f531cdbf?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/28d33a8602e2bb0b3a78d703f531cdbf?s=73&d=retro", "created": 1680856742, "last_modified": 1680856742}, "last_reply_by": "seliote", "last_touched": 1692366166, "title": "锻炼下 idea 插件的开发能力", "url": "https://www.v2ex.com/t/966418", "created": 1692337946, "deleted": 0, "content": "用 idea 开发代码好多年了，最近迷上了 idea plugin 开发，有没有人需要帮忙做个插件的，\r\n你只管把需求描述清楚，，我来负责实现。", "content_rendered": "<p>用 idea 开发代码好多年了，最近迷上了 idea plugin 开发，有没有人需要帮忙做个插件的，\n你只管把需求描述清楚，，我来负责实现。</p>\n", "last_modified": 1692337946, "replies": 38, "id": 966418}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 209308, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3916, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 523697, "username": "shubiao", "url": "https://www.v2ex.com/u/shubiao", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/035b/37f5/523697_mini.png?m=1692340277", "avatar_normal": "https://cdn.v2ex.com/avatar/035b/37f5/523697_normal.png?m=1692340277", "avatar_large": "https://cdn.v2ex.com/avatar/035b/37f5/523697_large.png?m=1692340277", "created": 1607922003, "last_modified": 1692340277}, "last_reply_by": "jiandan123", "last_touched": 1692417758, "title": "求指导,已学英语 8 个月, 关于\"可理解输入\"的一些困惑", "url": "https://www.v2ex.com/t/966440", "created": 1692340911, "deleted": 0, "content": "本人情况介绍: 没过四级，学生生涯中的英语课堂一直懵逼状态, 当 Java boy 5 年\r\n\r\n### 1 月~6 月 李笑来/《人人都能用英语》\r\n\r\n- 把手机和电脑的操作系统都调成英文\r\n- 听 podcast 磨耳朵（ changlog, 技术向, 完全听不懂）\r\n- 学了一些<新概念一>和一些<考研英语语法>\r\n- 看了一点 effective java 英文版\r\n\r\n**收获**\r\n\r\n- 能懂 V 站内英文评论的大概意思(下附)\r\n- 能看懂罗肖尼视频下一些英文评论\r\n- 英文官方文档快速开始部分\r\n\r\n### 7 月~8 月 罗肖尼/可理解输入\r\n\r\n在新东方软件上测的蓝思值基本为 0, 给推荐的是一页一个单词的看图识字绘本. \r\n总结后发现我的英语能力不适用于`what's this? Here we go! come on out. 以及各种问路说物品在哪之类的`这种生活向的对话\r\n\r\n- 看了 kid's abc[动画片]( https://www.bilibili.com/video/BV12v411i7uu/?share_source=copy_web&vd_source=5a97b0ddda956e92d3efa36ea49a6717)前 15 集(2.3 岁小孩看的, 很无聊)\r\n- 看了 youtube 的一些美女 up 生活类[视频]( https://www.youtube.com/@LillianChiu101)(算感兴趣)\r\n- 看了一点英文的 java 入门[视频]( https://www.youtube.com/watch?v=Qgl81fPcLc8&t=2885s&ab_channel=Amigoscode)(都会, 也很无聊)\r\n- 神奇树屋, englishPod, 小猪佩奇都感觉词汇和开发岗位大相径庭就放弃了\r\n\r\n**收获**\r\n\r\n- 学到了一点点日常口语.\r\n- 对英语建立了信心, 直接怼纯英文视频原来也能看懂, 知道我也 ok\r\n\r\n### 求指导/目的\r\n\r\n个人目标: 外企远程工作\r\n\r\n时间: 有孩子, 工作不至于加班, 但一天下来也没多长时间学习. 实际上我是着急了, 已经八个月啦, 学习成果没法量化, 只知道自己很菜, 但不知道怎么能达到远程外企的标准.\r\n\r\n想功利一些, 学英语的同时学面试，直接看老外教的写求职 Email, 教系统设计题, 教算法题, 怎么求职, 外企模拟面试, 看老外 Java 相关的开源项目讨论介绍\r\n\r\n1. 请教朋友们我的思路是否 ok, 请指正\r\n2. 有懂得朋友麻烦推荐一些我想找的内容, 或您认为有价值的内容(有字幕, 找工作有用, 值得反复听)\r\n\r\n\r\n```\r\n能看懂的英文评论\r\nI usually remember English word and read short post by my self.\r\n\r\nListen to and type one article from this site, https://listenaminute.com/index.html, every day.\r\nListen to radios from the UK or the US when you're coding.\r\n\r\n-- tg 的介绍\r\nLog in here to manage your apps using Telegram API or delete your account. Enter your number and we will send you a confirmation code via Telegram (not SMS).\r\n```", "content_rendered": "<p>本人情况介绍: 没过四级，学生生涯中的英语课堂一直懵逼状态, 当 Java boy 5 年</p>\n<h3>1 月~6 月 李笑来/《人人都能用英语》</h3>\n<ul>\n<li>把手机和电脑的操作系统都调成英文</li>\n<li>听 podcast 磨耳朵（ changlog, 技术向, 完全听不懂）</li>\n<li>学了一些&lt;新概念一&gt;和一些&lt;考研英语语法&gt;</li>\n<li>看了一点 effective java 英文版</li>\n</ul>\n<p><strong>收获</strong></p>\n<ul>\n<li>能懂 V 站内英文评论的大概意思(下附)</li>\n<li>能看懂罗肖尼视频下一些英文评论</li>\n<li>英文官方文档快速开始部分</li>\n</ul>\n<h3>7 月~8 月 罗肖尼/可理解输入</h3>\n<p>在新东方软件上测的蓝思值基本为 0, 给推荐的是一页一个单词的看图识字绘本.\n总结后发现我的英语能力不适用于<code>what's this? Here we go! come on out. 以及各种问路说物品在哪之类的</code>这种生活向的对话</p>\n<ul>\n<li>看了 kid's abc<a href=\"https://www.bilibili.com/video/BV12v411i7uu/?share_source=copy_web&amp;vd_source=5a97b0ddda956e92d3efa36ea49a6717\" rel=\"nofollow\">动画片</a>前 15 集(2.3 岁小孩看的, 很无聊)</li>\n<li>看了 youtube 的一些美女 up 生活类<a href=\"https://www.youtube.com/@LillianChiu101\" rel=\"nofollow\">视频</a>(算感兴趣)</li>\n<li>看了一点英文的 java 入门<a href=\"https://www.youtube.com/watch?v=Qgl81fPcLc8&amp;t=2885s&amp;ab_channel=Amigoscode\" rel=\"nofollow\">视频</a>(都会, 也很无聊)</li>\n<li>神奇树屋, englishPod, 小猪佩奇都感觉词汇和开发岗位大相径庭就放弃了</li>\n</ul>\n<p><strong>收获</strong></p>\n<ul>\n<li>学到了一点点日常口语.</li>\n<li>对英语建立了信心, 直接怼纯英文视频原来也能看懂, 知道我也 ok</li>\n</ul>\n<h3>求指导/目的</h3>\n<p>个人目标: 外企远程工作</p>\n<p>时间: 有孩子, 工作不至于加班, 但一天下来也没多长时间学习. 实际上我是着急了, 已经八个月啦, 学习成果没法量化, 只知道自己很菜, 但不知道怎么能达到远程外企的标准.</p>\n<p>想功利一些, 学英语的同时学面试，直接看老外教的写求职 Email, 教系统设计题, 教算法题, 怎么求职, 外企模拟面试, 看老外 Java 相关的开源项目讨论介绍</p>\n<ol>\n<li>请教朋友们我的思路是否 ok, 请指正</li>\n<li>有懂得朋友麻烦推荐一些我想找的内容, 或您认为有价值的内容(有字幕, 找工作有用, 值得反复听)</li>\n</ol>\n<pre><code>能看懂的英文评论\nI usually remember English word and read short post by my self.\n\nListen to and type one article from this site, https://listenaminute.com/index.html, every day.\nListen to radios from the UK or the US when you're coding.\n\n-- tg 的介绍\nLog in here to manage your apps using Telegram API or delete your account. Enter your number and we will send you a confirmation code via Telegram (not SMS).\n</code></pre>\n", "last_modified": 1692341297, "replies": 38, "id": 966440}]