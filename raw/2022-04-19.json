[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/03af/dbd6/63_large.png?m=1644490200", "name": "java", "avatar_normal": "https://cdn.v2ex.com/navatar/03af/dbd6/63_normal.png?m=1644490200", "title": "Java", "url": "https://www.v2ex.com/go/java", "topics": 4891, "footer": "", "header": "Sun 公司发明，被广泛使用的一门编程语言。", "title_alternative": "Java", "avatar_mini": "https://cdn.v2ex.com/navatar/03af/dbd6/63_mini.png?m=1644490200", "stars": 4867, "aliases": [], "root": false, "id": 63, "parent_node_name": "programming"}, "member": {"id": 317926, "username": "jeesk", "url": "https://www.v2ex.com/u/jeesk", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "大神指导你， 方法搞对你就领先别人一半了。", "avatar_mini": "https://cdn.v2ex.com/gravatar/6b2239f37212b91a6471047afd08de67?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/6b2239f37212b91a6471047afd08de67?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/6b2239f37212b91a6471047afd08de67?s=73&d=retro", "created": 1526996668, "last_modified": 1650290598}, "last_reply_by": "xuanbg", "last_touched": 1650339132, "title": "从业时间越久，发现互联网很多知识都是错的， 对小白误导有多深？", "url": "https://www.v2ex.com/t/847761", "created": 1650290666, "deleted": 0, "content": "说说我自己的看法， 无论是 csdn 还是知乎， 在我最开始从业 java 的时候，觉得他们说得没有毛病？ 从业几年后，发现很多都是在鬼扯。 就拿 BIO 和 NIO 谁性能好， 知乎上面竞争激烈,下面我粘贴一个知乎的回答。\r\n\r\n回答 1：\r\n\r\n首先要明确一点：nio 的适用于 io 高并发场景线程开销包括：内存开销（创建一个线程需要为其分配和维护一个 tcb 线程控制块保存上下文，一个线程私有的栈）、线程上下文切换的时间开销（保存上下文，加载下一个线程的上下文），在高并发环境下多出来的这一点点开销积累起来是非常可观的。若使用 bio ，高并发必然引起激烈 contention ，导致大量的上下文切换，若采用一个 io 一个线程模型，一个线程 M 级的空间消耗，内存消耗不起。而 netty 采用 nio 加 selector 加线程池基本上解决了上述问题：一是线程池限制了内存消耗，二是采用 selector 使得只有处于活动状态的 io 才会去占用线程，不会使线程白白因为 io 而阻塞，提高了线程利用率。\r\n\r\n说说他们的谬论：\r\n1. 使用 BIO 上下文切换厉害， 如果是相同 4 核 cpu ， 无论我是用 bio 还是 nio ，都用 200 个线程， 这个时候对 cpu 的竞争到底有多剧烈？ 我个人觉得差不了多少。 所以这个说法是错的。\r\n\r\n2. 若采用一个 io 一个线程模型，一个线程 M 级的空间消耗。 这个就更扯淡了。 即使是 tomcat 在 8.5 以前也是 BIO 200 个线程， 都没有用到 1w 个线程？ 为什么非要扯开大量线程呢？ 并且 tomcat 在 8.5 以后才默认 nio.\r\n\r\n3. 一是线程池限制了内存消耗,二是采用 selector 使得只有处于活动状态的 io 才会去占用线程.   那我 tomcat 用 BIO 没有内存限制？ 没有内存限制岂不是早就宕机了？ 再说说 selector 的问题， 我 NIO 在 readSelector 开 10 个线程去调用 select, 不都是阻塞的吗？ 怎么会说在活动状态才占用线程？  \r\n\r\n然后你会发现这些错误的回答有很多，下面还有大量的小白点赞，觉得说得很对。 但是一经脑子思考就发现， 这绝对是坑 B. \r\n\r\n如果有不同意见的小伙伴可以留言，我觉得这个可以作为一个面试题。", "content_rendered": "说说我自己的看法， 无论是 csdn 还是知乎， 在我最开始从业 java 的时候，觉得他们说得没有毛病？ 从业几年后，发现很多都是在鬼扯。 就拿 BIO 和 NIO 谁性能好， 知乎上面竞争激烈,下面我粘贴一个知乎的回答。<br /><br />回答 1：<br /><br />首先要明确一点：nio 的适用于 io 高并发场景线程开销包括：内存开销（创建一个线程需要为其分配和维护一个 tcb 线程控制块保存上下文，一个线程私有的栈）、线程上下文切换的时间开销（保存上下文，加载下一个线程的上下文），在高并发环境下多出来的这一点点开销积累起来是非常可观的。若使用 bio ，高并发必然引起激烈 contention ，导致大量的上下文切换，若采用一个 io 一个线程模型，一个线程 M 级的空间消耗，内存消耗不起。而 netty 采用 nio 加 selector 加线程池基本上解决了上述问题：一是线程池限制了内存消耗，二是采用 selector 使得只有处于活动状态的 io 才会去占用线程，不会使线程白白因为 io 而阻塞，提高了线程利用率。<br /><br />说说他们的谬论：<br />1. 使用 BIO 上下文切换厉害， 如果是相同 4 核 cpu ， 无论我是用 bio 还是 nio ，都用 200 个线程， 这个时候对 cpu 的竞争到底有多剧烈？ 我个人觉得差不了多少。 所以这个说法是错的。<br /><br />2. 若采用一个 io 一个线程模型，一个线程 M 级的空间消耗。 这个就更扯淡了。 即使是 tomcat 在 8.5 以前也是 BIO 200 个线程， 都没有用到 1w 个线程？ 为什么非要扯开大量线程呢？ 并且 tomcat 在 8.5 以后才默认 nio.<br /><br />3. 一是线程池限制了内存消耗,二是采用 selector 使得只有处于活动状态的 io 才会去占用线程.   那我 tomcat 用 BIO 没有内存限制？ 没有内存限制岂不是早就宕机了？ 再说说 selector 的问题， 我 NIO 在 readSelector 开 10 个线程去调用 select, 不都是阻塞的吗？ 怎么会说在活动状态才占用线程？  <br /><br />然后你会发现这些错误的回答有很多，下面还有大量的小白点赞，觉得说得很对。 但是一经脑子思考就发现， 这绝对是坑 B. <br /><br />如果有不同意见的小伙伴可以留言，我觉得这个可以作为一个面试题。", "last_modified": 1650290666, "replies": 77, "id": 847761}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1650127257", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1650127257", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 48356, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1650127257", "stars": 7785, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 300081, "username": "stevenhawking", "url": "https://www.v2ex.com/u/stevenhawking", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/8fe4e6c3e9b6f8827530be326992bda9?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/8fe4e6c3e9b6f8827530be326992bda9?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/8fe4e6c3e9b6f8827530be326992bda9?s=73&d=retro", "created": 1521022556, "last_modified": 1521022556}, "last_reply_by": "my3157", "last_touched": 1650337582, "title": "公布一个很 2 的 IDC： qingcloud (青云)", "url": "https://www.v2ex.com/t/847747", "created": 1650284736, "deleted": 0, "content": "事情经过是这样的。\r\n\r\n有个境外的域名叫做 nip.io ，会自动解析 `xxx.xxx.xxx.xxx.nip.io` 到 `xxx.xxx.xxx.xxx` (IP),\r\n\r\n然后我买青云服务器后，他们备案系统就抽风的检测到 `xxx.xxx.xxx.xxx.nip.io`，我从来没有用过 nip ，然后他们就勒令我停止解析。\r\n\r\n可问题是 nip.io 根本不是我的域名，我如何停止？\r\n\r\n\r\n然后今天，他们把我服务器封了，\r\n\r\n\r\n没错，封了服务器。\r\n\r\n\r\n服务器本来买的配置蛮高的，两台 4CPU 8G 。\r\n\r\n\r\n就这样不待见企业客户。你行，青云", "content_rendered": "<p>事情经过是这样的。</p>\n<p>有个境外的域名叫做 <a href=\"http://nip.io\" rel=\"nofollow\">nip.io</a> ，会自动解析 <code><a href=\"http://xxx.xxx.xxx.xxx.nip.io\" rel=\"nofollow\">xxx.xxx.xxx.xxx.nip.io</a></code> 到 <code><a href=\"http://xxx.xxx.xxx.xxx\" rel=\"nofollow\">xxx.xxx.xxx.xxx</a></code> (IP),</p>\n<p>然后我买青云服务器后，他们备案系统就抽风的检测到 <code><a href=\"http://xxx.xxx.xxx.xxx.nip.io\" rel=\"nofollow\">xxx.xxx.xxx.xxx.nip.io</a></code>，我从来没有用过 nip ，然后他们就勒令我停止解析。</p>\n<p>可问题是 <a href=\"http://nip.io\" rel=\"nofollow\">nip.io</a> 根本不是我的域名，我如何停止？</p>\n<p>然后今天，他们把我服务器封了，</p>\n<p>没错，封了服务器。</p>\n<p>服务器本来买的配置蛮高的，两台 4CPU 8G 。</p>\n<p>就这样不待见企业客户。你行，青云</p>\n", "last_modified": 1650285131, "replies": 72, "id": 847747}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6395/ebd0/954_large.png?m=1499745703", "name": "algorithm", "avatar_normal": "https://cdn.v2ex.com/navatar/6395/ebd0/954_normal.png?m=1499745703", "title": "算法", "url": "https://www.v2ex.com/go/algorithm", "topics": 384, "footer": "", "header": "", "title_alternative": "Algorithm", "avatar_mini": "https://cdn.v2ex.com/navatar/6395/ebd0/954_mini.png?m=1499745703", "stars": 470, "aliases": [], "root": false, "id": 954, "parent_node_name": "programmer"}, "member": {"id": 162136, "username": "3dwelcome", "url": "https://www.v2ex.com/u/3dwelcome", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/d2d0/2f32/162136_mini.png?m=1644832617", "avatar_normal": "https://cdn.v2ex.com/avatar/d2d0/2f32/162136_normal.png?m=1644832617", "avatar_large": "https://cdn.v2ex.com/avatar/d2d0/2f32/162136_large.png?m=1644832617", "created": 1457260101, "last_modified": 1644832617}, "last_reply_by": "zmal", "last_touched": 1650263969, "title": "构建一个完美无冲突的 hashmap。", "url": "https://www.v2ex.com/t/847716", "created": 1650275536, "deleted": 0, "content": "首先，hashmap 是把一个很长的字符串，散列成固定长度。由于原始数据是无限长，而散列值长度基本是固定的，所以无法避免 hash 冲突。\r\n\r\n但是，我们可以通过设计一个前置过滤函数，让一个 hashmap 变成一组 hashmap.\r\n\r\n类似砂石过滤里的多层滤网原理。\r\n\r\n第一层是粗砂砾，也就是计算每个元素，如果 hash 函数并无冲突，就保留在第一层。其余元素自动流到第二层。\r\n第二层是中砂砾，元素被过滤一次，数量减少了。用第二个 hash 函数来过滤，明显会减少冲突。还有冲突，就流到第三层。\r\n第三层是细砂砾，以此类推，直到所有元素被处理完成。\r\n\r\n这样就可以避免 hashmap 出现碰撞的情况了。当然真实场景里，并不需要一组 hashmap ，可以优化到多层 bitmap 数据+一个 hashmap 来保存和查询结果。", "content_rendered": "首先，hashmap 是把一个很长的字符串，散列成固定长度。由于原始数据是无限长，而散列值长度基本是固定的，所以无法避免 hash 冲突。<br /><br />但是，我们可以通过设计一个前置过滤函数，让一个 hashmap 变成一组 hashmap.<br /><br />类似砂石过滤里的多层滤网原理。<br /><br />第一层是粗砂砾，也就是计算每个元素，如果 hash 函数并无冲突，就保留在第一层。其余元素自动流到第二层。<br />第二层是中砂砾，元素被过滤一次，数量减少了。用第二个 hash 函数来过滤，明显会减少冲突。还有冲突，就流到第三层。<br />第三层是细砂砾，以此类推，直到所有元素被处理完成。<br /><br />这样就可以避免 hashmap 出现碰撞的情况了。当然真实场景里，并不需要一组 hashmap ，可以优化到多层 bitmap 数据+一个 hashmap 来保存和查询结果。", "last_modified": 1650275979, "replies": 71, "id": 847716}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6512/bd43/11_large.png?m=1635654665", "name": "linux", "avatar_normal": "https://cdn.v2ex.com/navatar/6512/bd43/11_normal.png?m=1635654665", "title": "Linux", "url": "https://www.v2ex.com/go/linux", "topics": 6635, "footer": "", "header": "Linux is a Unix-like computer operating system assembled under the model of free and open source software development and distribution.", "title_alternative": "Linux", "avatar_mini": "https://cdn.v2ex.com/navatar/6512/bd43/11_mini.png?m=1635654665", "stars": 5768, "aliases": [], "root": false, "id": 11, "parent_node_name": "os"}, "member": {"id": 522487, "username": "theklf4", "url": "https://www.v2ex.com/u/theklf4", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "请在发表回复前阅读帖子内容，我在任何帖子下都不需要和我帖子完全无关的回复，我认为这也和 V 站所宣扬的发表高信息量内容理念不符，看不惯的欢迎 Block（不需要在回复中告诉我，谢谢！）", "avatar_mini": "https://cdn.v2ex.com/gravatar/4992f9ff63c26b4694fd1d2ca4e805e5?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/4992f9ff63c26b4694fd1d2ca4e805e5?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/4992f9ff63c26b4694fd1d2ca4e805e5?s=73&d=retro", "created": 1607186074, "last_modified": 1650304741}, "last_reply_by": "zedpass", "last_touched": 1650289294, "title": "为什么各国高校的 Linux 协会都这么热衷于搞镜像站？", "url": "https://www.v2ex.com/t/847719", "created": 1650276716, "deleted": 0, "content": "尤其是国内，估计没几个 Linux 用户的二本都有自己的镜像站。\r\n\r\n跟 V 友热衷于写摸鱼工具 /搭一人论坛一个原因吗？", "content_rendered": "<p>尤其是国内，估计没几个 Linux 用户的二本都有自己的镜像站。</p>\n<p>跟 V 友热衷于写摸鱼工具 /搭一人论坛一个原因吗？</p>\n", "last_modified": 1650276835, "replies": 65, "id": 847719}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/70ef/df2e/17_large.png?m=1650095309", "name": "create", "avatar_normal": "https://cdn.v2ex.com/navatar/70ef/df2e/17_normal.png?m=1650095309", "title": "分享创造", "url": "https://www.v2ex.com/go/create", "topics": 17634, "footer": "", "header": "欢迎你在这里发布自己的最新作品！", "title_alternative": "Create", "avatar_mini": "https://cdn.v2ex.com/navatar/70ef/df2e/17_mini.png?m=1650095309", "stars": 4266, "aliases": [], "root": false, "id": 17, "parent_node_name": "geek"}, "member": {"id": 436101, "username": "luoxh", "url": "https://www.v2ex.com/u/luoxh", "website": "", "twitter": "", "psn": "", "github": "luoxuhai", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/e540/84d8/436101_mini.png?m=1648692038", "avatar_normal": "https://cdn.v2ex.com/avatar/e540/84d8/436101_normal.png?m=1648692038", "avatar_large": "https://cdn.v2ex.com/avatar/e540/84d8/436101_large.png?m=1648692038", "avatar_xlarge": "https://cdn.v2ex.com/avatar/e540/84d8/436101_xlarge.png?m=1648692038", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/e540/84d8/436101_xlarge.png?m=1648692038", "created": 1565846001, "last_modified": 1648692038}, "last_reply_by": "kennnnnnnnnnn", "last_touched": 1650295034, "title": "个人开发的一款隐藏图片、视频、文件的 App，完全去广告，界面简洁，功能强大。", "url": "https://www.v2ex.com/t/847643", "created": 1650258818, "deleted": 0, "content": "个人开发的一款隐藏图片、视频、文件的 App ，完全去广告，界面简洁，功能强大。已经上线两个月了，在这期间加了许多功能。👏欢迎下载\r\n\t\r\n[![LdkE1U.md.png]( https://s1.ax1x.com/2022/04/18/LdkE1U.md.png)]( https://imgtu.com/i/LdkE1U)\r\n\r\n🚀 特色功能：\r\n🌈 适配深色模式，可更换应用图标，提供多种主题 颜色\r\n🌈 支持伪装密码，打造两个空间\r\n🌈 支持使用面容、指纹解锁\r\n🌈 紧急切换，将手机屏幕面向下放置，可锁定隐私空间并打开指定应用\r\n🌈 支持隐藏任意格式文件：Word 、Excel 、PPT 、PDF 、网页、音频等\r\n🌈 支持电脑、手机链接至同一 wi-Fi 极速互传文件\r\n🌈 智能搜索功能，Al 离线识别图片内容，根据关键 词搜索图片\r\n\t\r\n🚀 App Store 搜索《隐私空间 - 隐藏私人图片视频》下载，或点击下方链接：\r\nhttps://apps.apple.com/app/id1597534147", "content_rendered": "<p>个人开发的一款隐藏图片、视频、文件的 App ，完全去广告，界面简洁，功能强大。已经上线两个月了，在这期间加了许多功能。👏欢迎下载</p>\n<p><a href=\"https://imgtu.com/i/LdkE1U\" rel=\"nofollow\"><img alt=\"LdkE1U.md.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s1.ax1x.com/2022/04/18/LdkE1U.md.png\"/></a></p>\n<p>🚀 特色功能：\n🌈 适配深色模式，可更换应用图标，提供多种主题 颜色\n🌈 支持伪装密码，打造两个空间\n🌈 支持使用面容、指纹解锁\n🌈 紧急切换，将手机屏幕面向下放置，可锁定隐私空间并打开指定应用\n🌈 支持隐藏任意格式文件：Word 、Excel 、PPT 、PDF 、网页、音频等\n🌈 支持电脑、手机链接至同一 wi-Fi 极速互传文件\n🌈 智能搜索功能，Al 离线识别图片内容，根据关键 词搜索图片</p>\n<p>🚀 App Store 搜索《隐私空间 - 隐藏私人图片视频》下载，或点击下方链接：\n<a href=\"https://apps.apple.com/app/id1597534147\" rel=\"nofollow\">https://apps.apple.com/app/id1597534147</a></p>\n", "last_modified": 1650259396, "replies": 47, "id": 847643}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/d67d/8ab4/39_large.png?m=1648813499", "name": "android", "avatar_normal": "https://cdn.v2ex.com/navatar/d67d/8ab4/39_normal.png?m=1648813499", "title": "Android", "url": "https://www.v2ex.com/go/android", "topics": 9390, "footer": "", "header": "来自 <a href=\"/go/google\">Google</a> 的开放源代码智能手机平台。", "title_alternative": "Android", "avatar_mini": "https://cdn.v2ex.com/navatar/d67d/8ab4/39_mini.png?m=1648813499", "stars": 5051, "aliases": [], "root": false, "id": 39, "parent_node_name": "hardware"}, "member": {"id": 444662, "username": "haoyh1", "url": "https://www.v2ex.com/u/haoyh1", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/1db3debddcb0b6aa2287ef70d1874277?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/1db3debddcb0b6aa2287ef70d1874277?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/1db3debddcb0b6aa2287ef70d1874277?s=73&d=retro", "created": 1570207884, "last_modified": 1643963019}, "last_reply_by": "huihuiHK", "last_touched": 1650334840, "title": "chrome 移动端什么水平", "url": "https://www.v2ex.com/t/847667", "created": 1650263644, "deleted": 0, "content": "标签页切换难度这么大，仅此一家了吧\r\n两三年没用移动端，记得 19 年那阵有个 duet 的选项，优化标签页的 ui ，现在也砍了", "content_rendered": "<p>标签页切换难度这么大，仅此一家了吧\n两三年没用移动端，记得 19 年那阵有个 duet 的选项，优化标签页的 ui ，现在也砍了</p>\n", "last_modified": 1650263644, "replies": 40, "id": 847667}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1650127257", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1650127257", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 48356, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1650127257", "stars": 7785, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 192395, "username": "likeunix", "url": "https://www.v2ex.com/u/likeunix", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/7c96f57e09f5768aeb701d1ebb6b7805?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/7c96f57e09f5768aeb701d1ebb6b7805?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/7c96f57e09f5768aeb701d1ebb6b7805?s=73&d=retro", "created": 1474259982, "last_modified": 1641343381}, "last_reply_by": "zzc032003", "last_touched": 1650331474, "title": "我写的 Kafka GUI 客户端，不来试试吗", "url": "https://www.v2ex.com/t/847796", "created": 1650326615, "deleted": 0, "content": "想要查看 Topic 里的消息却找不到软件，想要查看或更新 Broker 、Topic 配置，想要监控 Broker 服务器状态？试试下面的 Kafka GUI 工具——Kafka Assistant\r\n\r\n官网地址： http://www.redisant.cn/ka\r\n\r\n- 快速查看所有 Kafka 集群，包括 Brokers 、Topics 和 Groups\r\n- 查看分区中的消息内容并添加新消息\r\n- 为使用 Streams API 实现流式处理的应用一键生成拓扑图，支持导出 png 、svg 、pdf 、tk 、dot 等多种格式\r\n- 以漂亮的格式显示 JSON 、XML 、MessagePack 、十六进制等消息格式\r\n- 添加和删除主题以及其他管理功能\r\n\r\n---\r\n激活码\r\n- 74A97A9F-9D14-4A62-91FF-FF13240B2733\r\n- E84F6A7F-E387-48E6-9BC9-31D5FD9A84F9\r\n- 65E63034-D17B-477C-9E38-9BC986F05F28\r\n- 8926EFE3-01D6-4A3B-8293-49C706AC5C3C\r\n- 7A83C646-188B-4076-9255-A537A1A4876E\r\n- 8A1B7E2C-474F-4F2A-8E98-79AB1AF50856\r\n\r\n---\r\n\r\n**连接到 Kafka 集群**\r\n\r\n输入 Bootstrap server 和 Post 即可连接，支持各种认证协议\r\n\r\n![]( https://pic.imgdb.cn/item/625dfac0239250f7c58bbd8a.png)\r\n\r\n**仪表盘**\r\n\r\n通过上方的仪表盘按钮即可打开实时监控界面，可以查看请求处理器空闲率、流出和流出字节量、流入消息量等等。\r\n![]( https://pic.imgdb.cn/item/625dfac0239250f7c58bbd90.png)\r\n\r\n**生成拓扑图**\r\n\r\nTopology.describe() 返回的字符串一键转换为拓扑图\r\n![]( https://pic.imgdb.cn/item/625dfb47239250f7c58c41c7.png)\r\n\r\n\r\n**查看 Topic**\r\n\r\n选择 Topics 选项卡，列出当前集群下所有 Topic ，右侧可以分别查看集群消息（支持按时间筛选）、分区、配置修改和查看\r\n\r\n![]( https://pic.imgdb.cn/item/625dfac0239250f7c58bbd94.png)\r\n\r\n**发送消息**\r\n\r\n支持各种压缩类型，ack 类型，还可以定时发送\r\n\r\n![]( https://pic.imgdb.cn/item/625dfac0239250f7c58bbd9e.png)\r\n\r\n**Broker 配置查看和修改**\r\n\r\n![]( https://pic.imgdb.cn/item/625dfac0239250f7c58bbda4.png)\r\n\r\n\r\n更多功能就不一一介绍了。", "content_rendered": "<p>想要查看 Topic 里的消息却找不到软件，想要查看或更新 Broker 、Topic 配置，想要监控 Broker 服务器状态？试试下面的 Kafka GUI 工具——Kafka Assistant</p>\n<p>官网地址： <a href=\"http://www.redisant.cn/ka\" rel=\"nofollow\">http://www.redisant.cn/ka</a></p>\n<ul>\n<li>快速查看所有 Kafka 集群，包括 Brokers 、Topics 和 Groups</li>\n<li>查看分区中的消息内容并添加新消息</li>\n<li>为使用 Streams API 实现流式处理的应用一键生成拓扑图，支持导出 png 、svg 、pdf 、tk 、dot 等多种格式</li>\n<li>以漂亮的格式显示 JSON 、XML 、MessagePack 、十六进制等消息格式</li>\n<li>添加和删除主题以及其他管理功能</li>\n</ul>\n<hr/>\n<p>激活码</p>\n<ul>\n<li>74A97A9F-9D14-4A62-91FF-FF13240B2733</li>\n<li>E84F6A7F-E387-48E6-9BC9-31D5FD9A84F9</li>\n<li>65E63034-D17B-477C-9E38-9BC986F05F28</li>\n<li>8926EFE3-01D6-4A3B-8293-49C706AC5C3C</li>\n<li>7A83C646-188B-4076-9255-A537A1A4876E</li>\n<li>8A1B7E2C-474F-4F2A-8E98-79AB1AF50856</li>\n</ul>\n<hr/>\n<p><strong>连接到 Kafka 集群</strong></p>\n<p>输入 Bootstrap server 和 Post 即可连接，支持各种认证协议</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://pic.imgdb.cn/item/625dfac0239250f7c58bbd8a.png\"/></p>\n<p><strong>仪表盘</strong></p>\n<p>通过上方的仪表盘按钮即可打开实时监控界面，可以查看请求处理器空闲率、流出和流出字节量、流入消息量等等。\n<img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://pic.imgdb.cn/item/625dfac0239250f7c58bbd90.png\"/></p>\n<p><strong>生成拓扑图</strong></p>\n<p>Topology.describe() 返回的字符串一键转换为拓扑图\n<img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://pic.imgdb.cn/item/625dfb47239250f7c58c41c7.png\"/></p>\n<p><strong>查看 Topic</strong></p>\n<p>选择 Topics 选项卡，列出当前集群下所有 Topic ，右侧可以分别查看集群消息（支持按时间筛选）、分区、配置修改和查看</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://pic.imgdb.cn/item/625dfac0239250f7c58bbd94.png\"/></p>\n<p><strong>发送消息</strong></p>\n<p>支持各种压缩类型，ack 类型，还可以定时发送</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://pic.imgdb.cn/item/625dfac0239250f7c58bbd9e.png\"/></p>\n<p><strong>Broker 配置查看和修改</strong></p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://pic.imgdb.cn/item/625dfac0239250f7c58bbda4.png\"/></p>\n<p>更多功能就不一一介绍了。</p>\n", "last_modified": 1650326615, "replies": 39, "id": 847796}]