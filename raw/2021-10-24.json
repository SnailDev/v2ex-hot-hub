[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 16385, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913", "stars": 1971, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"username": "MonkeyD1", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/cc22/70f0/446637_mini.png?m=1632735293", "bio": "", "url": "https://www.v2ex.com/u/MonkeyD1", "tagline": "", "twitter": null, "created": 1571030586, "avatar_large": "https://cdn.v2ex.com/avatar/cc22/70f0/446637_mini.png?m=1632735293", "avatar_mini": "https://cdn.v2ex.com/avatar/cc22/70f0/446637_mini.png?m=1632735293", "location": "", "btc": null, "id": 446637}, "last_reply_by": "alian", "last_touched": 1635016171, "title": "新款 MacBook M1 Pro 16 真机上手视频", "url": "https://www.v2ex.com/t/810038", "created": 1634980234, "deleted": 0, "content": "https://www.youtube.com/watch?v=L-867vQfZ60&t=19s", "content_rendered": "<div class=\"embedded_video_wrapper\"><iframe src=\"https://www.youtube.com/embed/L-867vQfZ60\" class=\"embedded_video\" allowfullscreen=\"\" type=\"text/html\" id=\"ytplayer\" frameborder=\"0\"></iframe></div>&amp;t=19s", "last_modified": 1634980243, "replies": 49, "id": 810038}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/41ae/36ec/417_large.png?m=1625409262", "name": "software", "avatar_normal": "https://cdn.v2ex.com/navatar/41ae/36ec/417_normal.png?m=1625409262", "title": "软件", "url": "https://www.v2ex.com/go/software", "topics": 505, "footer": "", "header": "关于软件使用的日常讨论", "title_alternative": "Software", "avatar_mini": "https://cdn.v2ex.com/navatar/41ae/36ec/417_mini.png?m=1625409262", "stars": 260, "aliases": [], "root": false, "id": 417, "parent_node_name": "computer"}, "member": {"username": "mingtdlb", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/1067/fd49/525301_mini.png?m=1620114221", "bio": "", "url": "https://www.v2ex.com/u/mingtdlb", "tagline": "", "twitter": null, "created": 1608735043, "avatar_large": "https://cdn.v2ex.com/avatar/1067/fd49/525301_mini.png?m=1620114221", "avatar_mini": "https://cdn.v2ex.com/avatar/1067/fd49/525301_mini.png?m=1620114221", "location": "", "btc": null, "id": 525301}, "last_reply_by": "HarveyLiu", "last_touched": 1635051687, "title": "各位平时文件同步用哪个？", "url": "https://www.v2ex.com/t/810009", "created": 1634971019, "deleted": 0, "content": "", "content_rendered": "", "last_modified": 1634971269, "replies": 43, "id": 810009}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/9f61/408e/56_large.png?m=1628212285", "name": "internet", "avatar_normal": "https://cdn.v2ex.com/navatar/9f61/408e/56_normal.png?m=1628212285", "title": "互联网", "url": "https://www.v2ex.com/go/internet", "topics": 2971, "footer": "", "header": "In Internet we trust", "title_alternative": "Internet", "avatar_mini": "https://cdn.v2ex.com/navatar/9f61/408e/56_mini.png?m=1628212285", "stars": 918, "aliases": [], "root": false, "id": 56, "parent_node_name": "computer"}, "member": {"username": "meisen", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/ca1b/c8a9/476364_mini.png?m=1628751594", "bio": "", "url": "https://www.v2ex.com/u/meisen", "tagline": "", "twitter": "", "created": 1584072591, "avatar_large": "https://cdn.v2ex.com/avatar/ca1b/c8a9/476364_mini.png?m=1628751594", "avatar_mini": "https://cdn.v2ex.com/avatar/ca1b/c8a9/476364_mini.png?m=1628751594", "location": "", "btc": "", "id": 476364}, "last_reply_by": "hi543", "last_touched": 1635043167, "title": "程序员 5 年坚持制作免费教程造福百万学生", "url": "https://www.v2ex.com/t/810045", "created": 1634983460, "deleted": 0, "content": "标题为微博热搜看到，此人 B 站：[/165659472]( https://space.bilibili.com/165659472) ，虽然我不是程序员，简单了解下值得竖大拇指👍🏻，不知道 V 站有没有他账号。\r\n\r\n![]( https://i.imgur.com/eRBMgoG.png)", "content_rendered": "<p>标题为微博热搜看到，此人 B 站：<a href=\"https://space.bilibili.com/165659472\" rel=\"nofollow\">/165659472</a> ，虽然我不是程序员，简单了解下值得竖大拇指👍🏻，不知道 V 站有没有他账号。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/eRBMgoG.png\"/></p>\n", "last_modified": 1634998299, "replies": 39, "id": 810045}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/a3c6/5c29/108_large.png?m=1620107025", "name": "bb", "avatar_normal": "https://cdn.v2ex.com/navatar/a3c6/5c29/108_normal.png?m=1620107025", "title": "宽带症候群", "url": "https://www.v2ex.com/go/bb", "topics": 9854, "footer": "", "header": "网速很重要。比快更快。", "title_alternative": "Broadband Symptom Complex", "avatar_mini": "https://cdn.v2ex.com/navatar/a3c6/5c29/108_mini.png?m=1620107025", "stars": 5181, "aliases": [], "root": false, "id": 108, "parent_node_name": "geek"}, "member": {"username": "hdkzwzj", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/f3078d7efad084b840e56d560c38ab5b?s=24&d=retro", "bio": "", "url": "https://www.v2ex.com/u/hdkzwzj", "tagline": "", "twitter": null, "created": 1427893024, "avatar_large": "https://cdn.v2ex.com/gravatar/f3078d7efad084b840e56d560c38ab5b?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/f3078d7efad084b840e56d560c38ab5b?s=24&d=retro", "location": "", "btc": null, "id": 108615}, "last_reply_by": "spiritV", "last_touched": 1635025013, "title": "家里两个小米路由器组 mesh，次路由速度很差，希望得到优化建议", "url": "https://www.v2ex.com/t/810034", "created": 1634979256, "deleted": 0, "content": "现在在用小米的 ax3600 和 ax1800 组了个 mesh ，但是 ax1800 作为次路由的信号非常差，主要是主路由和次路由的距离可能太远了。\r\n在网上找了个和我家比较类似的户型做了个示意图在下面。\r\n\r\n因为高通芯片供应的原因，ax3600 和 1800 都很难买到或者价格非常高。看了一眼咸鱼，应该可以按我的购入价出。\r\n\r\n请教一下各位，我现在的情况应该是再买一个小米或者红米的型号作为补充呢？还是说全套换个 TP-LINK 之类的东西比较好？ 我的主要诉求是希望主卧（ ax1800 所在的房间速度可以好一些）\r\n\r\n先谢谢各位\r\n\r\n <img alt=\"路由器位置\" src=\"https://upload.cc/i1/2021/10/23/J0IkfR.jpg\">。\r\n <img alt=\"测速情况\" src=\"https://upload.cc/i1/2021/10/23/V3MH54.jpg\">。", "content_rendered": "<p>现在在用小米的 ax3600 和 ax1800 组了个 mesh ，但是 ax1800 作为次路由的信号非常差，主要是主路由和次路由的距离可能太远了。\n在网上找了个和我家比较类似的户型做了个示意图在下面。</p>\n<p>因为高通芯片供应的原因，ax3600 和 1800 都很难买到或者价格非常高。看了一眼咸鱼，应该可以按我的购入价出。</p>\n<p>请教一下各位，我现在的情况应该是再买一个小米或者红米的型号作为补充呢？还是说全套换个 TP-LINK 之类的东西比较好？ 我的主要诉求是希望主卧（ ax1800 所在的房间速度可以好一些）</p>\n<p>先谢谢各位</p>\n<p><img alt=\"路由器位置\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://upload.cc/i1/2021/10/23/J0IkfR.jpg\"/>。\n<img alt=\"测速情况\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://upload.cc/i1/2021/10/23/V3MH54.jpg\"/>。</p>\n", "last_modified": 1634979387, "replies": 30, "id": 810034}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/093f/65e0/59_large.png?m=1615956453", "name": "random", "avatar_normal": "https://cdn.v2ex.com/navatar/093f/65e0/59_normal.png?m=1615956453", "title": "随想", "url": "https://www.v2ex.com/go/random", "topics": 3022, "footer": "", "header": "有的时候，可以停下来找找灵感，然后再继续。", "title_alternative": "Random", "avatar_mini": "https://cdn.v2ex.com/navatar/093f/65e0/59_mini.png?m=1615956453", "stars": 977, "aliases": [], "root": false, "id": 59, "parent_node_name": "v2ex"}, "member": {"username": "WeiShenMe", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/b9b3ea7c611b9a70ed1266dccb07f565?s=24&d=retro", "bio": null, "url": "https://www.v2ex.com/u/WeiShenMe", "tagline": null, "twitter": null, "created": 1634790689, "avatar_large": "https://cdn.v2ex.com/gravatar/b9b3ea7c611b9a70ed1266dccb07f565?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/b9b3ea7c611b9a70ed1266dccb07f565?s=24&d=retro", "location": null, "btc": null, "id": 559220}, "last_reply_by": "echo314", "last_touched": 1635053450, "title": "为什么不大力发展无线传输", "url": "https://www.v2ex.com/t/810104", "created": 1635036523, "deleted": 0, "content": "昨天整理房间，被电子设备的那一盘盘各种各样的线恶心坏了，那些线的粗细，软硬，形状，长短，各不相同，非常难以整理，最后干脆不让桌子靠墙，留点缝隙，直接把线放下去悬空完事。\r\n这时候想到各厂商整天只会无脑堆摄像头就挺郁闷的，啥时候研究一下消费级电子产品的无线充电与数据传输，如果实现了，那就能做到桌面无线化了，想想就太完美了……", "content_rendered": "昨天整理房间，被电子设备的那一盘盘各种各样的线恶心坏了，那些线的粗细，软硬，形状，长短，各不相同，非常难以整理，最后干脆不让桌子靠墙，留点缝隙，直接把线放下去悬空完事。<br />这时候想到各厂商整天只会无脑堆摄像头就挺郁闷的，啥时候研究一下消费级电子产品的无线充电与数据传输，如果实现了，那就能做到桌面无线化了，想想就太完美了……", "last_modified": 1635036523, "replies": 27, "id": 810104}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/d67d/8ab4/39_large.png?m=1634712791", "name": "android", "avatar_normal": "https://cdn.v2ex.com/navatar/d67d/8ab4/39_normal.png?m=1634712791", "title": "Android", "url": "https://www.v2ex.com/go/android", "topics": 9047, "footer": "", "header": "来自 <a href=\"/go/google\">Google</a> 的开放源代码智能手机平台。", "title_alternative": "Android", "avatar_mini": "https://cdn.v2ex.com/navatar/d67d/8ab4/39_mini.png?m=1634712791", "stars": 4894, "aliases": [], "root": false, "id": 39, "parent_node_name": "hardware"}, "member": {"username": "little2song", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/0857600d2d303dc111e1a0b3ff162832?s=24&d=retro", "bio": null, "url": "https://www.v2ex.com/u/little2song", "tagline": null, "twitter": null, "created": 1589460237, "avatar_large": "https://cdn.v2ex.com/gravatar/0857600d2d303dc111e1a0b3ff162832?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/0857600d2d303dc111e1a0b3ff162832?s=24&d=retro", "location": null, "btc": null, "id": 489559}, "last_reply_by": "AlexPUBLIC", "last_touched": 1635052235, "title": "深入理解 android 包体积优化，给 apk 瘦身全部技巧", "url": "https://www.v2ex.com/t/810075", "created": 1634997134, "deleted": 0, "content": "## 前言\r\n\r\n随着 iphone13p 最大内存放大到了 1T ，大内存手机的时代悄然降临，在 android 里面，三星也有，罗老师几年前说：如果我告诉你们我们在做 1T 的手机，**你们可能以为我疯了**。\r\n\r\n看看现在，估计未来会有更多手机有 1T 版，大家开始真香了。\r\n\r\n但是，如果现在有人说：要做一个 1T 大小的 app ，**那他可能是真疯了**，至少未来十年不可能。因为手机内存是越大越好，你一个 app 当然是能小就小呀\r\n\r\nAndroid app 的文件格式为 apk ，本文就是探讨对于一个 android apk ，有哪些方法可以减小体积\r\n\r\n## Apk 组成\r\n\r\n要想减小体积，首先我们需要了解 apk 的构成\r\n\r\n![373c7fa912fa93d601a2bee46c76ae2d.jpg]( https://cdn9.52xs.com.cn/d/article/20211006/77722.jpg)\r\n\r\n* 我们写的.java 文件会被编译为.class 文件，再由 dx 工具编译为 Classes.dex 文件，由于 android 限制，每个 dex 文件最多 65535 个方法，所以多出来的方法就生成 Classes2.dex , Classes3.dex~ClassesN.dex\r\n\r\n* Resource(res)与 Assets 比较像，区别是 res 目录下会生成资源 ID ，并在.R 文件中记录，可以直接使用，这里平常我们用得很多，而 assets 不会有 ID ，而是通过 AssetManager 接口获取；\r\n\r\n  所以 res 类似于我们的桌面，一般放我们要操纵的控件资源，而 assets 类似于桌下的抽屉，放诸如数据库，html 这类资源\r\n\r\n* Native Libraries 平时打交道少，优化空间也很有限\r\n\r\n\r\n\r\n 上面是抽象的 apk 结构，下面我们看一个实际的\r\n\r\n将 qq.apk 拖入 android studio\r\n\r\n![image-20211023160756347]( https://tva1.sinaimg.cn/large/008i3skNgy1gvpb5hpuumj60o90el75802.jpg)\r\n\r\n可以看到最大的 R 文件夹，点进去，都是一些图片，第二大的是 assets ，里面是一些表情包以及插件图片\r\n\r\n其他的我们刚刚也说过，值得注意的是，里面多了一个 META-INF\r\n\r\n他存放了应用的签名信息，其中\r\n\r\n* .MF: 每一个资源都有一个 SHA1 签名，存放在这里\r\n\r\n* .SF: 文件存放.MF 经过 base64 编码后的签名\r\n\r\n* .RSA: 对.SF 文件使用 SHA1 算法生成数字摘要（注意:.MF 中是对每一个资源进行 SHA1 ，这里是对文件），然后进行 RSA 加密，再用开发者私钥进行签名，安装时使用公钥解密\r\n\r\n这样子，一个 app 安装在手机时，解密这一数字摘要，然后与内部的.MF 文件比对，如果相符，证明资源内容没有被修改\r\n\r\n\r\n\r\n## Dex 文件\r\n\r\n在 APK 组成中我们可以看到，占用内存最大的是 res ，assets 与 classs.dex 文件，这也是我们的优化方向，接下来，我们看看如何优化 dex\r\n\r\n首先我们看看 dex 的结构\r\n\r\n![undefined]( https://cdn.dingxiang-inc.com/images/b07/b071bd37-ed5d-408e-8ec8-e01eefa84e24.jpg)\r\n\r\n\r\n\r\n更详细的版本在官网，这里如果对这些结构的作用有兴趣，可以看下图的详细版本\r\n\r\n![image-20211023162712238]( https://tva1.sinaimg.cn/large/008i3skNgy1gvpbpj71zij60nc0tg43202.jpg)\r\n\r\n\r\n\r\n### ProGuadrd\r\n\r\ndex 是代码编译而来，而对于代码文件，最重要的优化就是混淆了，将**方法名，属性名等变为又短又无意义的名字**，不仅能缩小体积还能避免反编译被人破解\r\n\r\n在 IDE 中，我们可以看到 qq 里面的类都是小写字母，里面的变量和方法都按字母顺序排列了，从 a 开始\r\n\r\n![image-20211023163108352]( https://tva1.sinaimg.cn/large/008i3skNgy1gvpbtmp4lij60nc0atmxp02.jpg)\r\n\r\n除了修改变量名，ProGuadrd 还可以在功能**等价的基础上重写代码**，比如把多个函数调用写到一个函数里面去，更加增大了阅读理解难度（虽然初学者一般已经这样做了），以及打乱格式，增加空格等\r\n\r\n主要步骤如下\r\n\r\n* 压缩（ Shrink ）: 检测和删除没有使用的类，字段，方法和特性。\r\n\r\n* 优化（ Optimize ） : 分析和优化 Java 字节码。\r\n\r\n* 混淆（ Obfuscate ）: 使用简短的无意义的名称，对类，字段和方法进行重命名。\r\n\r\n* 预检（ Preveirfy ）: 用来对 Java class 进行预验证（预验证主要是针对 JME 开发来说的，Android 中没有预验证过程，默认是关闭）。\r\n\r\n\r\n\r\n### D8 与 R8 优化\r\n\r\n这两平时接触不多，他们主要是在字节码处做优化的，开发时感知不强（感觉就是用来面试的）\r\n\r\nD8 主要是在编译字节码时重排序，将占用空间变得更小，比如对于 greetingType 方法，正常编译后的结果是\r\n\r\n```java\r\n[000584] Main.greetingType:(LGreeting;)Ljava/lang/String;\r\n0000: sget-object v0, LMain$1;.$SwitchMap$Greeting:[I\r\n0002: invoke-virtual {v2}, LGreeting;.ordinal:()I\r\n0005: move-result v1\r\n0006: aget v0, v0, v1\r\n0008: packed-switch v0, 00000017  // 这里\r\n```\r\n\r\n\r\n\r\n如果使用 D8 优化，编译后的结果\r\n\r\n```java\r\n[0005f0] Main.greetingType:(LGreeting;)Ljava/lang/String;\r\n0000: sget-object v0, LMain$1;.$SwitchMap$Greeting:[I\r\n0002: invoke-virtual {v1}, LGreeting;.ordinal:()I\r\n0005: move-result v1\r\n0006: aget v0, v0, v1\r\n-0008: packed-switch v0, 00000017  //  这里\r\n+0008: const/4 v1, #int 1\r\n+0009: if-eq v0, v1, 0014\r\n+000b: const/4 v1, #int 2\r\n+000c: if-eq v0, v1, 0017\r\n```\r\n\r\n可以看到 0008 处后的几条指令有变化，多了几个 if ，对于不同的 case 做创建不同的变量，可以节省空间\r\n\r\nR8 也类似，只是策略有些不一样\r\n\r\n更详细的了解可以参考 [D8 Optimizations]( https://jakewharton.com/d8-optimizations/)\r\n\r\n总之，他们的作用是就是，在不改变功能的情况下，重写部分 class 指令，减小空间占用，但是有可能会增加指令数量\r\n\r\n\r\n\r\n### Redex 优化\r\n\r\nRedex 是 Facebook 推出的一个优化 Dex 文件的工具，和 D8R8 一样，也是对字节码的处理，有以下效果\r\n\r\n1. 内联函数，减少调用\r\n2. 删除无用代码\r\n3. 将只有一个实现类的接口或者父类用实现类代替\r\n4. 字符串混淆所见\r\n\r\n……\r\n\r\n不过这个我没用过，但是感觉 Proguard 与 D8R8 都多多少少能做到，可能是他在细节上用了更好的算法\r\n\r\n但是不管多少框架，对 dex 文件的优化说来说去也就这些\r\n\r\n\r\n\r\n### 移除多余的库与代码\r\n\r\n最后是移除第三方库和冗余代码，属于业务逻辑上的原因\r\n\r\n* 多余的库\r\n\r\n  对于自己的小项目，还好，对于多人参与的大型项目，很有可能对同一个功能，不同的人用了不同的轮子，手 Q 里面就有，比如要写单测，之前使用 Powermock ，后来用 JMock ，再后来改为 Mockk ，一个项目，三个单测框架\r\n\r\n  由于不同的单测框架已经写了不少单测，短时间移除是不太可能的，但是可以慢慢转为同一种单测框架\r\n\r\n* 多余代码\r\n\r\n  Android studio 会自己检测，没有用过的会置位灰色提醒，但是会漏掉很多，通过插件 Lint 可以检测，\r\n\r\n##  资源清理\r\n\r\n上面都是在代码层面减小 dex ，apk 的另一个空间占用大户，是资源，尤其是其中的图片，\r\n\r\n图片，你可知道，多少 OOM 因你而起？多少 app 因你闪退？\r\n\r\n\r\n\r\n### 图片压缩与更换格式\r\n\r\n我们先看看图片为什么那么大\r\n\r\n图片的显示，有 ARGB 4 个通道，其中默认的显示模式是 ARGB8888 ，ARGB8888 表示**每个通道**的颜色区间为[0,255]，也就是两个 16 进制数表示，也就是 8bit -> **1 字节**\r\n\r\n所以 ARGB8888 模式下，一个像素 4 个通道下占用 4 字节，一张 1024*1024 的手机图片图片，就是\r\n$$\r\n2^{10} * 2^{10} * 2^2 = 2^{22}  = 4M\r\n$$\r\n一张图 4M ，太离谱了！\r\n\r\n上面是打开后在运存的占用，我们可以修改颜色通道，不然 ARGB565 来减小单个像素所占用运存，不**过有点跑题，本篇我们讲的是 app 的大小，也就是所占用手机的内存（我们约定 手机运存 = 电脑内存，手机内存 = 电脑硬盘）**\r\n\r\n*内存与运存中的图片存在形式是不一样的，压缩方法也不一样，很多人容易弄混*\r\n\r\n回到内存，内存中，图片是以 png ，jpg 等格式存储\r\n\r\n我之前开发的时候都是先将 png 图片，往 tinypng 网站中压缩一下再放入，所以可以压缩图片，一般能压个三分之一~三分之二。\r\n\r\n\r\n\r\n也可以更换图片格式，比如 webp ，svg 可以更小，android studio 也提供了对应的支持，但是没有最好的格式，只是适用场景不同\r\n\r\n\r\n![几种格式的优缺点]( https://tva1.sinaimg.cn/large/008i3skNgy1gvpdx8e07jj60hx09ggm202.jpg)\r\n\r\n这里多提一下 webp ，因为这是 google 推出的，大家在谷歌浏览器下载图片的时候，一般默认下载下来就是 webp 格式，所谓更小的内存占用，本质上是对图片进行了压缩，webp 的压缩算法是 VP8 视频编码，核心逻辑就是将**图片分割成更小的子块，然后预测周围像素值，预测越准，周围的像素值就可以删去，再在图片打开时算出删掉的像素**\r\n\r\n###  图片网络化\r\n\r\n在微信或者 qq 聊天中，对方发来一张图片，我们在聊天窗口往往先看到一张很模糊的缩略图，当点击时才会加载出高清图，\r\n\r\n这个思路也可以用在 apk 中，很多入口较深的高清大图，或者需要经常更新的图片，也许用户根本不看，就没有必要内置在 apk 中，看时加载即可，如果需要提前占位置，可以用缩略图代替\r\n\r\n至于哪些图网络化，需要根据业务与用户体验来权衡了\r\n\r\n比如淘宝，在断网情况下打开时，只有 icon 内置了\r\n\r\n![image-20211023211648469]( https://tva1.sinaimg.cn/large/008i3skNgy1gvpk2v9f9dj609d06sq2y02.jpg)\r\n\r\n\r\n\r\n## 其他策略\r\n\r\n无论是对 Dex 还是对资源进行优化，虽然安全有效，但是本质上是将原来有的东西变得更小，对 apk 的瘦身程度是有限的，还有一些”七伤拳“，优化率极高，但是对 apk 的影响也很大，需要谨慎使用。\r\n\r\n###  插件化\r\n\r\n所谓插件化，就是将 apk 中的非主要功能弄成独立的 apk ，原主 apk 称为宿主。\r\n\r\n比如支付宝里面，就是搞支付的，那么他里面的什么口碑，基金，天猫一堆乱七八糟，同时功能独立的东西就非常适合做成插件，用户用到的时候再从网络加载进来，这样极大的减少了 apk 占用。\r\n\r\n但是这里涉及到比较多的技术问题：\r\n\r\n1. 用户现在只有宿主 apk ，如何让宿主加载到插件 apk 里面的代码？\r\n2. android 四大组件都需要到 manifest 中注册，插件里面的组件显然不可能提前注册到宿主的 manifest 中（不然注册了，插件没加载进来，会找不到类），所以如何让系统认为下载下来的插件有注册？\r\n3. 宿主与插件资源能否正确互相引用？\r\n\r\n一般来说，通过的是代理和反射来处理，腾讯有一个 shadow 框架可以大致实现”零反射“，\r\n\r\n- **复用独立安装 App 的源码**：\r\n- **零反射无 Hack 实现插件技术**：\r\n- **全动态插件框架**：\r\n- **宿主增量极小**：\r\n- **Kotlin 实现**：\r\n\r\n不过插件化技术不在今天的讨论范围，有兴趣可以研究下[tencent-shadow]( https://github.com/Tencent/Shadow)\r\n\r\n当使用了插件化后，项目基本是要重构了，相比起改改 Dex 和图片，这个工程量极大，但是收益也会很高\r\n\r\n### webview\r\n\r\n这里类似于图片网络化，相对于图片，直接将整个界面都变成 url ，\r\n\r\n我们手机 app 中的小程序一般都是 url 显示在 webview 中\r\n\r\n相关技术可以使用 jsBridge 与 Hybird ，本质上就是通过 bridge 连接 h5 与 android iOS ，实现通信\r\n\r\n![image-20211023201811533]( https://tva1.sinaimg.cn/large/008i3skNgy1gvpidvq8wpj60jk0bsq3c02.jpg)\r\n\r\n不过代价就是，加载速度慢于原生，还要注意防止网址篡改等\r\n\r\n\r\n\r\n##   小结\r\n\r\n本文我们讨论的是 apk 的瘦身方案，首先先明确了 apk 的主要组成部分为 dex 文件与资源文件\r\n\r\n* 对于 dex 文件，我们可以进行混淆，字节码重排序，移除多余库与代码\r\n\r\n* 对于资源文件，我们可以替换格式，压缩图片，网络化\r\n\r\n除了这些常规操作，我们还可以使用插件化与 Webview 方法极致减少体积，但是这两个技术工程量大，而且有性能代价，需要谨慎使用。\r\n\r\n\r\n\r\n参考资料\r\n\r\n[深入探索 Android 包体积优化（匠心制作-上）]( https://juejin.cn/post/6844904103131234311#heading-2)\r\n\r\n[Android 项目中资源文件 -- asset 目录和 res 目录]( https://www.jianshu.com/p/e27bf552ab64 )\r\n\r\n[顶象 App 加固技术解析：DEX 文件格式的详解]( https://www.dingxiang-inc.com/blog/post/154)\r\n\r\n[D8 Optimizations]( https://jakewharton.com/d8-optimizations/)\r\n\r\n[Android 开发应该掌握的 Proguard 技巧]( https://juejin.cn/post/6844903653862539278)", "content_rendered": "<h2>前言</h2>\n<p>随着 iphone13p 最大内存放大到了 1T ，大内存手机的时代悄然降临，在 android 里面，三星也有，罗老师几年前说：如果我告诉你们我们在做 1T 的手机，<strong>你们可能以为我疯了</strong>。</p>\n<p>看看现在，估计未来会有更多手机有 1T 版，大家开始真香了。</p>\n<p>但是，如果现在有人说：要做一个 1T 大小的 app ，<strong>那他可能是真疯了</strong>，至少未来十年不可能。因为手机内存是越大越好，你一个 app 当然是能小就小呀</p>\n<p>Android app 的文件格式为 apk ，本文就是探讨对于一个 android apk ，有哪些方法可以减小体积</p>\n<h2>Apk 组成</h2>\n<p>要想减小体积，首先我们需要了解 apk 的构成</p>\n<p><img alt=\"373c7fa912fa93d601a2bee46c76ae2d.jpg\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://cdn9.52xs.com.cn/d/article/20211006/77722.jpg\"/></p>\n<ul>\n<li>\n<p>我们写的.java 文件会被编译为.class 文件，再由 dx 工具编译为 Classes.dex 文件，由于 android 限制，每个 dex 文件最多 65535 个方法，所以多出来的方法就生成 Classes2.dex , Classes3.dex~ClassesN.dex</p>\n</li>\n<li>\n<p>Resource(res)与 Assets 比较像，区别是 res 目录下会生成资源 ID ，并在.R 文件中记录，可以直接使用，这里平常我们用得很多，而 assets 不会有 ID ，而是通过 AssetManager 接口获取；</p>\n<p>所以 res 类似于我们的桌面，一般放我们要操纵的控件资源，而 assets 类似于桌下的抽屉，放诸如数据库，html 这类资源</p>\n</li>\n<li>\n<p>Native Libraries 平时打交道少，优化空间也很有限</p>\n</li>\n</ul>\n<p>上面是抽象的 apk 结构，下面我们看一个实际的</p>\n<p>将 qq.apk 拖入 android studio</p>\n<p><img alt=\"image-20211023160756347\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gvpb5hpuumj60o90el75802.jpg\"/></p>\n<p>可以看到最大的 R 文件夹，点进去，都是一些图片，第二大的是 assets ，里面是一些表情包以及插件图片</p>\n<p>其他的我们刚刚也说过，值得注意的是，里面多了一个 META-INF</p>\n<p>他存放了应用的签名信息，其中</p>\n<ul>\n<li>\n<p>.MF: 每一个资源都有一个 SHA1 签名，存放在这里</p>\n</li>\n<li>\n<p>.SF: 文件存放.MF 经过 base64 编码后的签名</p>\n</li>\n<li>\n<p>.RSA: 对.SF 文件使用 SHA1 算法生成数字摘要（注意:.MF 中是对每一个资源进行 SHA1 ，这里是对文件），然后进行 RSA 加密，再用开发者私钥进行签名，安装时使用公钥解密</p>\n</li>\n</ul>\n<p>这样子，一个 app 安装在手机时，解密这一数字摘要，然后与内部的.MF 文件比对，如果相符，证明资源内容没有被修改</p>\n<h2>Dex 文件</h2>\n<p>在 APK 组成中我们可以看到，占用内存最大的是 res ，assets 与 classs.dex 文件，这也是我们的优化方向，接下来，我们看看如何优化 dex</p>\n<p>首先我们看看 dex 的结构</p>\n<p><img alt=\"undefined\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://cdn.dingxiang-inc.com/images/b07/b071bd37-ed5d-408e-8ec8-e01eefa84e24.jpg\"/></p>\n<p>更详细的版本在官网，这里如果对这些结构的作用有兴趣，可以看下图的详细版本</p>\n<p><img alt=\"image-20211023162712238\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gvpbpj71zij60nc0tg43202.jpg\"/></p>\n<h3>ProGuadrd</h3>\n<p>dex 是代码编译而来，而对于代码文件，最重要的优化就是混淆了，将<strong>方法名，属性名等变为又短又无意义的名字</strong>，不仅能缩小体积还能避免反编译被人破解</p>\n<p>在 IDE 中，我们可以看到 qq 里面的类都是小写字母，里面的变量和方法都按字母顺序排列了，从 a 开始</p>\n<p><img alt=\"image-20211023163108352\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gvpbtmp4lij60nc0atmxp02.jpg\"/></p>\n<p>除了修改变量名，ProGuadrd 还可以在功能<strong>等价的基础上重写代码</strong>，比如把多个函数调用写到一个函数里面去，更加增大了阅读理解难度（虽然初学者一般已经这样做了），以及打乱格式，增加空格等</p>\n<p>主要步骤如下</p>\n<ul>\n<li>\n<p>压缩（ Shrink ）: 检测和删除没有使用的类，字段，方法和特性。</p>\n</li>\n<li>\n<p>优化（ Optimize ） : 分析和优化 Java 字节码。</p>\n</li>\n<li>\n<p>混淆（ Obfuscate ）: 使用简短的无意义的名称，对类，字段和方法进行重命名。</p>\n</li>\n<li>\n<p>预检（ Preveirfy ）: 用来对 Java class 进行预验证（预验证主要是针对 JME 开发来说的，Android 中没有预验证过程，默认是关闭）。</p>\n</li>\n</ul>\n<h3>D8 与 R8 优化</h3>\n<p>这两平时接触不多，他们主要是在字节码处做优化的，开发时感知不强（感觉就是用来面试的）</p>\n<p>D8 主要是在编译字节码时重排序，将占用空间变得更小，比如对于 greetingType 方法，正常编译后的结果是</p>\n<pre><code class=\"language-java\">[000584] Main.greetingType:(LGreeting;)Ljava/lang/String;\n0000: sget-object v0, LMain$1;.$SwitchMap$Greeting:[I\n0002: invoke-virtual {v2}, LGreeting;.ordinal:()I\n0005: move-result v1\n0006: aget v0, v0, v1\n0008: packed-switch v0, 00000017  // 这里\n</code></pre>\n<p>如果使用 D8 优化，编译后的结果</p>\n<pre><code class=\"language-java\">[0005f0] Main.greetingType:(LGreeting;)Ljava/lang/String;\n0000: sget-object v0, LMain$1;.$SwitchMap$Greeting:[I\n0002: invoke-virtual {v1}, LGreeting;.ordinal:()I\n0005: move-result v1\n0006: aget v0, v0, v1\n-0008: packed-switch v0, 00000017  //  这里\n+0008: const/4 v1, #int 1\n+0009: if-eq v0, v1, 0014\n+000b: const/4 v1, #int 2\n+000c: if-eq v0, v1, 0017\n</code></pre>\n<p>可以看到 0008 处后的几条指令有变化，多了几个 if ，对于不同的 case 做创建不同的变量，可以节省空间</p>\n<p>R8 也类似，只是策略有些不一样</p>\n<p>更详细的了解可以参考 <a href=\"https://jakewharton.com/d8-optimizations/\" rel=\"nofollow\">D8 Optimizations</a></p>\n<p>总之，他们的作用是就是，在不改变功能的情况下，重写部分 class 指令，减小空间占用，但是有可能会增加指令数量</p>\n<h3>Redex 优化</h3>\n<p>Redex 是 Facebook 推出的一个优化 Dex 文件的工具，和 D8R8 一样，也是对字节码的处理，有以下效果</p>\n<ol>\n<li>内联函数，减少调用</li>\n<li>删除无用代码</li>\n<li>将只有一个实现类的接口或者父类用实现类代替</li>\n<li>字符串混淆所见</li>\n</ol>\n<p>……</p>\n<p>不过这个我没用过，但是感觉 Proguard 与 D8R8 都多多少少能做到，可能是他在细节上用了更好的算法</p>\n<p>但是不管多少框架，对 dex 文件的优化说来说去也就这些</p>\n<h3>移除多余的库与代码</h3>\n<p>最后是移除第三方库和冗余代码，属于业务逻辑上的原因</p>\n<ul>\n<li>\n<p>多余的库</p>\n<p>对于自己的小项目，还好，对于多人参与的大型项目，很有可能对同一个功能，不同的人用了不同的轮子，手 Q 里面就有，比如要写单测，之前使用 Powermock ，后来用 JMock ，再后来改为 Mockk ，一个项目，三个单测框架</p>\n<p>由于不同的单测框架已经写了不少单测，短时间移除是不太可能的，但是可以慢慢转为同一种单测框架</p>\n</li>\n<li>\n<p>多余代码</p>\n<p>Android studio 会自己检测，没有用过的会置位灰色提醒，但是会漏掉很多，通过插件 Lint 可以检测，</p>\n</li>\n</ul>\n<h2>资源清理</h2>\n<p>上面都是在代码层面减小 dex ，apk 的另一个空间占用大户，是资源，尤其是其中的图片，</p>\n<p>图片，你可知道，多少 OOM 因你而起？多少 app 因你闪退？</p>\n<h3>图片压缩与更换格式</h3>\n<p>我们先看看图片为什么那么大</p>\n<p>图片的显示，有 ARGB 4 个通道，其中默认的显示模式是 ARGB8888 ，ARGB8888 表示<strong>每个通道</strong>的颜色区间为[0,255]，也就是两个 16 进制数表示，也就是 8bit -&gt; <strong>1 字节</strong></p>\n<p>所以 ARGB8888 模式下，一个像素 4 个通道下占用 4 字节，一张 1024*1024 的手机图片图片，就是\n$$\n2^{10} * 2^{10} * 2^2 = 2^{22}  = 4M\n$$\n一张图 4M ，太离谱了！</p>\n<p>上面是打开后在运存的占用，我们可以修改颜色通道，不然 ARGB565 来减小单个像素所占用运存，不<strong>过有点跑题，本篇我们讲的是 app 的大小，也就是所占用手机的内存（我们约定 手机运存 = 电脑内存，手机内存 = 电脑硬盘）</strong></p>\n<p><em>内存与运存中的图片存在形式是不一样的，压缩方法也不一样，很多人容易弄混</em></p>\n<p>回到内存，内存中，图片是以 png ，jpg 等格式存储</p>\n<p>我之前开发的时候都是先将 png 图片，往 tinypng 网站中压缩一下再放入，所以可以压缩图片，一般能压个三分之一~三分之二。</p>\n<p>也可以更换图片格式，比如 webp ，svg 可以更小，android studio 也提供了对应的支持，但是没有最好的格式，只是适用场景不同</p>\n<p><img alt=\"几种格式的优缺点\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gvpdx8e07jj60hx09ggm202.jpg\"/></p>\n<p>这里多提一下 webp ，因为这是 google 推出的，大家在谷歌浏览器下载图片的时候，一般默认下载下来就是 webp 格式，所谓更小的内存占用，本质上是对图片进行了压缩，webp 的压缩算法是 VP8 视频编码，核心逻辑就是将<strong>图片分割成更小的子块，然后预测周围像素值，预测越准，周围的像素值就可以删去，再在图片打开时算出删掉的像素</strong></p>\n<h3>图片网络化</h3>\n<p>在微信或者 qq 聊天中，对方发来一张图片，我们在聊天窗口往往先看到一张很模糊的缩略图，当点击时才会加载出高清图，</p>\n<p>这个思路也可以用在 apk 中，很多入口较深的高清大图，或者需要经常更新的图片，也许用户根本不看，就没有必要内置在 apk 中，看时加载即可，如果需要提前占位置，可以用缩略图代替</p>\n<p>至于哪些图网络化，需要根据业务与用户体验来权衡了</p>\n<p>比如淘宝，在断网情况下打开时，只有 icon 内置了</p>\n<p><img alt=\"image-20211023211648469\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gvpk2v9f9dj609d06sq2y02.jpg\"/></p>\n<h2>其他策略</h2>\n<p>无论是对 Dex 还是对资源进行优化，虽然安全有效，但是本质上是将原来有的东西变得更小，对 apk 的瘦身程度是有限的，还有一些”七伤拳“，优化率极高，但是对 apk 的影响也很大，需要谨慎使用。</p>\n<h3>插件化</h3>\n<p>所谓插件化，就是将 apk 中的非主要功能弄成独立的 apk ，原主 apk 称为宿主。</p>\n<p>比如支付宝里面，就是搞支付的，那么他里面的什么口碑，基金，天猫一堆乱七八糟，同时功能独立的东西就非常适合做成插件，用户用到的时候再从网络加载进来，这样极大的减少了 apk 占用。</p>\n<p>但是这里涉及到比较多的技术问题：</p>\n<ol>\n<li>用户现在只有宿主 apk ，如何让宿主加载到插件 apk 里面的代码？</li>\n<li>android 四大组件都需要到 manifest 中注册，插件里面的组件显然不可能提前注册到宿主的 manifest 中（不然注册了，插件没加载进来，会找不到类），所以如何让系统认为下载下来的插件有注册？</li>\n<li>宿主与插件资源能否正确互相引用？</li>\n</ol>\n<p>一般来说，通过的是代理和反射来处理，腾讯有一个 shadow 框架可以大致实现”零反射“，</p>\n<ul>\n<li><strong>复用独立安装 App 的源码</strong>：</li>\n<li><strong>零反射无 Hack 实现插件技术</strong>：</li>\n<li><strong>全动态插件框架</strong>：</li>\n<li><strong>宿主增量极小</strong>：</li>\n<li><strong>Kotlin 实现</strong>：</li>\n</ul>\n<p>不过插件化技术不在今天的讨论范围，有兴趣可以研究下<a href=\"https://github.com/Tencent/Shadow\" rel=\"nofollow\">tencent-shadow</a></p>\n<p>当使用了插件化后，项目基本是要重构了，相比起改改 Dex 和图片，这个工程量极大，但是收益也会很高</p>\n<h3>webview</h3>\n<p>这里类似于图片网络化，相对于图片，直接将整个界面都变成 url ，</p>\n<p>我们手机 app 中的小程序一般都是 url 显示在 webview 中</p>\n<p>相关技术可以使用 jsBridge 与 Hybird ，本质上就是通过 bridge 连接 h5 与 android iOS ，实现通信</p>\n<p><img alt=\"image-20211023201811533\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gvpidvq8wpj60jk0bsq3c02.jpg\"/></p>\n<p>不过代价就是，加载速度慢于原生，还要注意防止网址篡改等</p>\n<h2>小结</h2>\n<p>本文我们讨论的是 apk 的瘦身方案，首先先明确了 apk 的主要组成部分为 dex 文件与资源文件</p>\n<ul>\n<li>\n<p>对于 dex 文件，我们可以进行混淆，字节码重排序，移除多余库与代码</p>\n</li>\n<li>\n<p>对于资源文件，我们可以替换格式，压缩图片，网络化</p>\n</li>\n</ul>\n<p>除了这些常规操作，我们还可以使用插件化与 Webview 方法极致减少体积，但是这两个技术工程量大，而且有性能代价，需要谨慎使用。</p>\n<p>参考资料</p>\n<p><a href=\"https://juejin.cn/post/6844904103131234311#heading-2\" rel=\"nofollow\">深入探索 Android 包体积优化（匠心制作-上）</a></p>\n<p><a href=\"https://www.jianshu.com/p/e27bf552ab64\" rel=\"nofollow\">Android 项目中资源文件 -- asset 目录和 res 目录</a></p>\n<p><a href=\"https://www.dingxiang-inc.com/blog/post/154\" rel=\"nofollow\">顶象 App 加固技术解析：DEX 文件格式的详解</a></p>\n<p><a href=\"https://jakewharton.com/d8-optimizations/\" rel=\"nofollow\">D8 Optimizations</a></p>\n<p><a href=\"https://juejin.cn/post/6844903653862539278\" rel=\"nofollow\">Android 开发应该掌握的 Proguard 技巧</a></p>\n", "last_modified": 1634997134, "replies": 26, "id": 810075}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/d3d9/4468/10_large.png?m=1630643933", "name": "mbp", "avatar_normal": "https://cdn.v2ex.com/navatar/d3d9/4468/10_normal.png?m=1630643933", "title": "MacBook Pro", "url": "https://www.v2ex.com/go/mbp", "topics": 7318, "footer": "", "header": "State-of-the-art processors. All-new graphics. Breakthrough high-speed I/O. Three very big leaps forward.", "title_alternative": "MacBook Pro", "avatar_mini": "https://cdn.v2ex.com/navatar/d3d9/4468/10_mini.png?m=1630643933", "stars": 2961, "aliases": [], "root": false, "id": 10, "parent_node_name": "apple"}, "member": {"username": "ZZY19890604", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/5a3a/fcbd/457712_mini.png?m=1616720802", "bio": null, "url": "https://www.v2ex.com/u/ZZY19890604", "tagline": null, "twitter": null, "created": 1575596075, "avatar_large": "https://cdn.v2ex.com/avatar/5a3a/fcbd/457712_mini.png?m=1616720802", "avatar_mini": "https://cdn.v2ex.com/avatar/5a3a/fcbd/457712_mini.png?m=1616720802", "location": null, "btc": null, "id": 457712}, "last_reply_by": "bearqq", "last_touched": 1635051449, "title": "看了新 MBP 的上手视频，反而能接受刘海了，毕竟能把顶部菜单栏改成黑色背景隐藏刘海，应用全屏也不会延伸到刘海，这种刘海区域直接给多做一截屏幕出来的思路不错，交互上甚至比以前更舒服了。", "url": "https://www.v2ex.com/t/810066", "created": 1634992703, "deleted": 0, "content": "而且以前应用全屏时候，只要光标触到屏幕顶部，菜单栏就会弹出来，然后有的时候就会带动应用内容顶部工具栏下移、或者遮住应用的顶部内容。\r\n现在新 MBP 光标上移触到顶部，只是菜单栏按钮显示出颜色，刘海仍然因为整个菜单栏背景是黑色的，而不明显。\r\n而且因为应用内容根本不延伸到刘海区域，也就没有应用工具栏被带动下移，或内容被遮住的问题，交互上反而是个进步了。", "content_rendered": "<p>而且以前应用全屏时候，只要光标触到屏幕顶部，菜单栏就会弹出来，然后有的时候就会带动应用内容顶部工具栏下移、或者遮住应用的顶部内容。\n现在新 MBP 光标上移触到顶部，只是菜单栏按钮显示出颜色，刘海仍然因为整个菜单栏背景是黑色的，而不明显。\n而且因为应用内容根本不延伸到刘海区域，也就没有应用工具栏被带动下移，或内容被遮住的问题，交互上反而是个进步了。</p>\n", "last_modified": 1634992703, "replies": 25, "id": 810066}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 16385, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913", "stars": 1971, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"username": "bigbanana233", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/4c6586ea539ecd3c728ffe102a3379ba?s=24&d=retro", "bio": "", "url": "https://www.v2ex.com/u/bigbanana233", "tagline": "", "twitter": null, "created": 1484273397, "avatar_large": "https://cdn.v2ex.com/gravatar/4c6586ea539ecd3c728ffe102a3379ba?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/4c6586ea539ecd3c728ffe102a3379ba?s=24&d=retro", "location": "", "btc": null, "id": 210639}, "last_reply_by": "zzzmode", "last_touched": 1634998062, "title": "Macbook Pro 发货了", "url": "https://www.v2ex.com/t/810021", "created": 1634975902, "deleted": 0, "content": "14 寸 Max 32 ，64GB ，2T 今天上午 10 点多发货了，预计到达时间 26 日。\r\n\r\nhttps://i.imgur.com/SikEErq.png", "content_rendered": "14 寸 Max 32 ，64GB ，2T 今天上午 10 点多发货了，预计到达时间 26 日。<br /><br /><a target=\"_blank\" href=\"https://i.imgur.com/SikEErq.png\" rel=\"nofollow noopener\" target=\"_blank\"><img src=\"https://i.imgur.com/SikEErq.png\" class=\"embedded_image\" rel=\"noreferrer\"></a>", "last_modified": 1634976097, "replies": 20, "id": 810021}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1629391393", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1629391393", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 177685, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1629391393", "stars": 3336, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"username": "dingwen07", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/gravatar/a0b38f435e557e3b43687517e25b59de?s=24&d=retro", "bio": "PGP Key: 0xC90F5D94EAB69014\r\nhttps://www.v2ex.com/t/750119", "url": "https://www.v2ex.com/u/dingwen07", "tagline": "", "twitter": "", "created": 1546601570, "avatar_large": "https://cdn.v2ex.com/gravatar/a0b38f435e557e3b43687517e25b59de?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/a0b38f435e557e3b43687517e25b59de?s=24&d=retro", "location": "", "btc": "", "id": 375269}, "last_reply_by": "20015jjw", "last_touched": 1635050236, "title": "macOS 有必要用 4K 显示器吗？", "url": "https://www.v2ex.com/t/810100", "created": 1635020979, "deleted": 0, "content": "用来看网页、写代码，看视频用内置显示器了。\r\n听说 macOS 在 1080p 或 2K 下字体会糊？但是我看了下好像 4K 的显示器基本上都要 400 刀以上。", "content_rendered": "用来看网页、写代码，看视频用内置显示器了。<br />听说 macOS 在 1080p 或 2K 下字体会糊？但是我看了下好像 4K 的显示器基本上都要 400 刀以上。", "last_modified": 1635020979, "replies": 20, "id": 810100}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/fc22/1309/181_large.png?m=1608240651", "name": "travel", "avatar_normal": "https://cdn.v2ex.com/navatar/fc22/1309/181_normal.png?m=1608240651", "title": "旅行", "url": "https://www.v2ex.com/go/travel", "topics": 676, "footer": "", "header": "你会把上大学的学费用来环游世界么？", "title_alternative": "Travel", "avatar_mini": "https://cdn.v2ex.com/navatar/fc22/1309/181_mini.png?m=1608240651", "stars": 785, "aliases": [], "root": false, "id": 181, "parent_node_name": "life"}, "member": {"username": "ChrisFreeMan", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/f6c2/fb66/539019_mini.png?m=1635048891", "bio": "", "url": "https://www.v2ex.com/u/ChrisFreeMan", "tagline": "", "twitter": null, "created": 1616471485, "avatar_large": "https://cdn.v2ex.com/avatar/f6c2/fb66/539019_mini.png?m=1635048891", "avatar_mini": "https://cdn.v2ex.com/avatar/f6c2/fb66/539019_mini.png?m=1635048891", "location": "", "btc": null, "id": 539019}, "last_reply_by": "minamike", "last_touched": 1635054288, "title": "好喜欢这类独自徒步的视频，太美了，感受到了自由", "url": "https://www.v2ex.com/t/810131", "created": 1635048969, "deleted": 0, "content": "https://www.youtube.com/watch?v=3jbJ-dK-iok", "content_rendered": "<div class=\"embedded_video_wrapper\"><iframe src=\"https://www.youtube.com/embed/3jbJ-dK-iok\" class=\"embedded_video\" allowfullscreen=\"\" type=\"text/html\" id=\"ytplayer\" frameborder=\"0\"></iframe></div>", "last_modified": 1635048969, "replies": 20, "id": 810131}]