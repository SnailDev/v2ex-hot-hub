[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1692078075", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1692078075", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 58372, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1692078075", "stars": 8555, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 191163, "username": "byaiu", "url": "https://www.v2ex.com/u/byaiu", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/70b7a34c2c62e6171762fb875da61142?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/70b7a34c2c62e6171762fb875da61142?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/70b7a34c2c62e6171762fb875da61142?s=73&d=retro", "created": 1473477980, "last_modified": 1473477980}, "last_reply_by": "iorilu", "last_touched": 1692949957, "title": "看了李跳跳的帖子，我们真的就只能任由腾讯欺负而没有任何挣扎的方式了吗？我们普通人能做什么？", "url": "https://www.v2ex.com/t/968150", "created": 1692922454, "deleted": 0, "content": "大公司做恶，普通用户无任何反抗能力。\r\n\r\n至少，有没有任何可能的方式，来做一点反抗？\r\n比如，寻求微信/qq 之外另一种 IM ？\r\n或者寻求一些法律援助？", "content_rendered": "大公司做恶，普通用户无任何反抗能力。<br /><br />至少，有没有任何可能的方式，来做一点反抗？<br />比如，寻求微信/qq 之外另一种 IM ？<br />或者寻求一些法律援助？", "last_modified": 1692922454, "replies": 168, "id": 968150}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1650127281", "name": "share", "avatar_normal": "https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1650127281", "title": "分享发现", "url": "https://www.v2ex.com/go/share", "topics": 39359, "footer": "", "header": "分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。", "title_alternative": "Share", "avatar_mini": "https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1650127281", "stars": 5484, "aliases": [], "root": false, "id": 16, "parent_node_name": "v2ex"}, "member": {"id": 617178, "username": "onexo", "url": "https://www.v2ex.com/u/onexo", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/eef52294f713d02660b766b68b79162a?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/eef52294f713d02660b766b68b79162a?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/eef52294f713d02660b766b68b79162a?s=73&d=retro", "created": 1677935949, "last_modified": 1677935949}, "last_reply_by": "MaydayV", "last_touched": 1692950267, "title": "国内首款适配国产操作系统、自主可控的 IDE 发布", "url": "https://www.v2ex.com/t/968064", "created": 1692874419, "deleted": 0, "content": "大家赶紧去体验\r\nhttps://cecide.digitalgd.com.cn/monorepo/app-front/home\r\n ![]( https://i.imgur.com/wQIRzmZ.png)", "content_rendered": "<p>大家赶紧去体验\n<a href=\"https://cecide.digitalgd.com.cn/monorepo/app-front/home\" rel=\"nofollow\">https://cecide.digitalgd.com.cn/monorepo/app-front/home</a>\n<img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/wQIRzmZ.png\"/></p>\n", "last_modified": 1692874419, "replies": 144, "id": 968064}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1692078075", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1692078075", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 58372, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1692078075", "stars": 8555, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 527303, "username": "shuxhan", "url": "https://www.v2ex.com/u/shuxhan", "website": "https://zishu.me", "twitter": "", "psn": "", "github": "zishume", "btc": "", "location": "杭州", "tagline": "路漫漫其修远兮，吾将上下而求索！", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/d737/3168/527303_mini.png?m=1691472794", "avatar_normal": "https://cdn.v2ex.com/avatar/d737/3168/527303_normal.png?m=1691472794", "avatar_large": "https://cdn.v2ex.com/avatar/d737/3168/527303_large.png?m=1691472794", "avatar_xlarge": "https://cdn.v2ex.com/avatar/d737/3168/527303_xlarge.png?m=1691472794", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/d737/3168/527303_xlarge.png?m=1691472794", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/d737/3168/527303_xlarge.png?m=1691472794", "created": 1610001785, "last_modified": 1691472794}, "last_reply_by": "duluosheng", "last_touched": 1692950654, "title": "摸鱼又发现一个有意思的东西，国产编辑器实现弯道超车", "url": "https://www.v2ex.com/t/968207", "created": 1692931320, "deleted": 0, "content": "被曝光 [https://github.com/microsoft/vscode/issues/191229]( https://github.com/microsoft/vscode/issues/191229)  \r\n软件官网 [https://cecide.digitalgd.com.cn/monorepo/app-front/home]( https://cecide.digitalgd.com.cn/monorepo/app-front/home)  \r\nzf 公文 [http://www.gd.gov.cn/gdywdt/dsdt/content/post_4205291.html]( http://www.gd.gov.cn/gdywdt/dsdt/content/post_4205291.html)  \r\n\r\n国内首款适配国产操作系统、自主可控的集成开发环境工具 CEC-IDE\r\n\r\n![]( https://cdn.ipfsscan.io/ipfs/Qmc3Z5ACfUQRoCp8CAFFMgVgffaJSEutJ71ZWZavFBBxq6?filename=image.png)\r\n\r\n![]( https://ipfs.io/ipfs/QmaKbrFt4AvPDMZuyrZe9STuZZk4XAsGm68y3WGBdyX8Xc?filename=image.png)", "content_rendered": "<p>被曝光 <a href=\"https://github.com/microsoft/vscode/issues/191229\" rel=\"nofollow\">https://github.com/microsoft/vscode/issues/191229</a><br/>\n软件官网 <a href=\"https://cecide.digitalgd.com.cn/monorepo/app-front/home\" rel=\"nofollow\">https://cecide.digitalgd.com.cn/monorepo/app-front/home</a><br/>\nzf 公文 <a href=\"http://www.gd.gov.cn/gdywdt/dsdt/content/post_4205291.html\" rel=\"nofollow\">http://www.gd.gov.cn/gdywdt/dsdt/content/post_4205291.html</a> </p>\n<p>国内首款适配国产操作系统、自主可控的集成开发环境工具 CEC-IDE</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://cdn.ipfsscan.io/ipfs/Qmc3Z5ACfUQRoCp8CAFFMgVgffaJSEutJ71ZWZavFBBxq6?filename=image.png\"/></p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://ipfs.io/ipfs/QmaKbrFt4AvPDMZuyrZe9STuZZk4XAsGm68y3WGBdyX8Xc?filename=image.png\"/></p>\n", "last_modified": 1692931341, "replies": 98, "id": 968207}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c9f0/f895/8_large.png?m=1630643991", "name": "iphone", "avatar_normal": "https://cdn.v2ex.com/navatar/c9f0/f895/8_normal.png?m=1630643991", "title": "iPhone", "url": "https://www.v2ex.com/go/iphone", "topics": 10327, "footer": "这里绝不讨论如何获得 iPhone 盗版软件、iTunes 黑卡之类。", "header": "Say hello to the future.", "title_alternative": "iPhone", "avatar_mini": "https://cdn.v2ex.com/navatar/c9f0/f895/8_mini.png?m=1630643991", "stars": 3174, "aliases": [], "root": false, "id": 8, "parent_node_name": "apple"}, "member": {"id": 494209, "username": "CNN", "url": "https://www.v2ex.com/u/CNN", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/9d962325163a24e397ce6dac5d72dbf2?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/9d962325163a24e397ce6dac5d72dbf2?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/9d962325163a24e397ce6dac5d72dbf2?s=73&d=retro", "created": 1591791985, "last_modified": 1692414978}, "last_reply_by": "sunshengkai27", "last_touched": 1692950402, "title": "还有半个月新 iPhone 发布，手里的 14P 突然就不香了", "url": "https://www.v2ex.com/t/968177", "created": 1692928696, "deleted": 0, "content": "虽说果子每年的升级没啥亮点（或者说安卓几年前的功能果子还没有），到了临近阶段还是觉得手里的 14P 越来越不香，内心真实想法是 2024 年再发布 iPhone 15 才符合我的利益🐶", "content_rendered": "<p>虽说果子每年的升级没啥亮点（或者说安卓几年前的功能果子还没有），到了临近阶段还是觉得手里的 14P 越来越不香，内心真实想法是 2024 年再发布 iPhone 15 才符合我的利益🐶</p>\n", "last_modified": 1692928725, "replies": 73, "id": 968177}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/093f/65e0/59_large.png?m=1615956453", "name": "random", "avatar_normal": "https://cdn.v2ex.com/navatar/093f/65e0/59_normal.png?m=1615956453", "title": "随想", "url": "https://www.v2ex.com/go/random", "topics": 3591, "footer": "", "header": "有的时候，可以停下来找找灵感，然后再继续。", "title_alternative": "Random", "avatar_mini": "https://cdn.v2ex.com/navatar/093f/65e0/59_mini.png?m=1615956453", "stars": 1150, "aliases": [], "root": false, "id": 59, "parent_node_name": "v2ex"}, "member": {"id": 305331, "username": "yuhu96", "url": "https://www.v2ex.com/u/yuhu96", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/8047/3a45/305331_mini.png?m=1676552018", "avatar_normal": "https://cdn.v2ex.com/avatar/8047/3a45/305331_normal.png?m=1676552018", "avatar_large": "https://cdn.v2ex.com/avatar/8047/3a45/305331_large.png?m=1676552018", "avatar_xlarge": "https://cdn.v2ex.com/avatar/8047/3a45/305331_xlarge.png?m=1676552018", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/8047/3a45/305331_xlarge.png?m=1676552018", "created": 1522647136, "last_modified": 1676552018}, "last_reply_by": "zzzzzzZ", "last_touched": 1692950664, "title": "尴尬了，这么多年才发现阮一峰和廖雪峰不是同一个人", "url": "https://www.v2ex.com/t/968159", "created": 1692926054, "deleted": 0, "content": "当年就是看廖雪峰博客入门的 Java 。虽然他好像是做全栈的\r\n\r\n也看过很多阮一峰的博文。他也是做 JS 的。这么多年了我一直以为他们是同一个人。\r\n\r\n今天仔细比较了一下，确实不是，颠覆了我多年的认知。\r\n\r\n还有为什么全栈/前端在网络上存在感这么强？知乎里面 10 个回答计算机答案的 9 个点进去都是写 JS 的。", "content_rendered": "当年就是看廖雪峰博客入门的 Java 。虽然他好像是做全栈的<br /><br />也看过很多阮一峰的博文。他也是做 JS 的。这么多年了我一直以为他们是同一个人。<br /><br />今天仔细比较了一下，确实不是，颠覆了我多年的认知。<br /><br />还有为什么全栈/前端在网络上存在感这么强？知乎里面 10 个回答计算机答案的 9 个点进去都是写 JS 的。", "last_modified": 1692938709, "replies": 71, "id": 968159}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1692078075", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1692078075", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 58372, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1692078075", "stars": 8555, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 641741, "username": "MegatronKing", "url": "https://www.v2ex.com/u/MegatronKing", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/68e9/4aa3/641741_mini.png?m=1692866120", "avatar_normal": "https://cdn.v2ex.com/avatar/68e9/4aa3/641741_normal.png?m=1692866120", "avatar_large": "https://cdn.v2ex.com/avatar/68e9/4aa3/641741_large.png?m=1692866120", "avatar_xlarge": "https://cdn.v2ex.com/avatar/68e9/4aa3/641741_xlarge.png?m=1692866120", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/68e9/4aa3/641741_xlarge.png?m=1692866120", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/68e9/4aa3/641741_xlarge.png?m=1692866120", "created": 1691076204, "last_modified": 1692866120}, "last_reply_by": "MegatronKing", "last_touched": 1692945460, "title": "新一代国产 API 抓包调试工具 Reqable", "url": "https://www.v2ex.com/t/968017", "created": 1692866234, "deleted": 0, "content": "[Reqable]( https://reqable.com/)是一款跨平台的专业 HTTP 开发和调试工具，在全平台支持 HTTP1 、HTTP2 和 HTTP3(QUIC)协议，简单易用、功能强大、性能高效，助力程序开发和测试人员提高生产力！\r\n\r\n# 1. 介绍\r\n\r\nReqable 的特点是简洁美观，基本功能免费，无需登录，安装即用。\r\n\r\n*   20M 左右的安装包体积。\r\n*   跨平台，基于 Flutter 和 C++开发。\r\n*   支持亮色和暗色两种主题模式。\r\n*   支持 11 种不同的强调色。\r\n*   支持 Atom One 主题代码高亮配色。\r\n\r\n![screenshot\\_zh\\_01.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d304a1adeb76485cb0651450708ae3cf~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\nReqable 桌面端支持 Windows/Mac/Linux 三大主流平台，具备抓包调试和 API 测试两大基本功能，可以将其看成是 Fiddler/Charles + Postman 。\r\n\r\nReqable 打通了 API 调试和测试之间的壁垒，例如可以从抓包数据中创建 API 进行测试，也可以在 API 测试时进行流量抓包分析。\r\n\r\n*   [x] 支持 HTTP/1.x, HTTP2 协议版本，HTTP3(QUIC)暂不支持。\r\n*   [x] 支持 HTTP/HTTPS/Socks4/Socks4a/Socks5 代理方式。\r\n*   [x] 支持 HTTPS ，TLSv1.1 、TLSv1.2 和 TLSv1.3 加密协议。\r\n*   [x] 支持基于 HTTP1 升级的 WebSocket 协议。\r\n*   [x] 支持 HTTP/HTTPS 二级代理（调试境外流量）。\r\n*   [x] 搜索筛选：提供书签、域名、快捷筛选栏和多条件等高级搜索方式。\r\n*   [x] 网关功能：对指定请求或响应进行屏蔽，挂起等操作。\r\n*   [x] 重写功能：预设规则对指定请求或响应进行重定向、替换或者修改。\r\n*   [x] 断点功能：对请求或响应进行实时断点操作，比如屏蔽，挂起或修改替换数据等。\r\n*   [x] 脚本功能：支持编写 Python 脚本处理实时请求或响应。\r\n*   [x] 镜像功能：对指定域名和端口配置镜像映射。\r\n*   [x] 测试联动：支持从调试列表创建 API 进行测试。\r\n*   [x] 历史记录：自动保存抓包的流量数据，方便回溯查看。\r\n*   [x] 重发回放：支持单个或多个请求进行回放测试。\r\n*   [x] 自动高亮：支持设定自定义规则对请求进行多种颜色高亮。\r\n*   [x] HAR 支持：自动关联 HAR 格式文件，并支持 HAR 导出和导入。\r\n\r\n# 2. 安装证书\r\n\r\nReqable 使用经典的中间人（ MITM ）技术分析 HTTPS 流量，当客户端与 Reqable 的代理服务器（下文简称`中间人`）进行通信时，中间人需要重签远程服务器的 SSL 证书。为了保证客户端与中间人成功进行 SSL 握手通信，需要将中间人的根证书（下文简称`CA 根证书`）安装到客户端本地的证书管理中心。\r\n\r\n如果目标客户端是 PC 应用程序，CA 根证书需要安装到 PC 的证书管理中心；如果目标客户端是移动端 App 应用程序，CA 根证书则需要安装到手机的证书管理中心。如果没有流量分析的需求，可以忽略这一步。\r\n\r\n> Reqable 会为每个用户自动生成完全不同的 CA 根证书，并使用随机的证书密钥，所以不必担心此证书会被第三方利用。\r\n\r\n### 2.1 桌面端安装\r\n\r\n不同的桌面端平台（这里主要是 Windows/MacOS/Linux ），证书安装方式有所不同，为了简化安装过程，Reqable 提供了一键安装证书的功能。\r\n\r\n证书的安装入口位于顶部操作栏，点击`盾牌`图标打开弹窗。\r\n\r\n![installation\\_01.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5776e68dd81d47dcb8145cb95a6d0bdc~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n直接点击`现在安装`：\r\n\r\n![installation\\_02.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bc0af89cb2646198f07446250342b42~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n点击后系统会弹出确认弹窗或者输入账户密码进行授权，按照提示操作确认即可。不出意外的话，证书会自动安装成功；如果自动安装失败，可以切换到`手动安装`的 Tab 按照步骤手动安装。\r\n\r\n![installation\\_03.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b84b5345652842c2aa4104e06d2ae83d~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n注意，在 Linux 设备上 Chrome 和 Firefox 浏览器有内置的证书管理系统，还需要将 CA 根证书安装到浏览器的证书管理系统中，请按照 Reqable 内的提示进行操作。\r\n\r\n> CA 根证书未安装或安装失败时，盾牌图标显示为黄色；安装成功后，盾牌图标显示为绿色。\r\n\r\n### 2.2 移动端安装\r\n\r\n如果有分析移动端应用的需求，必须在移动端安装 CA 根证书。Reqable 中内置了 Android 和 iOS 证书安装的指引，请切换到`Android`和`iOS`的 Tab 按照步骤进行安装。\r\n\r\n![installation\\_04.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ab69c18e6d842979cf57908d596ba86~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n> 由于 Android 7.0 起不再信任用户证书，需要将 CA 根证书安装到系统证书目录，这要求能够 Root 设备并解锁 System 分区。\r\n\r\n# 3. 分析流量\r\n\r\n在 API 调试中，获取流量是第一步也是最基本的操作，这里讲解下如何使用 Reqable 获取流量，通俗地讲就是抓包。\r\n\r\n首先，需要启用 Reqable 的调试功能，点击最右上角的`启动`按钮进入调试状态。在调试状态下，任何 HTTP 请求经过 Reqable 的 MITM 代理服务器都会显示到界面上。\r\n\r\n为了保证流量经过 Reqable 的 MITM 代理服务器并信任 Reqable 的 CA 根证书，请检查下面两项：\r\n\r\n- 系统代理状态\r\n\r\n如果系统代理已经设置，网络图标是绿色；如果系统代理未设置，网络图标是黄色，点击网络图标可以自动设置系统代理。\r\n\r\n- CA 根证书状态\r\n\r\n如果 CA 根证书安装成功，盾牌图标是绿色；如果 CA 根证书未安装成功，网络图标是黄色，点击盾牌图标可以进入 CA 根证书安装界面，详细步骤请阅读上一节。\r\n\r\n一切就绪后，我们可以看到如下的界面：\r\n\r\n![traffic_01.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ece60b0ebacd41a0adbff7c678263ecf~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n打开浏览器，输入地址 `https://reqable.com` 并回车，这里演示使用的是 Chrome 浏览器。回到 Reqable ，调试列表中已经捕获到了该网站的全部请求数据。\r\n\r\n![traffic_02.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf601e3a48c6402d984d5df2890ffc70~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n我们可以选择一个图片请求，双击打开详情面板，能够看到该请求的详细信息。注意，再次双击该请求，可以关闭详情面板。\r\n\r\n![traffic_03.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2275849b2794e9180b3aafda550ac65~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n点击侧边栏的`工作台`图标，打开调试列表的工作面板。然后展开`reqable.com`此域名的结构树，可以查看该域名下所有请求的目录结构，点击选择可以查看该请求的详情。\r\n\r\n\r\n![traffic_04.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8b68fefa7944d85a28d5c8253768e9c~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n> 点击最右上角垃圾篓图标（快捷键 Control + Shift + R ）可以清空列表。\r\n\r\n这里，我们已经完成了获取流量最基本的操作了。\r\n\r\n# 4. 开始调试\r\n\r\n捕获到流量之后，开始使用调试功能进行数据模拟等各种测试。Reqable 提供了非常强大的调试功能，主要有重写、断点和脚本功能，下面分别来进行介绍。\r\n\r\n### 4.1 重写\r\n\r\n重写是 Reqable 的核心调试功能之一，通过预设规则自动修改请求或者响应。重写功能可以通过四种方式启用或关闭：\r\n- 直接点击重写图标\r\n- 右键重写图标 -> 启用/禁用\r\n- 托盘 -> 重写 -> 启用/禁用\r\n- 快捷键 Shift + Control + K\r\n\r\n当重写功能开启后，快捷操作栏（ Quickbar ）上的重写图标将变为绿色激活状态。\r\n\r\n![rewrite_01.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b81fc5d474c242c6851f46056f091745~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\nReqable 的重写支持下面 5 种模式。\r\n\r\n##### 4.1.1 重定向\r\n \r\n重写重定向提供了非常细粒度的重定向操作，例如一个客户端请求 A：`https://hello.com/foo`，可以重定向为返回请求 B：`https://world.com/bar` 的结果。\r\n\r\n![rewrite_12.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/486c69c75642462ebcb80e0a32d44c0d~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n##### 4.1.2 替换请求\r\n\r\n表示整体替换请求数据，支持替换的部分包括：请求方法、请求路径、请求头和请求体。从流量列表创建重写-替换请求规则，可以自动带入原始请求数据，我们可以在其他基础上进行修改。替换的时候，也可以选择一个本地文件进行替换。\r\n\r\n![rewrite_05.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48fd1dec1fbb4cb692ac43a5174d38e0~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n##### 4.1.3 修改请求\r\n\r\n相比于`替换请求`，修改请求提供了更加细致化的修改策略。例如删除查询参数，修改请求头中的某一项，正则替换请求体的内容，适合动态修改。\r\n\r\n![rewrite_09.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc2eb167b45d46098aeafeba58cf8e87~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n##### 4.1.4 替换响应\r\n\r\n基本操作同上面`替换请求`。\r\n\r\n##### 4.1.5 修改响应\r\n\r\n基本操作同上面`修改请求`。\r\n\r\n### 4.2 断点\r\n\r\n断点是 Reqable 的核心调试功能之一，通过设定匹配规则，触发断点后实时控制和修改请求和响应。断点功能可以通过四种方式启用或关闭：\r\n- 直接点击断点图标\r\n- 右键断点图标 -> 启用/禁用\r\n- 托盘 -> 断点 -> 启用/禁用\r\n- 快捷键 Shift + Control + B\r\n\r\n当断点功能开启后，快捷操作栏（ Quickbar ）上的断点图标将变为绿色激活状态。\r\n\r\n![breakpoint_01.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1825ae17be1a46e8ac8fdb10171febb4~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n接下来新建一个断点规则：\r\n\r\n![breakpoint_02.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5f26e5fe74b47c6adb4858d4d36a0a2~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n输入规则名称和匹配的 URL ，URL 支持简单的 Wildcard * 和 ? 匹配。完成后，当请求或响应发生时，便可以进入断点操作界面。\r\n\r\n![breakpoint_03.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2d007a0cb6a473687edead32e2864cc~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n我们可以在这个页面上，修改数据然后提交。\r\n\r\n> 每个断点请求（响应）有**180s**的时间进行操作，超时后断点会自动失效，暂停住的请求和响应会继续。\r\n\r\n### 4.3 脚本\r\n\r\n脚本是 Reqable 的核心调试功能之一，支持编写 python 脚本处理 HTTP 请求和响应。Reqable 提供了一套基于 Python 的 API ，在脚本中，我们可以对请求和响应的数据进行修改、替换或者删除，甚至还可以中断请求和响应。除了使用 Reqable 内置的 API ，用户还可以使用自己安装的各种 Python 包，例如 requests 等。\r\n\r\n脚本功能可以通过四种方式启用或关闭：\r\n- 直接点击脚本图标\r\n- 右键脚本图标 -> 启用/禁用\r\n- 托盘 -> 脚本 -> 启用/禁用\r\n- 快捷键 Shift + Control + P\r\n\r\n当脚本功能开启后，快捷操作栏（ Quickbar ）上的脚本图标将变为绿色激活状态。\r\n\r\n![script_01.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c7c01ddc86e41418ab1c7152e6b85c5~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n脚本使用 python3 运行，必须使用 python3 的语法。脚本提供两个函数调用入口：`onRequest`和`onResponse`，顾名思义即请求和响应。\r\n\r\n![script_02.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c55c9e2d12284769b26945d527a04df7~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n脚本修改后会自动保存，也可以手动使用快捷键 Control + S 立即保存。\r\n\r\n下面是脚本的功能代码示例：\r\n```python\r\ndef onRequest(context, request):\r\n  # 打印请求方法，例如：POST\r\n  print(request.method)\r\n  # 打印请求路径，例如：/foo\r\n  print(request.path)\r\n  # 打印请求参数列表，例如：[('foo', 'bar'), ('hello', 'world')]\r\n  print(request.queries)\r\n  # 打印请求头列表，例如：['host: reqable.com', 'content-length: 6', 'content-type: text/plain']\r\n  print(request.headers)\r\n  # 打印请求体，例如 {\"foo\":\"bar\"}\r\n  print(request.body)\r\n\r\n  # 修改请求方法\r\n  request.method = 'GET'\r\n  # 修改请求路径\r\n  request.path = '/bar'\r\n\r\n  # 修改请求参数，更多 API 请参考下文`CaptureHttpQueries`\r\n  request.queries['foo'] = 'bar'\r\n  # 直接赋值请求参数\r\n  request.queries = 'foo=bar&hello=world&abc=123'\r\n  request.queries = {\r\n    'foo': 'bar',\r\n    'hello': 'world',\r\n    'abc': '123'\r\n  }\r\n  # 删除指定请求参数\r\n  request.queries.remove('foo')\r\n\r\n  # 修改请求头，更多 API 请参考下文`CaptureHttpHeaders`\r\n  request.headers['content-type'] = 'application/json'\r\n  # 直接赋值请求头\r\n  request.headers = [\r\n    'content-type: application/json',\r\n    'foo: bar'\r\n  ]\r\n  # 删除指定请求头\r\n  request.headers.remove('foo')\r\n\r\n  # 将文本设置给 Body\r\n  request.body = 'Hello World'\r\n  # 将字典设置给 Body ，会自动转成 JSON\r\n  request.body = {\r\n    'foo': 'bar',\r\n    'abc': 123\r\n  }\r\n  # 将二进制数据设置给 Body\r\n  request.body = b'\\x01\\x02\\x03\\x04'\r\n  # 将本地文件设置给 Body\r\n  request.body.file('/User/Reqable/Desktop/test.png')\r\n\r\n  # JSON 类型的 Body 转成字典\r\n  request.body.jsonify()\r\n  # 然后操作字典来修改 Body\r\n  request.body['foo'] = 'bar'\r\n  request.body['error'] = {\r\n    'code': 1000,\r\n    'message': 'Runtime Error'\r\n  }\r\n\r\n  # Done\r\n  return request\r\n```\r\n更多的脚本 API 可以参考文档： https://reqable.com/zh-CN/docs/capture/addons\r\n\r\n# 5. API 测试\r\n\r\nAPI 测试是 Reqable 的两大基本功能之一，帮助开发者调试接口 API 。Reqable 目前支持 HTTP1.1 、HTTP2 和 HTTP3 （ QUIC ）协议，核心网络库采用的是[Cronet]( https://chromium.googlesource.com/chromium/src/+/master/components/cronet/)，业内技术最领先的 HTTP 网络请求框架。\r\n\r\n- [x] 支持 HTTP/1.1, HTTP2 和 HTTP3(QUIC)协议。\r\n- [x] 多个会话：支持创建多个 Tab 进行 API 测试。\r\n- [x] 批量编辑：支持批量编辑请求参数、请求头、表单等。\r\n- [x] 授权设置：支持 API KEY 、Basic Auth 和 Bearer Token 等授权方式。\r\n- [x] 代理设置：支持自定义代理配置，系统代理和调试代理等。\r\n- [x] 性能测试：可以查看请求在不同环节的耗时数据。\r\n- [x] Cookie 管理：自动保存 Cookie 或在请求头中自动加入关联的 Cookie 。\r\n- [x] 历史记录：自动保存发送的请求和响应数据，方便回溯查看。\r\n- [x] cURL 支持：可以导入和导出 cURL 。\r\n- [x] 代码生成：支持 java/python/go/javascript/kotlin 等主流网络框架代码生成。\r\n\r\n![screenshot_zh_02.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91002ad9507446828e064617671a7178~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\nReqable 支持将 API 请求收藏到集合中，并可以随时打开编辑。同时，Reqable 还支持导入 Postman 等格式的 API 集合，并且可以将调试列表中的 API 保存到集合。\r\n\r\n![collection_04.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b62003a45934cd6980399948a51b102~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n# 6. 结尾\r\n\r\nReqable 还提供了非常多实用的功能，包括 API 测试、重发回放、代码生成等，最关键的是 Reqable 是可以免费使用的，下载即用，无需注册无需登录。\r\n\r\n- 官网： https://reqable.com\r\n- Github: https://github.com/reqable/reqable-app\r\n\r\n欢迎大家支持！", "content_rendered": "<p><a href=\"https://reqable.com/\" rel=\"nofollow\">Reqable</a>是一款跨平台的专业 HTTP 开发和调试工具，在全平台支持 HTTP1 、HTTP2 和 HTTP3(QUIC)协议，简单易用、功能强大、性能高效，助力程序开发和测试人员提高生产力！</p>\n<h1>1. 介绍</h1>\n<p>Reqable 的特点是简洁美观，基本功能免费，无需登录，安装即用。</p>\n<ul>\n<li>20M 左右的安装包体积。</li>\n<li>跨平台，基于 Flutter 和 C++开发。</li>\n<li>支持亮色和暗色两种主题模式。</li>\n<li>支持 11 种不同的强调色。</li>\n<li>支持 Atom One 主题代码高亮配色。</li>\n</ul>\n<p><img alt=\"screenshot_zh_01.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d304a1adeb76485cb0651450708ae3cf%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>Reqable 桌面端支持 Windows/Mac/Linux 三大主流平台，具备抓包调试和 API 测试两大基本功能，可以将其看成是 Fiddler/Charles + Postman 。</p>\n<p>Reqable 打通了 API 调试和测试之间的壁垒，例如可以从抓包数据中创建 API 进行测试，也可以在 API 测试时进行流量抓包分析。</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"/> 支持 HTTP/1.x, HTTP2 协议版本，HTTP3(QUIC)暂不支持。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 支持 HTTP/HTTPS/Socks4/Socks4a/Socks5 代理方式。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 支持 HTTPS ，TLSv1.1 、TLSv1.2 和 TLSv1.3 加密协议。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 支持基于 HTTP1 升级的 WebSocket 协议。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 支持 HTTP/HTTPS 二级代理（调试境外流量）。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 搜索筛选：提供书签、域名、快捷筛选栏和多条件等高级搜索方式。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 网关功能：对指定请求或响应进行屏蔽，挂起等操作。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 重写功能：预设规则对指定请求或响应进行重定向、替换或者修改。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 断点功能：对请求或响应进行实时断点操作，比如屏蔽，挂起或修改替换数据等。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 脚本功能：支持编写 Python 脚本处理实时请求或响应。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 镜像功能：对指定域名和端口配置镜像映射。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 测试联动：支持从调试列表创建 API 进行测试。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 历史记录：自动保存抓包的流量数据，方便回溯查看。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 重发回放：支持单个或多个请求进行回放测试。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 自动高亮：支持设定自定义规则对请求进行多种颜色高亮。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> HAR 支持：自动关联 HAR 格式文件，并支持 HAR 导出和导入。</li>\n</ul>\n<h1>2. 安装证书</h1>\n<p>Reqable 使用经典的中间人（ MITM ）技术分析 HTTPS 流量，当客户端与 Reqable 的代理服务器（下文简称<code>中间人</code>）进行通信时，中间人需要重签远程服务器的 SSL 证书。为了保证客户端与中间人成功进行 SSL 握手通信，需要将中间人的根证书（下文简称<code>CA 根证书</code>）安装到客户端本地的证书管理中心。</p>\n<p>如果目标客户端是 PC 应用程序，CA 根证书需要安装到 PC 的证书管理中心；如果目标客户端是移动端 App 应用程序，CA 根证书则需要安装到手机的证书管理中心。如果没有流量分析的需求，可以忽略这一步。</p>\n<blockquote>\n<p>Reqable 会为每个用户自动生成完全不同的 CA 根证书，并使用随机的证书密钥，所以不必担心此证书会被第三方利用。</p>\n</blockquote>\n<h3>2.1 桌面端安装</h3>\n<p>不同的桌面端平台（这里主要是 Windows/MacOS/Linux ），证书安装方式有所不同，为了简化安装过程，Reqable 提供了一键安装证书的功能。</p>\n<p>证书的安装入口位于顶部操作栏，点击<code>盾牌</code>图标打开弹窗。</p>\n<p><img alt=\"installation_01.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5776e68dd81d47dcb8145cb95a6d0bdc%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>直接点击<code>现在安装</code>：</p>\n<p><img alt=\"installation_02.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bc0af89cb2646198f07446250342b42%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>点击后系统会弹出确认弹窗或者输入账户密码进行授权，按照提示操作确认即可。不出意外的话，证书会自动安装成功；如果自动安装失败，可以切换到<code>手动安装</code>的 Tab 按照步骤手动安装。</p>\n<p><img alt=\"installation_03.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b84b5345652842c2aa4104e06d2ae83d%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>注意，在 Linux 设备上 Chrome 和 Firefox 浏览器有内置的证书管理系统，还需要将 CA 根证书安装到浏览器的证书管理系统中，请按照 Reqable 内的提示进行操作。</p>\n<blockquote>\n<p>CA 根证书未安装或安装失败时，盾牌图标显示为黄色；安装成功后，盾牌图标显示为绿色。</p>\n</blockquote>\n<h3>2.2 移动端安装</h3>\n<p>如果有分析移动端应用的需求，必须在移动端安装 CA 根证书。Reqable 中内置了 Android 和 iOS 证书安装的指引，请切换到<code>Android</code>和<code>iOS</code>的 Tab 按照步骤进行安装。</p>\n<p><img alt=\"installation_04.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ab69c18e6d842979cf57908d596ba86%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<blockquote>\n<p>由于 Android 7.0 起不再信任用户证书，需要将 CA 根证书安装到系统证书目录，这要求能够 Root 设备并解锁 System 分区。</p>\n</blockquote>\n<h1>3. 分析流量</h1>\n<p>在 API 调试中，获取流量是第一步也是最基本的操作，这里讲解下如何使用 Reqable 获取流量，通俗地讲就是抓包。</p>\n<p>首先，需要启用 Reqable 的调试功能，点击最右上角的<code>启动</code>按钮进入调试状态。在调试状态下，任何 HTTP 请求经过 Reqable 的 MITM 代理服务器都会显示到界面上。</p>\n<p>为了保证流量经过 Reqable 的 MITM 代理服务器并信任 Reqable 的 CA 根证书，请检查下面两项：</p>\n<ul>\n<li>系统代理状态</li>\n</ul>\n<p>如果系统代理已经设置，网络图标是绿色；如果系统代理未设置，网络图标是黄色，点击网络图标可以自动设置系统代理。</p>\n<ul>\n<li>CA 根证书状态</li>\n</ul>\n<p>如果 CA 根证书安装成功，盾牌图标是绿色；如果 CA 根证书未安装成功，网络图标是黄色，点击盾牌图标可以进入 CA 根证书安装界面，详细步骤请阅读上一节。</p>\n<p>一切就绪后，我们可以看到如下的界面：</p>\n<p><img alt=\"traffic_01.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ece60b0ebacd41a0adbff7c678263ecf%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>打开浏览器，输入地址 <code><a href=\"https://reqable.com\" rel=\"nofollow\">https://reqable.com</a></code> 并回车，这里演示使用的是 Chrome 浏览器。回到 Reqable ，调试列表中已经捕获到了该网站的全部请求数据。</p>\n<p><img alt=\"traffic_02.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf601e3a48c6402d984d5df2890ffc70%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>我们可以选择一个图片请求，双击打开详情面板，能够看到该请求的详细信息。注意，再次双击该请求，可以关闭详情面板。</p>\n<p><img alt=\"traffic_03.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2275849b2794e9180b3aafda550ac65%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>点击侧边栏的<code>工作台</code>图标，打开调试列表的工作面板。然后展开<code><a href=\"http://reqable.com\" rel=\"nofollow\">reqable.com</a></code>此域名的结构树，可以查看该域名下所有请求的目录结构，点击选择可以查看该请求的详情。</p>\n<p><img alt=\"traffic_04.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8b68fefa7944d85a28d5c8253768e9c%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<blockquote>\n<p>点击最右上角垃圾篓图标（快捷键 Control + Shift + R ）可以清空列表。</p>\n</blockquote>\n<p>这里，我们已经完成了获取流量最基本的操作了。</p>\n<h1>4. 开始调试</h1>\n<p>捕获到流量之后，开始使用调试功能进行数据模拟等各种测试。Reqable 提供了非常强大的调试功能，主要有重写、断点和脚本功能，下面分别来进行介绍。</p>\n<h3>4.1 重写</h3>\n<p>重写是 Reqable 的核心调试功能之一，通过预设规则自动修改请求或者响应。重写功能可以通过四种方式启用或关闭：</p>\n<ul>\n<li>直接点击重写图标</li>\n<li>右键重写图标 -&gt; 启用/禁用</li>\n<li>托盘 -&gt; 重写 -&gt; 启用/禁用</li>\n<li>快捷键 Shift + Control + K</li>\n</ul>\n<p>当重写功能开启后，快捷操作栏（ Quickbar ）上的重写图标将变为绿色激活状态。</p>\n<p><img alt=\"rewrite_01.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b81fc5d474c242c6851f46056f091745%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>Reqable 的重写支持下面 5 种模式。</p>\n<h5>4.1.1 重定向</h5>\n<p>重写重定向提供了非常细粒度的重定向操作，例如一个客户端请求 A：<code><a href=\"https://hello.com/foo\" rel=\"nofollow\">https://hello.com/foo</a></code>，可以重定向为返回请求 B：<code><a href=\"https://world.com/bar\" rel=\"nofollow\">https://world.com/bar</a></code> 的结果。</p>\n<p><img alt=\"rewrite_12.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/486c69c75642462ebcb80e0a32d44c0d%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h5>4.1.2 替换请求</h5>\n<p>表示整体替换请求数据，支持替换的部分包括：请求方法、请求路径、请求头和请求体。从流量列表创建重写-替换请求规则，可以自动带入原始请求数据，我们可以在其他基础上进行修改。替换的时候，也可以选择一个本地文件进行替换。</p>\n<p><img alt=\"rewrite_05.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48fd1dec1fbb4cb692ac43a5174d38e0%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h5>4.1.3 修改请求</h5>\n<p>相比于<code>替换请求</code>，修改请求提供了更加细致化的修改策略。例如删除查询参数，修改请求头中的某一项，正则替换请求体的内容，适合动态修改。</p>\n<p><img alt=\"rewrite_09.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc2eb167b45d46098aeafeba58cf8e87%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h5>4.1.4 替换响应</h5>\n<p>基本操作同上面<code>替换请求</code>。</p>\n<h5>4.1.5 修改响应</h5>\n<p>基本操作同上面<code>修改请求</code>。</p>\n<h3>4.2 断点</h3>\n<p>断点是 Reqable 的核心调试功能之一，通过设定匹配规则，触发断点后实时控制和修改请求和响应。断点功能可以通过四种方式启用或关闭：</p>\n<ul>\n<li>直接点击断点图标</li>\n<li>右键断点图标 -&gt; 启用/禁用</li>\n<li>托盘 -&gt; 断点 -&gt; 启用/禁用</li>\n<li>快捷键 Shift + Control + B</li>\n</ul>\n<p>当断点功能开启后，快捷操作栏（ Quickbar ）上的断点图标将变为绿色激活状态。</p>\n<p><img alt=\"breakpoint_01.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1825ae17be1a46e8ac8fdb10171febb4%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>接下来新建一个断点规则：</p>\n<p><img alt=\"breakpoint_02.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5f26e5fe74b47c6adb4858d4d36a0a2%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>输入规则名称和匹配的 URL ，URL 支持简单的 Wildcard * 和 ? 匹配。完成后，当请求或响应发生时，便可以进入断点操作界面。</p>\n<p><img alt=\"breakpoint_03.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2d007a0cb6a473687edead32e2864cc%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>我们可以在这个页面上，修改数据然后提交。</p>\n<blockquote>\n<p>每个断点请求（响应）有<strong>180s</strong>的时间进行操作，超时后断点会自动失效，暂停住的请求和响应会继续。</p>\n</blockquote>\n<h3>4.3 脚本</h3>\n<p>脚本是 Reqable 的核心调试功能之一，支持编写 python 脚本处理 HTTP 请求和响应。Reqable 提供了一套基于 Python 的 API ，在脚本中，我们可以对请求和响应的数据进行修改、替换或者删除，甚至还可以中断请求和响应。除了使用 Reqable 内置的 API ，用户还可以使用自己安装的各种 Python 包，例如 requests 等。</p>\n<p>脚本功能可以通过四种方式启用或关闭：</p>\n<ul>\n<li>直接点击脚本图标</li>\n<li>右键脚本图标 -&gt; 启用/禁用</li>\n<li>托盘 -&gt; 脚本 -&gt; 启用/禁用</li>\n<li>快捷键 Shift + Control + P</li>\n</ul>\n<p>当脚本功能开启后，快捷操作栏（ Quickbar ）上的脚本图标将变为绿色激活状态。</p>\n<p><img alt=\"script_01.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c7c01ddc86e41418ab1c7152e6b85c5%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>脚本使用 python3 运行，必须使用 python3 的语法。脚本提供两个函数调用入口：<code>onRequest</code>和<code>onResponse</code>，顾名思义即请求和响应。</p>\n<p><img alt=\"script_02.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c55c9e2d12284769b26945d527a04df7%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>脚本修改后会自动保存，也可以手动使用快捷键 Control + S 立即保存。</p>\n<p>下面是脚本的功能代码示例：</p>\n<pre><code class=\"language-python\">def onRequest(context, request):\n  # 打印请求方法，例如：POST\n  print(request.method)\n  # 打印请求路径，例如：/foo\n  print(request.path)\n  # 打印请求参数列表，例如：[('foo', 'bar'), ('hello', 'world')]\n  print(request.queries)\n  # 打印请求头列表，例如：['host: reqable.com', 'content-length: 6', 'content-type: text/plain']\n  print(request.headers)\n  # 打印请求体，例如 {\"foo\":\"bar\"}\n  print(request.body)\n\n  # 修改请求方法\n  request.method = 'GET'\n  # 修改请求路径\n  request.path = '/bar'\n\n  # 修改请求参数，更多 API 请参考下文`CaptureHttpQueries`\n  request.queries['foo'] = 'bar'\n  # 直接赋值请求参数\n  request.queries = 'foo=bar&amp;hello=world&amp;abc=123'\n  request.queries = {\n    'foo': 'bar',\n    'hello': 'world',\n    'abc': '123'\n  }\n  # 删除指定请求参数\n  request.queries.remove('foo')\n\n  # 修改请求头，更多 API 请参考下文`CaptureHttpHeaders`\n  request.headers['content-type'] = 'application/json'\n  # 直接赋值请求头\n  request.headers = [\n    'content-type: application/json',\n    'foo: bar'\n  ]\n  # 删除指定请求头\n  request.headers.remove('foo')\n\n  # 将文本设置给 Body\n  request.body = 'Hello World'\n  # 将字典设置给 Body ，会自动转成 JSON\n  request.body = {\n    'foo': 'bar',\n    'abc': 123\n  }\n  # 将二进制数据设置给 Body\n  request.body = b'\\x01\\x02\\x03\\x04'\n  # 将本地文件设置给 Body\n  request.body.file('/User/Reqable/Desktop/test.png')\n\n  # JSON 类型的 Body 转成字典\n  request.body.jsonify()\n  # 然后操作字典来修改 Body\n  request.body['foo'] = 'bar'\n  request.body['error'] = {\n    'code': 1000,\n    'message': 'Runtime Error'\n  }\n\n  # Done\n  return request\n</code></pre>\n<p>更多的脚本 API 可以参考文档： <a href=\"https://reqable.com/zh-CN/docs/capture/addons\" rel=\"nofollow\">https://reqable.com/zh-CN/docs/capture/addons</a></p>\n<h1>5. API 测试</h1>\n<p>API 测试是 Reqable 的两大基本功能之一，帮助开发者调试接口 API 。Reqable 目前支持 HTTP1.1 、HTTP2 和 HTTP3 （ QUIC ）协议，核心网络库采用的是<a href=\"https://chromium.googlesource.com/chromium/src/+/master/components/cronet/\" rel=\"nofollow\">Cronet</a>，业内技术最领先的 HTTP 网络请求框架。</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"/> 支持 HTTP/1.1, HTTP2 和 HTTP3(QUIC)协议。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 多个会话：支持创建多个 Tab 进行 API 测试。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 批量编辑：支持批量编辑请求参数、请求头、表单等。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 授权设置：支持 API KEY 、Basic Auth 和 Bearer Token 等授权方式。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 代理设置：支持自定义代理配置，系统代理和调试代理等。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 性能测试：可以查看请求在不同环节的耗时数据。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> Cookie 管理：自动保存 Cookie 或在请求头中自动加入关联的 Cookie 。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 历史记录：自动保存发送的请求和响应数据，方便回溯查看。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> cURL 支持：可以导入和导出 cURL 。</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 代码生成：支持 java/python/go/javascript/kotlin 等主流网络框架代码生成。</li>\n</ul>\n<p><img alt=\"screenshot_zh_02.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91002ad9507446828e064617671a7178%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>Reqable 支持将 API 请求收藏到集合中，并可以随时打开编辑。同时，Reqable 还支持导入 Postman 等格式的 API 集合，并且可以将调试列表中的 API 保存到集合。</p>\n<p><img alt=\"collection_04.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b62003a45934cd6980399948a51b102%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h1>6. 结尾</h1>\n<p>Reqable 还提供了非常多实用的功能，包括 API 测试、重发回放、代码生成等，最关键的是 Reqable 是可以免费使用的，下载即用，无需注册无需登录。</p>\n<ul>\n<li>官网： <a href=\"https://reqable.com\" rel=\"nofollow\">https://reqable.com</a></li>\n<li>Github: <a href=\"https://github.com/reqable/reqable-app\" rel=\"nofollow\">https://github.com/reqable/reqable-app</a></li>\n</ul>\n<p>欢迎大家支持！</p>\n", "last_modified": 1692866234, "replies": 60, "id": 968017}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/a4f2/3670/260_large.png?m=1650095354", "name": "security", "avatar_normal": "https://cdn.v2ex.com/navatar/a4f2/3670/260_normal.png?m=1650095354", "title": "信息安全", "url": "https://www.v2ex.com/go/security", "topics": 1522, "footer": "", "header": "我们都希望自己管理的计算机系统在运转过程中不要遇到任何安全事件。只是，这个不完美的世界的现实告诉我们：学无止境。", "title_alternative": "Security", "avatar_mini": "https://cdn.v2ex.com/navatar/a4f2/3670/260_mini.png?m=1650095354", "stars": 1735, "aliases": [], "root": false, "id": 260, "parent_node_name": "geek"}, "member": {"id": 427688, "username": "heyenyan", "url": "https://www.v2ex.com/u/heyenyan", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/5448/5873/427688_mini.png?m=1692921443", "avatar_normal": "https://cdn.v2ex.com/avatar/5448/5873/427688_normal.png?m=1692921443", "avatar_large": "https://cdn.v2ex.com/avatar/5448/5873/427688_large.png?m=1692921443", "created": 1562550808, "last_modified": 1692921443}, "last_reply_by": "Huelse", "last_touched": 1692949031, "title": "小红书、抖音时如何精准拿到我的微信好友关系的？", "url": "https://www.v2ex.com/t/968144", "created": 1692921678, "deleted": 0, "content": "最近发现在小红书、抖音的好友推介里开始**频繁的推介我的微信好友**，  \r\n甚至是只存在一个两个**共同群聊的群友！**  \r\n\r\niOS 16.6 最新版，微信、小红书、抖音都打开了限制跟踪。\r\n\r\n有谁能想到抖音、小红书是如何做到的吗？腾讯总不能和他们共享用户数据吧", "content_rendered": "<p>最近发现在小红书、抖音的好友推介里开始<strong>频繁的推介我的微信好友</strong>，<br/>\n甚至是只存在一个两个<strong>共同群聊的群友！</strong> </p>\n<p>iOS 16.6 最新版，微信、小红书、抖音都打开了限制跟踪。</p>\n<p>有谁能想到抖音、小红书是如何做到的吗？腾讯总不能和他们共享用户数据吧</p>\n", "last_modified": 1692921678, "replies": 56, "id": 968144}]