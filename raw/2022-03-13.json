[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1628872984", "name": "share", "avatar_normal": "https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1628872984", "title": "分享发现", "url": "https://www.v2ex.com/go/share", "topics": 35151, "footer": "", "header": "分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。", "title_alternative": "Share", "avatar_mini": "https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1628872984", "stars": 4751, "aliases": [], "root": false, "id": 16, "parent_node_name": "v2ex"}, "member": {"id": 68290, "username": "hing", "url": "https://www.v2ex.com/u/hing", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/d216/826c/68290_mini.png?m=1639639682", "avatar_normal": "https://cdn.v2ex.com/avatar/d216/826c/68290_normal.png?m=1639639682", "avatar_large": "https://cdn.v2ex.com/avatar/d216/826c/68290_large.png?m=1639639682", "created": 1405614803, "last_modified": 1639639682}, "last_reply_by": "zhou00", "last_touched": 1647168881, "title": "语雀免费领取 1-4 年会员（必领 1 年）", "url": "https://www.v2ex.com/t/839992", "created": 1647139880, "deleted": 0, "content": "语雀领取 1-4 年会员（必领 1 年）\r\n\r\nApp 下载地址： https://www.yuque.com/download\r\n\r\n\r\n语雀领取 1-4 年会员教程来了，新老客户都可以得。\r\n\r\n打开语雀 App ，进入 [我] - [活动福利] - [输入邀请码] ，领取会员\r\n\r\n❶先随便找个他人的邀请码，比如我的 ：\r\n\r\nBB8GCF\r\n\r\n不做强制人头，选择性填写，填了双方都可以得 3 个月会员\r\n\r\n❷然后分享自己的邀请码去，陆续得 36 个月\r\n\r\n\r\n❸然后这个链接 6 个月\r\nhttps://www.yuque.com/e/channel?channel=aliyungaoxiao\r\n\r\n\r\n❹然后这个链接 3 个月\r\nhttps://www.yuque.com/e/channel?channel=aliyunkfz\r\n\r\n\r\n合计 3+36+6+3=48 ，四年的", "content_rendered": "<p>语雀领取 1-4 年会员（必领 1 年）</p>\n<p>App 下载地址： <a href=\"https://www.yuque.com/download\" rel=\"nofollow\">https://www.yuque.com/download</a></p>\n<p>语雀领取 1-4 年会员教程来了，新老客户都可以得。</p>\n<p>打开语雀 App ，进入 [我] - [活动福利] - [输入邀请码] ，领取会员</p>\n<p>❶先随便找个他人的邀请码，比如我的 ：</p>\n<p>BB8GCF</p>\n<p>不做强制人头，选择性填写，填了双方都可以得 3 个月会员</p>\n<p>❷然后分享自己的邀请码去，陆续得 36 个月</p>\n<p>❸然后这个链接 6 个月\n<a href=\"https://www.yuque.com/e/channel?channel=aliyungaoxiao\" rel=\"nofollow\">https://www.yuque.com/e/channel?channel=aliyungaoxiao</a></p>\n<p>❹然后这个链接 3 个月\n<a href=\"https://www.yuque.com/e/channel?channel=aliyunkfz\" rel=\"nofollow\">https://www.yuque.com/e/channel?channel=aliyunkfz</a></p>\n<p>合计 3+36+6+3=48 ，四年的</p>\n", "last_modified": 1647139880, "replies": 158, "id": 839992}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6f49/22f4/18_large.png?m=1573619774", "name": "shanghai", "avatar_normal": "https://cdn.v2ex.com/navatar/6f49/22f4/18_normal.png?m=1573619774", "title": "上海", "url": "https://www.v2ex.com/go/shanghai", "topics": 2806, "footer": "", "header": "", "title_alternative": "Shanghai", "avatar_mini": "https://cdn.v2ex.com/navatar/6f49/22f4/18_mini.png?m=1573619774", "stars": 2001, "aliases": [], "root": false, "id": 18, "parent_node_name": "cn"}, "member": {"id": 197754, "username": "424778940", "url": "https://www.v2ex.com/u/424778940", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/f2cd/b577/197754_mini.png?m=1477164086", "avatar_normal": "https://cdn.v2ex.com/avatar/f2cd/b577/197754_normal.png?m=1477164086", "avatar_large": "https://cdn.v2ex.com/avatar/f2cd/b577/197754_large.png?m=1477164086", "created": 1477164018, "last_modified": 1477164086}, "last_reply_by": "gjquoiai", "last_touched": 1647169277, "title": "通勤最后一公里有没有什么好方式?", "url": "https://www.v2ex.com/t/839994", "created": 1647141083, "deleted": 0, "content": "如图 上海如何解决家到地铁和地铁到公司的最后一公里问题?\r\n我查了一下好像任何滑行类代步工具不管是不是电动的都是 既不允许上机动车道 也不允许上非机动车道 还不允许上人行道 也就是说你压根就别想用 说好的绿色出行呢?\r\n说自行车吧 好像就算是折叠人力自行车 也是不允许上地铁的", "content_rendered": "<p>如图 上海如何解决家到地铁和地铁到公司的最后一公里问题?\n我查了一下好像任何滑行类代步工具不管是不是电动的都是 既不允许上机动车道 也不允许上非机动车道 还不允许上人行道 也就是说你压根就别想用 说好的绿色出行呢?\n说自行车吧 好像就算是折叠人力自行车 也是不允许上地铁的</p>\n", "last_modified": 1647141083, "replies": 50, "id": 839994}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 17836, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913", "stars": 2093, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"id": 222881, "username": "hyousan", "url": "https://www.v2ex.com/u/hyousan", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/c6f9cc8671a55f8e54956eabde9d95ff?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/c6f9cc8671a55f8e54956eabde9d95ff?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/c6f9cc8671a55f8e54956eabde9d95ff?s=73&d=retro", "created": 1490416606, "last_modified": 1647125872}, "last_reply_by": "nuevepicos", "last_touched": 1647169509, "title": "好想买。。可惜现在只能看看流流口水", "url": "https://www.v2ex.com/t/839969", "created": 1647126015, "deleted": 0, "content": "![]( https://vip1.loli.io/2022/03/13/SIA6vaPeKH5Vdy7.jpg \"\")", "content_rendered": "<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://vip1.loli.io/2022/03/13/SIA6vaPeKH5Vdy7.jpg\"/></p>\n", "last_modified": 1647126015, "replies": 44, "id": 839969}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1646074667", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1646074667", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 47759, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1646074667", "stars": 7731, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 311431, "username": "sjmcefc2", "url": "https://www.v2ex.com/u/sjmcefc2", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/ed45fe578f1092dcabc2eaaf904f7374?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/ed45fe578f1092dcabc2eaaf904f7374?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/ed45fe578f1092dcabc2eaaf904f7374?s=73&d=retro", "created": 1524613863, "last_modified": 1524613863}, "last_reply_by": "jousca", "last_touched": 1647163637, "title": "现在用的是 windows10，不想重装系统，想着升级到 11，但是又没有 tmp2.0，这个可以解决吗", "url": "https://www.v2ex.com/t/839980", "created": 1647134874, "deleted": 0, "content": "现在用的是 windows10 ，不想重装系统，想着升级到 11 ，但是又没有 tmp2.0 ，这个可以解决吗", "content_rendered": "<p>现在用的是 windows10 ，不想重装系统，想着升级到 11 ，但是又没有 tmp2.0 ，这个可以解决吗</p>\n", "last_modified": 1647134874, "replies": 39, "id": 839980}, {"node": {"avatar_large": "/static/img/node_default_large.png", "name": "outdoor", "avatar_normal": "/static/img/node_default_normal.png", "title": "户外运动", "url": "https://www.v2ex.com/go/outdoor", "topics": 16, "footer": "", "header": "", "title_alternative": "户外运动", "avatar_mini": "/static/img/node_default_mini.png", "stars": 13, "aliases": [], "root": false, "id": 845, "parent_node_name": ""}, "member": {"id": 226414, "username": "glouhao", "url": "https://www.v2ex.com/u/glouhao", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/14d3/fd79/226414_mini.png?m=1640139002", "avatar_normal": "https://cdn.v2ex.com/avatar/14d3/fd79/226414_normal.png?m=1640139002", "avatar_large": "https://cdn.v2ex.com/avatar/14d3/fd79/226414_large.png?m=1640139002", "created": 1492417271, "last_modified": 1640139002}, "last_reply_by": "unregister", "last_touched": 1647116986, "title": "五千米 33 分才跑完", "url": "https://www.v2ex.com/t/839987", "created": 1647138586, "deleted": 0, "content": "常年不运动，没啥体育爱好，最近活动了点，走了点路。今天趁迟到请了个假，去跑了下，感觉比走路快了没多少。应该是比初中比赛慢多了。\n\n听说咱们大陆女兵是负重 25 分，台湾男兵是不负重 25 分，我这身体好差。", "content_rendered": "常年不运动，没啥体育爱好，最近活动了点，走了点路。今天趁迟到请了个假，去跑了下，感觉比走路快了没多少。应该是比初中比赛慢多了。<br /><br />听说咱们大陆女兵是负重 25 分，台湾男兵是不负重 25 分，我这身体好差。", "last_modified": 1647138586, "replies": 33, "id": 839987}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/9f61/408e/56_large.png?m=1628212285", "name": "internet", "avatar_normal": "https://cdn.v2ex.com/navatar/9f61/408e/56_normal.png?m=1628212285", "title": "互联网", "url": "https://www.v2ex.com/go/internet", "topics": 3102, "footer": "", "header": "In Internet we trust", "title_alternative": "Internet", "avatar_mini": "https://cdn.v2ex.com/navatar/9f61/408e/56_mini.png?m=1628212285", "stars": 951, "aliases": [], "root": false, "id": 56, "parent_node_name": "computer"}, "member": {"id": 556900, "username": "V9NN", "url": "https://www.v2ex.com/u/V9NN", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/ab5a7987d56e681a68ed920468ec7186?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/ab5a7987d56e681a68ed920468ec7186?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/ab5a7987d56e681a68ed920468ec7186?s=73&d=retro", "created": 1632620580, "last_modified": 1646439710}, "last_reply_by": "4mYHime", "last_touched": 1647167134, "title": "抢注“支付宝号”要点总结", "url": "https://www.v2ex.com/t/839973", "created": 1647130018, "deleted": 0, "content": "支付宝号开放抢注了！\r\n\r\n很多人看了还是没操作成功，这里要理解两个要点：\r\n\r\n1 、解绑邮箱（因为支付宝号实质上是一个省了统一后缀的邮箱账号：@alipay.tech ）；\r\n2 、去绑定一个绑了别的支付宝的手机号，造成“顶号”，然后出现支付宝号的设置界面。\r\n\r\n操作步骤（全程支付宝 app 操作）：\r\n1 ）解绑邮箱；\r\n2 ）换绑手机号（该手机号已绑定他人支付宝——最好熟人的）；\r\n3 ）收验证码后出现“支付宝号”设置界面；\r\n4 ）换绑回原来的手机号；\r\n5 ）回支付宝主界面能看到已经抢注成功的支付宝号。\r\n\r\n以后可以直接用这个支付宝号收取转账。\r\n\r\n尽量不要用自己的同身份证号“顶号（手机号）”，很多人直接修改手机号成功，而没有出现设置支付宝号的界面。\r\n建议和熟人互顶绑定手机号的操作。\r\n\r\n抢注成功一年之后才能再修改。\r\n\r\n这里是前情提要：/t/839885", "content_rendered": "支付宝号开放抢注了！<br /><br />很多人看了还是没操作成功，这里要理解两个要点：<br /><br />1 、解绑邮箱（因为支付宝号实质上是一个省了统一后缀的邮箱账号：@alipay.tech ）；<br />2 、去绑定一个绑了别的支付宝的手机号，造成“顶号”，然后出现支付宝号的设置界面。<br /><br />操作步骤（全程支付宝 app 操作）：<br />1 ）解绑邮箱；<br />2 ）换绑手机号（该手机号已绑定他人支付宝——最好熟人的）；<br />3 ）收验证码后出现“支付宝号”设置界面；<br />4 ）换绑回原来的手机号；<br />5 ）回支付宝主界面能看到已经抢注成功的支付宝号。<br /><br />以后可以直接用这个支付宝号收取转账。<br /><br />尽量不要用自己的同身份证号“顶号（手机号）”，很多人直接修改手机号成功，而没有出现设置支付宝号的界面。<br />建议和熟人互顶绑定手机号的操作。<br /><br />抢注成功一年之后才能再修改。<br /><br />这里是前情提要：/t/839885", "last_modified": 1647137594, "replies": 32, "id": 839973}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1646074667", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1646074667", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 47759, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1646074667", "stars": 7731, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 30753, "username": "felix021", "url": "https://www.v2ex.com/u/felix021", "website": "http://www.felix021.com", "twitter": "", "psn": "", "github": "felix021", "btc": "", "location": "上海", "tagline": "人生には、三つ坂があるんですって、上り坂、下り坂、まさか。", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/ac0d/7b02/30753_mini.png?m=1588869191", "avatar_normal": "https://cdn.v2ex.com/avatar/ac0d/7b02/30753_normal.png?m=1588869191", "avatar_large": "https://cdn.v2ex.com/avatar/ac0d/7b02/30753_large.png?m=1588869191", "created": 1355754362, "last_modified": 1588869191}, "last_reply_by": "felix021", "last_touched": 1647168401, "title": "一张证书引发的噱案", "url": "https://www.v2ex.com/t/840034", "created": 1647160912, "deleted": 0, "content": "![]( https://image-static.segmentfault.com/388/740/3887409003-622d9ca20764d)\r\n\r\n# - 引 -\r\n\r\n我也没想到在神策数据这大半年能遇到好几次和证书相关的问题。\r\n\r\n# - 起 -\r\n\r\n2021 年 9 月 3 号，一个新客户接入到我们的 SaaS 系统。在某个环节，我们会给客户发个 HTTPS 请求，没想到竟然遇到了个 `SSLHandshakeException`:\r\n\r\n> Caused by: javax.net.ssl.SSLHandshakeException: ... unable to find valid certification path to requested target\r\n\r\n在服务器上用 curl 试一把，也报错：\r\n\r\n```\r\n$ curl -v https://some.domain/\r\nCAfile: /etc/pki/tls/certs/ca-bundle.crt\r\n...\r\ncurl: (60) Peer's Certificate issuer is not recognized.\r\n```\r\n\r\n但用浏览器打开这个 URL ，却是没问题的，这说明问题应该出在我们的服务器端。\r\n\r\n# - 析 -\r\n\r\n我们知道，HTTPS 是靠证书保证通信安全的；但客户端如何保证服务端给的证书是可信的呢？\r\n\r\n由于证书总是由某个证书颁发机构（ Certificate issuer ，或 Certificate Authority ，简写成 CA ）签发的，如果我们事先将一批可信的证书颁发机构存储在本地，就可以在发起请求的时候判断证书是否可信了。\r\n\r\n有时情况会更复杂一些：某些机构不在我们的列表里，但他的证书是由我们信任的某个机构颁发的，我们也认为他是可信的，因此他颁发的证书也是可信的。\r\n\r\n于是这就构成了一个信任链，链的末端是「根证书颁发机构」（ Root CA ），这些机构通常是国际上公认可靠的大型机构，或者国家权威机关背书的机构。\r\n\r\n理解了这点，就可以推测，应当是我们服务器上的机构列表没有及时更新；只要把该客户证书的颁发机构加入本地的列表就应该能解决该问题。\r\n\r\n# - 解 -\r\n\r\n再细看上面 curl 命令的输出，有一行 `CAfile: /etc/pki/tls/certs/ca-bundle.crt`，这就是 curl 使用到的证书颁发机构列表。\r\n\r\n以 `www.baidu.com` 为例，我们可以通过如下命令获取客户证书的信任链：\r\n\r\n```\r\n$ openssl s_client -showcerts -servername server -connect www.baidu.com:443 > cacert.pem\r\n```\r\n\r\n在得到的 `cacert.pem` 中，我们可以看到如下内容（略作简化)：\r\n```\r\nCertificate chain\r\n 0 s:/CN=baidu.com\r\n   i:/CN=GlobalSign Organization Validation CA - SHA256 - G2\r\n\r\n-----BEGIN CERTIFICATE-----\r\nMIIKQDCCCSigAwIBAgIMEZhyT2Z0o9Yhv76iMA0GCSqGSIb3DQEBCwUAMGYxCzAJ\r\n...(略)...\r\nn3XcFtwQLBY9Iuqh8Mn7vtiv5k2azdGsYhZcFBCBAeUoRhDC\r\n-----END CERTIFICATE-----\r\n\r\n 1 s:/CN=GlobalSign Organization Validation CA - SHA256 - G2\r\n   i:/OU=Root CA/CN=GlobalSign Root CA\r\n\r\n-----BEGIN CERTIFICATE-----\r\nMIIEaTCCA1GgAwIBAgILBAAAAAABRE7wQkcwDQYJKoZIhvcNAQELBQAwVzELMAkG\r\n...(略)...\r\nK1pp74P1S8SqtCr4fKGxhZSM9AyHDPSsQPhZSZg=\r\n-----END CERTIFICATE-----\r\n\r\n...(略)...\r\n```\r\n\r\n可以看到里面有两段用 `--BEGIN CERTIFICATE--` 和 `--END CERTIFICATE--` 包起来的 base64 编码字符串，这就是被编码为 PEM 格式（ Privacy Enhanced Mail ）的证书了（有时也会用 .crt 作为扩展名）。\r\n\r\n在 BEGIN 前面有一些摘要，可以帮助我们了解证书的内容，比如 `s:/CN=baidu.com` 表示这个证书的主体（ s 即 subject ）是 baidu.com （ CN 即 common name ），`i:/CN=GlobalSign` 表示它的颁发机构（ i 即 issuer ）是 GlobalSign 。\r\n\r\n因此可以看到，这个 `cacert.pem` 实际上包含了两个证书，一个是百度使用的证书，另一个是颁发该证书的 GlobalSign 这个机构（ CA ）自己的证书。\r\n\r\n通过 `curl --cacert cacert.pem https://www.baidu.com` 我们可以确认，这个信任链能用来验证 www.baidu.com 的证书（实际上我们只需要里面第二个证书，将第一个证书删除，不影响 curl 的执行）。\r\n\r\n回到该客户的情况，我们用相同的方法取得客户证书颁发机构的证书，将它放到 `/etc/pki/ca-trust/source/anchors/` 目录，执行 `update-ca-trust` 将其加入到证书列表中，就可以正常使用 curl 命令来请求了。\r\n\r\n# - 然 -\r\n\r\n没有「但是」的文章不是好文章。\r\n\r\ncurl 正常了，但是我们的 Java 代码依然报错，这说明 java 和 curl 使用了不同的 CA 列表。\r\n\r\n问题倒是好解决，简单搜索一下，就了解到 jre 的证书是存放在 `$JAVA_HOME/jre/lib/security/cacerts` 这个文件里，需要使用专门的 keytool 工具来更新它：\r\n\r\n```\r\n$ keytool -import -trustcacerts -file cacert.pem -alias 证书颁发机构的名称 -keystore $JAVA_HOME/jre/lib/security/cacerts\r\n\r\nEnter keystore password:  changeit （这是 jre 自带的默认密码）\r\n\r\nCertificate was added to keystore\r\n```\r\n\r\n再次验证，Java 代码就可以正常运行了。\r\n\r\n注：如果想要单独验证某个证书，可以这样\r\n\r\n* (1) 先创建一个空的 keyStore （密码为 storePassword ）：\r\n```\r\n$ keytool -genkeypair -alias boguscert -storepass storePassword -keypass secretPassword -keystore keystore -dname \"CN=Developer\"\r\n$ keytool -delete -alias boguscert -storepass storePassword -keystore emptyStore.keystore\r\n```\r\n* (2) 添加证书到该 keyStore：\r\n```\r\n$ keytool -import -trustcacerts -file cacert.pem -alias 机构名称 -keystore keystore\r\n```\r\n* (3) 指定 keyStore 启动 java 程序：\r\n```\r\n$ java -Djavax.net.ssl.trustStore=keystore -Djavax.net.ssl.trustStorePassword=storePassword -cp $CLASS_PATH CLASS_NAME\r\n```\r\n\r\n# - 劫 -\r\n\r\n不巧的是，这周又遇到了一个证书信任的问题，这次是客户的环境向我们的服务器发起请求，报了相同的错误。\r\n\r\n有了前车之鉴，上面这些命令执行起来可谓得心应手，但是这次却不灵了。\r\n\r\n排查过程比较琐碎，也因为陷入思维定势而走了一些弯路，但其实原因很简单，这里就不卖关子了。\r\n\r\n这家客户是一家泛金融类的企业，其生产环境的网络安全级别非常高，不仅有严格的外网访问限制，而且针对所有 https 请求都会默认劫持，用一个自签名证书返回错误信息。\r\n\r\n经过与客户沟通，将神策数据的域名添加到白名单后，问题得以解决。\r\n\r\n# - 故事 -\r\n\r\n讲完了事故，再讲讲故事。\r\n\r\n非对称加密、证书、信任链这一系列发明，构成了现在 web 通信安全的基石，很难想象如果没有这些基础设施，现在互联网还能做些什么。\r\n\r\n但是这里隐藏了一个大 bug：**我们凭什么相信本地这些证书颁发机构是可信的？**\r\n\r\n至少有三种情况会打破这个假设：\r\n\r\n* 本地 CA 列表被污染\r\n\r\n可能你的电脑 /手机被病毒导入了 CA 证书；或者你自己可能就做过这个事情，比如公司网管要求添加公司的自签名证书，又或者你为了能使用 Charles 来抓 https 请求，导入了它自签名的 Root CA 证书。\r\n\r\n* 机构的私钥泄漏\r\n\r\n我没有在公开渠道查到相关的事故（倒是有一个代理商把客户证书的私钥给泄漏了）；如果某个机构的私钥泄漏，这家机构应该离倒闭也不远了。\r\n\r\n* 看起来正经的机构也可能不正经\r\n\r\n各国政府控制的 CA 机构大概都干过些「不干净」的事情（至少有这种冲动），有一些被发现了，有一些还没有。出于本文的安全考虑，这里就不展开细节了。此外，「不被政府控制」的那些机构，就一定干净么？说到底，机构总是被所在国管辖的，当遇到政府行政命令的时候，不一定有反抗的能力。\r\n\r\n综上，理论上并不存在 100% 可靠的通信安全方案。\r\n\r\n如果你的应用对通信安全要求非常严格，连本地的 CA 列表都不相信，可以考虑加入更多的手段来提高通信的安全等级。\r\n\r\n简单一点的场景（例如 app 不想被抓包破解协议），可以自己校验服务器的证书（证书指纹，或者自己指定证书颁发机构列表）；要求更高的场景（例如需要访问内部控制系统），可以给客户端颁发证书，浏览器会在请求时提供证书用于校验，感兴趣的话可以参考 [这个不太完善的项目]( https://github.com/felix021/openssl-selfsign)。\r\n\r\n# - 收 -\r\n\r\n结尾照例做一个小结：\r\n\r\n1. HTTPS 是基于证书链来保证通信安全的；\r\n2. 信任的基石是本地的证书颁发机构（ CA ）列表；\r\n3. 可以通过向本地列表添加 CA 证书的方式来解决需要信任的证书；\r\n4. 本地的 CA 不一定都是可信的；\r\n5. 可以通过更严格的校验，或者客户端证书来加强通信的安全等级。\r\n\r\n最后，神策在北京、上海、成都、武汉、深圳等多地均在招聘开发、产品、QA 等岗位，感兴趣的小伙伴欢迎私信勾搭；也可以点击我的 [内推链接]( https://neitui.italent.cn/sensorsdata/sharejobs?shareId=058b610b-1748-4984-8ac4-5be9c4af6d79) 查看 JD 并投递简历。\r\n\r\n\r\n# 关注公众号，查看更多历史文章\r\n\r\n\r\n```\r\n   ▄▄▄▄▄▄▄   ▄      ▄▄▄▄ ▄▄▄▄▄▄▄  \r\n   █ ▄▄▄ █ ▄▀ ▄ ▀██▄ ▀█▄ █ ▄▄▄ █  \r\n   █ ███ █  █  █  █▀▀▀█▀ █ ███ █  \r\n   █▄▄▄▄▄█ ▄ █▀█ █▀█ ▄▀█ █▄▄▄▄▄█  \r\n   ▄▄▄ ▄▄▄▄█  ▀▄█▀▀▀█ ▄█▄▄   ▄    \r\n   ▄█▄▄▄▄▄▀▄▀▄██   ▀ ▄  █▀▄▄▀▄▄█  \r\n   █ █▀▄▀▄▄▀▀█▄▀█▄▀█████▀█▀▀█ █▄  \r\n    ▀▀  █▄██▄█▀  █ ▀█▀ ▀█▀ ▄▀▀▄█  \r\n   █▀ ▀ ▄▄▄▄▄▄▀▄██  █ ▄████▀▀ █▄  \r\n   ▄▀▄▄▄ ▄ ▀▀▄████▀█▀  ▀ █▄▄▄▀▄█  \r\n   ▄▀▀██▄▄  █▀▄▀█▀▀ █▀ ▄▄▄██▀ ▀   \r\n   ▄▄▄▄▄▄▄ █ █▀ ▀▀   ▄██ ▄ █▄▀██  \r\n   █ ▄▄▄ █ █▄ ▀▄▀ ▀██  █▄▄▄█▄  ▀  \r\n   █ ███ █ ▄ ███▀▀▀█▄ █▀▄ ██▄ ▀█  \r\n   █▄▄▄▄▄█ ██ ▄█▀█  █ ▀██▄▄▄  █▄  \r\n```", "content_rendered": "<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://image-static.segmentfault.com/388/740/3887409003-622d9ca20764d\"/></p>\n<h1>- 引 -</h1>\n<p>我也没想到在神策数据这大半年能遇到好几次和证书相关的问题。</p>\n<h1>- 起 -</h1>\n<p>2021 年 9 月 3 号，一个新客户接入到我们的 SaaS 系统。在某个环节，我们会给客户发个 HTTPS 请求，没想到竟然遇到了个 <code>SSLHandshakeException</code>:</p>\n<blockquote>\n<p>Caused by: javax.net.ssl.SSLHandshakeException: ... unable to find valid certification path to requested target</p>\n</blockquote>\n<p>在服务器上用 curl 试一把，也报错：</p>\n<pre><code>$ curl -v https://some.domain/\nCAfile: /etc/pki/tls/certs/ca-bundle.crt\n...\ncurl: (60) Peer's Certificate issuer is not recognized.\n</code></pre>\n<p>但用浏览器打开这个 URL ，却是没问题的，这说明问题应该出在我们的服务器端。</p>\n<h1>- 析 -</h1>\n<p>我们知道，HTTPS 是靠证书保证通信安全的；但客户端如何保证服务端给的证书是可信的呢？</p>\n<p>由于证书总是由某个证书颁发机构（ Certificate issuer ，或 Certificate Authority ，简写成 CA ）签发的，如果我们事先将一批可信的证书颁发机构存储在本地，就可以在发起请求的时候判断证书是否可信了。</p>\n<p>有时情况会更复杂一些：某些机构不在我们的列表里，但他的证书是由我们信任的某个机构颁发的，我们也认为他是可信的，因此他颁发的证书也是可信的。</p>\n<p>于是这就构成了一个信任链，链的末端是「根证书颁发机构」（ Root CA ），这些机构通常是国际上公认可靠的大型机构，或者国家权威机关背书的机构。</p>\n<p>理解了这点，就可以推测，应当是我们服务器上的机构列表没有及时更新；只要把该客户证书的颁发机构加入本地的列表就应该能解决该问题。</p>\n<h1>- 解 -</h1>\n<p>再细看上面 curl 命令的输出，有一行 <code>CAfile: /etc/pki/tls/certs/ca-bundle.crt</code>，这就是 curl 使用到的证书颁发机构列表。</p>\n<p>以 <code><a href=\"http://www.baidu.com\" rel=\"nofollow\">www.baidu.com</a></code> 为例，我们可以通过如下命令获取客户证书的信任链：</p>\n<pre><code>$ openssl s_client -showcerts -servername server -connect www.baidu.com:443 &gt; cacert.pem\n</code></pre>\n<p>在得到的 <code>cacert.pem</code> 中，我们可以看到如下内容（略作简化)：</p>\n<pre><code>Certificate chain\n 0 s:/CN=baidu.com\n   i:/CN=GlobalSign Organization Validation CA - SHA256 - G2\n\n-----BEGIN CERTIFICATE-----\nMIIKQDCCCSigAwIBAgIMEZhyT2Z0o9Yhv76iMA0GCSqGSIb3DQEBCwUAMGYxCzAJ\n...(略)...\nn3XcFtwQLBY9Iuqh8Mn7vtiv5k2azdGsYhZcFBCBAeUoRhDC\n-----END CERTIFICATE-----\n\n 1 s:/CN=GlobalSign Organization Validation CA - SHA256 - G2\n   i:/OU=Root CA/CN=GlobalSign Root CA\n\n-----BEGIN CERTIFICATE-----\nMIIEaTCCA1GgAwIBAgILBAAAAAABRE7wQkcwDQYJKoZIhvcNAQELBQAwVzELMAkG\n...(略)...\nK1pp74P1S8SqtCr4fKGxhZSM9AyHDPSsQPhZSZg=\n-----END CERTIFICATE-----\n\n...(略)...\n</code></pre>\n<p>可以看到里面有两段用 <code>--BEGIN CERTIFICATE--</code> 和 <code>--END CERTIFICATE--</code> 包起来的 base64 编码字符串，这就是被编码为 PEM 格式（ Privacy Enhanced Mail ）的证书了（有时也会用 .crt 作为扩展名）。</p>\n<p>在 BEGIN 前面有一些摘要，可以帮助我们了解证书的内容，比如 <code>s:/CN=<a href=\"http://baidu.com\" rel=\"nofollow\">baidu.com</a></code> 表示这个证书的主体（ s 即 subject ）是 <a href=\"http://baidu.com\" rel=\"nofollow\">baidu.com</a> （ CN 即 common name ），<code>i:/CN=GlobalSign</code> 表示它的颁发机构（ i 即 issuer ）是 GlobalSign 。</p>\n<p>因此可以看到，这个 <code>cacert.pem</code> 实际上包含了两个证书，一个是百度使用的证书，另一个是颁发该证书的 GlobalSign 这个机构（ CA ）自己的证书。</p>\n<p>通过 <code>curl --cacert cacert.pem <a href=\"https://www.baidu.com\" rel=\"nofollow\">https://www.baidu.com</a></code> 我们可以确认，这个信任链能用来验证 <a href=\"http://www.baidu.com\" rel=\"nofollow\">www.baidu.com</a> 的证书（实际上我们只需要里面第二个证书，将第一个证书删除，不影响 curl 的执行）。</p>\n<p>回到该客户的情况，我们用相同的方法取得客户证书颁发机构的证书，将它放到 <code>/etc/pki/ca-trust/source/anchors/</code> 目录，执行 <code>update-ca-trust</code> 将其加入到证书列表中，就可以正常使用 curl 命令来请求了。</p>\n<h1>- 然 -</h1>\n<p>没有「但是」的文章不是好文章。</p>\n<p>curl 正常了，但是我们的 Java 代码依然报错，这说明 java 和 curl 使用了不同的 CA 列表。</p>\n<p>问题倒是好解决，简单搜索一下，就了解到 jre 的证书是存放在 <code>$JAVA_HOME/jre/lib/security/cacerts</code> 这个文件里，需要使用专门的 keytool 工具来更新它：</p>\n<pre><code>$ keytool -import -trustcacerts -file cacert.pem -alias 证书颁发机构的名称 -keystore $JAVA_HOME/jre/lib/security/cacerts\n\nEnter keystore password:  changeit （这是 jre 自带的默认密码）\n\nCertificate was added to keystore\n</code></pre>\n<p>再次验证，Java 代码就可以正常运行了。</p>\n<p>注：如果想要单独验证某个证书，可以这样</p>\n<ul>\n<li>(1) 先创建一个空的 keyStore （密码为 storePassword ）：</li>\n</ul>\n<pre><code>$ keytool -genkeypair -alias boguscert -storepass storePassword -keypass secretPassword -keystore keystore -dname \"CN=Developer\"\n$ keytool -delete -alias boguscert -storepass storePassword -keystore emptyStore.keystore\n</code></pre>\n<ul>\n<li>(2) 添加证书到该 keyStore：</li>\n</ul>\n<pre><code>$ keytool -import -trustcacerts -file cacert.pem -alias 机构名称 -keystore keystore\n</code></pre>\n<ul>\n<li>(3) 指定 keyStore 启动 java 程序：</li>\n</ul>\n<pre><code>$ java -Djavax.net.ssl.trustStore=keystore -Djavax.net.ssl.trustStorePassword=storePassword -cp $CLASS_PATH CLASS_NAME\n</code></pre>\n<h1>- 劫 -</h1>\n<p>不巧的是，这周又遇到了一个证书信任的问题，这次是客户的环境向我们的服务器发起请求，报了相同的错误。</p>\n<p>有了前车之鉴，上面这些命令执行起来可谓得心应手，但是这次却不灵了。</p>\n<p>排查过程比较琐碎，也因为陷入思维定势而走了一些弯路，但其实原因很简单，这里就不卖关子了。</p>\n<p>这家客户是一家泛金融类的企业，其生产环境的网络安全级别非常高，不仅有严格的外网访问限制，而且针对所有 https 请求都会默认劫持，用一个自签名证书返回错误信息。</p>\n<p>经过与客户沟通，将神策数据的域名添加到白名单后，问题得以解决。</p>\n<h1>- 故事 -</h1>\n<p>讲完了事故，再讲讲故事。</p>\n<p>非对称加密、证书、信任链这一系列发明，构成了现在 web 通信安全的基石，很难想象如果没有这些基础设施，现在互联网还能做些什么。</p>\n<p>但是这里隐藏了一个大 bug：<strong>我们凭什么相信本地这些证书颁发机构是可信的？</strong></p>\n<p>至少有三种情况会打破这个假设：</p>\n<ul>\n<li>本地 CA 列表被污染</li>\n</ul>\n<p>可能你的电脑 /手机被病毒导入了 CA 证书；或者你自己可能就做过这个事情，比如公司网管要求添加公司的自签名证书，又或者你为了能使用 Charles 来抓 https 请求，导入了它自签名的 Root CA 证书。</p>\n<ul>\n<li>机构的私钥泄漏</li>\n</ul>\n<p>我没有在公开渠道查到相关的事故（倒是有一个代理商把客户证书的私钥给泄漏了）；如果某个机构的私钥泄漏，这家机构应该离倒闭也不远了。</p>\n<ul>\n<li>看起来正经的机构也可能不正经</li>\n</ul>\n<p>各国政府控制的 CA 机构大概都干过些「不干净」的事情（至少有这种冲动），有一些被发现了，有一些还没有。出于本文的安全考虑，这里就不展开细节了。此外，「不被政府控制」的那些机构，就一定干净么？说到底，机构总是被所在国管辖的，当遇到政府行政命令的时候，不一定有反抗的能力。</p>\n<p>综上，理论上并不存在 100% 可靠的通信安全方案。</p>\n<p>如果你的应用对通信安全要求非常严格，连本地的 CA 列表都不相信，可以考虑加入更多的手段来提高通信的安全等级。</p>\n<p>简单一点的场景（例如 app 不想被抓包破解协议），可以自己校验服务器的证书（证书指纹，或者自己指定证书颁发机构列表）；要求更高的场景（例如需要访问内部控制系统），可以给客户端颁发证书，浏览器会在请求时提供证书用于校验，感兴趣的话可以参考 <a href=\"https://github.com/felix021/openssl-selfsign\" rel=\"nofollow\">这个不太完善的项目</a>。</p>\n<h1>- 收 -</h1>\n<p>结尾照例做一个小结：</p>\n<ol>\n<li>HTTPS 是基于证书链来保证通信安全的；</li>\n<li>信任的基石是本地的证书颁发机构（ CA ）列表；</li>\n<li>可以通过向本地列表添加 CA 证书的方式来解决需要信任的证书；</li>\n<li>本地的 CA 不一定都是可信的；</li>\n<li>可以通过更严格的校验，或者客户端证书来加强通信的安全等级。</li>\n</ol>\n<p>最后，神策在北京、上海、成都、武汉、深圳等多地均在招聘开发、产品、QA 等岗位，感兴趣的小伙伴欢迎私信勾搭；也可以点击我的 <a href=\"https://neitui.italent.cn/sensorsdata/sharejobs?shareId=058b610b-1748-4984-8ac4-5be9c4af6d79\" rel=\"nofollow\">内推链接</a> 查看 JD 并投递简历。</p>\n<h1>关注公众号，查看更多历史文章</h1>\n<pre><code>   ▄▄▄▄▄▄▄   ▄      ▄▄▄▄ ▄▄▄▄▄▄▄  \n   █ ▄▄▄ █ ▄▀ ▄ ▀██▄ ▀█▄ █ ▄▄▄ █  \n   █ ███ █  █  █  █▀▀▀█▀ █ ███ █  \n   █▄▄▄▄▄█ ▄ █▀█ █▀█ ▄▀█ █▄▄▄▄▄█  \n   ▄▄▄ ▄▄▄▄█  ▀▄█▀▀▀█ ▄█▄▄   ▄    \n   ▄█▄▄▄▄▄▀▄▀▄██   ▀ ▄  █▀▄▄▀▄▄█  \n   █ █▀▄▀▄▄▀▀█▄▀█▄▀█████▀█▀▀█ █▄  \n    ▀▀  █▄██▄█▀  █ ▀█▀ ▀█▀ ▄▀▀▄█  \n   █▀ ▀ ▄▄▄▄▄▄▀▄██  █ ▄████▀▀ █▄  \n   ▄▀▄▄▄ ▄ ▀▀▄████▀█▀  ▀ █▄▄▄▀▄█  \n   ▄▀▀██▄▄  █▀▄▀█▀▀ █▀ ▄▄▄██▀ ▀   \n   ▄▄▄▄▄▄▄ █ █▀ ▀▀   ▄██ ▄ █▄▀██  \n   █ ▄▄▄ █ █▄ ▀▄▀ ▀██  █▄▄▄█▄  ▀  \n   █ ███ █ ▄ ███▀▀▀█▄ █▀▄ ██▄ ▀█  \n   █▄▄▄▄▄█ ██ ▄█▀█  █ ▀██▄▄▄  █▄  \n</code></pre>\n", "last_modified": 1647160912, "replies": 27, "id": 840034}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 17836, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913", "stars": 2093, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"id": 487856, "username": "xiaofine1122", "url": "https://www.v2ex.com/u/xiaofine1122", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/096f/1beb/487856_mini.png?m=1647146885", "avatar_normal": "https://cdn.v2ex.com/avatar/096f/1beb/487856_normal.png?m=1647146885", "avatar_large": "https://cdn.v2ex.com/avatar/096f/1beb/487856_large.png?m=1647146885", "created": 1588690523, "last_modified": 1647146885}, "last_reply_by": "lxr760", "last_touched": 1647164881, "title": "关于断头 MacBook 的某些问题", "url": "https://www.v2ex.com/t/840002", "created": 1647146920, "deleted": 0, "content": "最近看到断头 MacBook 的又火起来了，刚好现在想尝试下 macos ，体验下苹果的生态，但是之前折腾黑苹果体验很不好，各种奇奇怪怪的问题。\r\n请问：\r\n1.断头的 macbook 值得入吗，因为看到新的 ARM 芯片的笔记本各种软件的兼容问题，还是比较犹豫\r\n2.如果入的话 17 款的 16G 内容够用吗，后端开发狗", "content_rendered": "<p>最近看到断头 MacBook 的又火起来了，刚好现在想尝试下 macos ，体验下苹果的生态，但是之前折腾黑苹果体验很不好，各种奇奇怪怪的问题。\n请问：\n1.断头的 macbook 值得入吗，因为看到新的 ARM 芯片的笔记本各种软件的兼容问题，还是比较犹豫\n2.如果入的话 17 款的 16G 内容够用吗，后端开发狗</p>\n", "last_modified": 1647147026, "replies": 26, "id": 840002}]