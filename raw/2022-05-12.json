[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1651385949", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1651385949", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 48722, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1651385949", "stars": 7814, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 482153, "username": "Joker123456789", "url": "https://www.v2ex.com/u/Joker123456789", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/47d3/3395/482153_mini.png?m=1596374150", "avatar_normal": "https://cdn.v2ex.com/avatar/47d3/3395/482153_normal.png?m=1596374150", "avatar_large": "https://cdn.v2ex.com/avatar/47d3/3395/482153_large.png?m=1596374150", "created": 1586241649, "last_modified": 1596374150}, "last_reply_by": "zhuangzhuang1988", "last_touched": 1652363780, "title": "关于 Java 很啰嗦的问题", "url": "https://www.v2ex.com/t/852381", "created": 1652329157, "deleted": 0, "content": "我先声明啊，我不是来吹捧 java 的，我只是想说一个事实，编程语言 没有谁绝对的碾压谁，真遇到了实际业务需求，写出来的代码量绝对是半斤八两。\r\n\r\n我希望大家 在 吐槽一门语言的时候，可以理性一点，不要瞎喷。这篇文章的用意就在于此。\r\n\r\n还有一点，我用 go 来比较，是因为 go 擅长的场景，跟 java 有一定的重叠，有很多公司都用 go 开发 web 。绝对没有对 go 不敬的意思。\r\n\r\n\r\n## 首先目录问题\r\n![image.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b75ecce167334d35a93f2262d21a98a7~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n总结下来，从工作量的角度来看，就是多了一个倒置的域名而已，而且只需要花建一层目录的时间，并且这个倒置的域名 是有他的意义在里面的，你们可以把他看做是这个\r\n\r\n```go\r\n// go 语言里的 import ，前面也有一个域名+项目名 来确定唯一性，包名里的倒置域名就是起这个作用的\r\nimport \"github.com/scan-util/xxx/xxx\"\r\n```\r\n\r\n还有很重要的一点，你们喷来喷去的那些多余的目录结构，在我们的观念里 根本就不存在，因为从来没有手工去创建过，要不是你们来吐槽，我们还真想不到这一点。\r\n\r\n不是因为 习惯了，而是真的从来没有为他们花过 5 秒钟以上的时间。有的连一毫秒都没花过。\r\n\r\n## 方法语法\r\ngo\r\n```go\r\nfunc BytesToString(val []byte) string\r\n```\r\n\r\njava\r\n```java\r\npublic String BytesToString(byte[] val)\r\n```\r\n我真没看出来多了什么东西\r\n\r\n## 定义变量\r\n\r\ngo\r\n\r\n```go\r\nname := \"张三\";\r\n\r\nvar map = make(map[string]interface{})\r\nvar array = make(string[], 10);\r\n```\r\n\r\njava\r\n\r\n```java\r\nString name = \"张三\";\r\n\r\nMap<String, Object> map = new HashMap<>();\r\nString[] array = new String[10];\r\n\r\n```\r\n好像多了点东西，又好像没多什么。\r\n\r\n## 循环\r\n\r\ngo\r\n\r\n```go\r\nfor(i:=0;i<100;i++){\r\n\r\n}\r\n\r\nfor(i<100){\r\n\r\n}\r\n```\r\n\r\njava\r\n\r\n```java\r\nfor(int i=0;i<100;i++){\r\n\r\n}\r\n\r\nwhile(i<100){\r\n\r\n}\r\n```\r\n\r\n确实多了几个字母。\r\n\r\n## 创建类\r\n\r\ngo\r\n\r\n我知道这叫结构体，跟类是两码事，但是 go 就是用它来兼容 oop 的，所以我只能用它来举例子，因为没有其他语法可以实现 oop 了\r\n```go\r\ntype DemoParam struct {\r\n    name string\r\n}\r\n\r\nfunc (demoParam *DemoParam) FormValues(key string) []string {\r\n}\r\n```\r\n\r\njava\r\n\r\n```java\r\nclass DemoParam {\r\n    public String name;\r\n    \r\n    public String[] FormValues(String key){\r\n        \r\n    }\r\n}\r\n```\r\n\r\n字数上相差多少，我是懒得数了，但是你们真的不觉得 java 的结构更清晰吗？ 其他的继承，多态 我就不拿出来说了，go 基本上是 用的 c 的编程思想，oop 只是个兼容， 所以用 java 来跟他比 oop 没什么可比性。因为是两个方向。\r\n\r\n## 异常处理\r\n\r\ngo\r\n\r\n```go\r\n\r\nfunc testFunction(paramStr string) (string, error) {\r\n    if xxx {\r\n        return Errors.New(\"xxxx\");\r\n    }\r\n}\r\n\r\nparamStr, err := testFunction(\"ok\")                              \r\nif err != nil {                           \r\n    log.Println(err.Error())                           \r\n}\r\n```\r\n\r\njava\r\n```java\r\npublic String testFunction(String paramStr){\r\n    if (xxx) {\r\n        throw new Execption(\"xxx\");\r\n    }\r\n}\r\n\r\ntry {\r\n    String paramStr = testFunction(\"ok\");\r\n} catch(Execption e){\r\n    log.Println(e.getMessage); \r\n}\r\n```\r\n\r\n这个看起来 go 好像 舒服一点，但是，实际场景下 go 经常是这种姿势\r\n```go\r\nparamStr, err := testFunction(\"ok\")                              \r\nif err != nil {                           \r\n    log.Println(err.Error())                           \r\n}\r\n\r\nparamStr, err := testFunction2(\"ok\")                              \r\nif err != nil {                           \r\n    log.Println(err.Error())                           \r\n}\r\n\r\nparamStr, err := testFunction3(\"ok\")                              \r\nif err != nil {                           \r\n    log.Println(err.Error())                           \r\n}\r\n```\r\n\r\n而 java 还是只需要这样\r\n```java\r\ntry {\r\n    String paramStr = testFunction(\"ok\");\r\n    String paramStr = testFunction2(\"ok\");\r\n    String paramStr = testFunction3(\"ok\");\r\n} catch(Execption e){\r\n    log.Println(e.getMessage); \r\n}\r\n```\r\n\r\n并且这是 经过人为判断后，返回的错误提示，如果是意外的异常呢？ go 里面叫 panic ，java 只要用 try catch 包住了 就可以捕获，但是 go 需要用 defer ，而且一旦抛出异常就意味着这个函数结束了，你如果想在出异常后，处理一下 然后继续往下走，go 会非常的麻烦。\r\n\r\n## 拆箱\r\n\r\ngo\r\n\r\n```go\r\n// 如果有一个 interface{} 类型的变量 a ，想转成 int\r\n// 你必须明确的知道，他装箱前就是 int ，不然根本没法拆，必须做一下类型判断。\r\n// 我之前在写框架的时候 就被折磨的够呛，一大堆不必要的 if\r\n```\r\n\r\njava\r\n```java\r\n// 不管装箱前是什么，只要他的值是一个整数\r\n// 无论是 1 ， 还是 \"1\", 都可以这么转\r\nInteger aInt = Integer.parseInteger(a.toString());\r\n\r\n// 也可以直接拆成 String\r\na.toString();\r\n```\r\n\r\n## 如果你们还不服，那很好办，\r\n\r\n你们出一个需求给我，我用 java ，你们用 go ，nodejs ，python ，php 随便什么语言，最后来比比 谁的代码少一些。 我敢说，绝对半斤八两，不可能有谁碾压谁的。\r\n\r\n而且还有一定的概率，java 在 丰富的生态+强大官方库的 加持下，可以更快完成。", "content_rendered": "<p>我先声明啊，我不是来吹捧 java 的，我只是想说一个事实，编程语言 没有谁绝对的碾压谁，真遇到了实际业务需求，写出来的代码量绝对是半斤八两。</p>\n<p>我希望大家 在 吐槽一门语言的时候，可以理性一点，不要瞎喷。这篇文章的用意就在于此。</p>\n<p>还有一点，我用 go 来比较，是因为 go 擅长的场景，跟 java 有一定的重叠，有很多公司都用 go 开发 web 。绝对没有对 go 不敬的意思。</p>\n<h2>首先目录问题</h2>\n<p><img alt=\"image.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b75ecce167334d35a93f2262d21a98a7%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>总结下来，从工作量的角度来看，就是多了一个倒置的域名而已，而且只需要花建一层目录的时间，并且这个倒置的域名 是有他的意义在里面的，你们可以把他看做是这个</p>\n<pre><code class=\"language-go\">// go 语言里的 import ，前面也有一个域名+项目名 来确定唯一性，包名里的倒置域名就是起这个作用的\nimport \"github.com/scan-util/xxx/xxx\"\n</code></pre>\n<p>还有很重要的一点，你们喷来喷去的那些多余的目录结构，在我们的观念里 根本就不存在，因为从来没有手工去创建过，要不是你们来吐槽，我们还真想不到这一点。</p>\n<p>不是因为 习惯了，而是真的从来没有为他们花过 5 秒钟以上的时间。有的连一毫秒都没花过。</p>\n<h2>方法语法</h2>\n<p>go</p>\n<pre><code class=\"language-go\">func BytesToString(val []byte) string\n</code></pre>\n<p>java</p>\n<pre><code class=\"language-java\">public String BytesToString(byte[] val)\n</code></pre>\n<p>我真没看出来多了什么东西</p>\n<h2>定义变量</h2>\n<p>go</p>\n<pre><code class=\"language-go\">name := \"张三\";\n\nvar map = make(map[string]interface{})\nvar array = make(string[], 10);\n</code></pre>\n<p>java</p>\n<pre><code class=\"language-java\">String name = \"张三\";\n\nMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();\nString[] array = new String[10];\n\n</code></pre>\n<p>好像多了点东西，又好像没多什么。</p>\n<h2>循环</h2>\n<p>go</p>\n<pre><code class=\"language-go\">for(i:=0;i&lt;100;i++){\n\n}\n\nfor(i&lt;100){\n\n}\n</code></pre>\n<p>java</p>\n<pre><code class=\"language-java\">for(int i=0;i&lt;100;i++){\n\n}\n\nwhile(i&lt;100){\n\n}\n</code></pre>\n<p>确实多了几个字母。</p>\n<h2>创建类</h2>\n<p>go</p>\n<p>我知道这叫结构体，跟类是两码事，但是 go 就是用它来兼容 oop 的，所以我只能用它来举例子，因为没有其他语法可以实现 oop 了</p>\n<pre><code class=\"language-go\">type DemoParam struct {\n    name string\n}\n\nfunc (demoParam *DemoParam) FormValues(key string) []string {\n}\n</code></pre>\n<p>java</p>\n<pre><code class=\"language-java\">class DemoParam {\n    public String name;\n    \n    public String[] FormValues(String key){\n        \n    }\n}\n</code></pre>\n<p>字数上相差多少，我是懒得数了，但是你们真的不觉得 java 的结构更清晰吗？ 其他的继承，多态 我就不拿出来说了，go 基本上是 用的 c 的编程思想，oop 只是个兼容， 所以用 java 来跟他比 oop 没什么可比性。因为是两个方向。</p>\n<h2>异常处理</h2>\n<p>go</p>\n<pre><code class=\"language-go\">\nfunc testFunction(paramStr string) (string, error) {\n    if xxx {\n        return Errors.New(\"xxxx\");\n    }\n}\n\nparamStr, err := testFunction(\"ok\")                              \nif err != nil {                           \n    log.Println(err.Error())                           \n}\n</code></pre>\n<p>java</p>\n<pre><code class=\"language-java\">public String testFunction(String paramStr){\n    if (xxx) {\n        throw new Execption(\"xxx\");\n    }\n}\n\ntry {\n    String paramStr = testFunction(\"ok\");\n} catch(Execption e){\n    log.Println(e.getMessage); \n}\n</code></pre>\n<p>这个看起来 go 好像 舒服一点，但是，实际场景下 go 经常是这种姿势</p>\n<pre><code class=\"language-go\">paramStr, err := testFunction(\"ok\")                              \nif err != nil {                           \n    log.Println(err.Error())                           \n}\n\nparamStr, err := testFunction2(\"ok\")                              \nif err != nil {                           \n    log.Println(err.Error())                           \n}\n\nparamStr, err := testFunction3(\"ok\")                              \nif err != nil {                           \n    log.Println(err.Error())                           \n}\n</code></pre>\n<p>而 java 还是只需要这样</p>\n<pre><code class=\"language-java\">try {\n    String paramStr = testFunction(\"ok\");\n    String paramStr = testFunction2(\"ok\");\n    String paramStr = testFunction3(\"ok\");\n} catch(Execption e){\n    log.Println(e.getMessage); \n}\n</code></pre>\n<p>并且这是 经过人为判断后，返回的错误提示，如果是意外的异常呢？ go 里面叫 panic ，java 只要用 try catch 包住了 就可以捕获，但是 go 需要用 defer ，而且一旦抛出异常就意味着这个函数结束了，你如果想在出异常后，处理一下 然后继续往下走，go 会非常的麻烦。</p>\n<h2>拆箱</h2>\n<p>go</p>\n<pre><code class=\"language-go\">// 如果有一个 interface{} 类型的变量 a ，想转成 int\n// 你必须明确的知道，他装箱前就是 int ，不然根本没法拆，必须做一下类型判断。\n// 我之前在写框架的时候 就被折磨的够呛，一大堆不必要的 if\n</code></pre>\n<p>java</p>\n<pre><code class=\"language-java\">// 不管装箱前是什么，只要他的值是一个整数\n// 无论是 1 ， 还是 \"1\", 都可以这么转\nInteger aInt = Integer.parseInteger(a.toString());\n\n// 也可以直接拆成 String\na.toString();\n</code></pre>\n<h2>如果你们还不服，那很好办，</h2>\n<p>你们出一个需求给我，我用 java ，你们用 go ，nodejs ，python ，php 随便什么语言，最后来比比 谁的代码少一些。 我敢说，绝对半斤八两，不可能有谁碾压谁的。</p>\n<p>而且还有一定的概率，java 在 丰富的生态+强大官方库的 加持下，可以更快完成。</p>\n", "last_modified": 1652329157, "replies": 190, "id": 852381}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6e27/13a6/557_large.png?m=1608969785", "name": "life", "avatar_normal": "https://cdn.v2ex.com/navatar/6e27/13a6/557_normal.png?m=1608969785", "title": "生活", "url": "https://www.v2ex.com/go/life", "topics": 3135, "footer": "", "header": "生活中的技术讨论", "title_alternative": "Life", "avatar_mini": "https://cdn.v2ex.com/navatar/6e27/13a6/557_mini.png?m=1608969785", "stars": 827, "aliases": [], "root": false, "id": 557, "parent_node_name": ""}, "member": {"id": 383636, "username": "HOU", "url": "https://www.v2ex.com/u/HOU", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/706dd50cfe5b19a125eebb7d98810140?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/706dd50cfe5b19a125eebb7d98810140?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/706dd50cfe5b19a125eebb7d98810140?s=73&d=retro", "created": 1550066114, "last_modified": 1644456678}, "last_reply_by": "cocong", "last_touched": 1652361752, "title": "关于 e 招贷，请教一下大家", "url": "https://www.v2ex.com/t/852356", "created": 1652324618, "deleted": 0, "content": "招行的老打电话，以前不爱接，今天接了下有点心动：\r\n\r\n最高有 20W 额度，可以自定义额度，分 36 ，24 或 18 期还\r\n\r\n假设贷款 10W, 分 36 期，则每期还款（本金加 2 折手续费）：2777+135=2912\r\n\r\n算了下年化只有 3%，很低啊，大家有谁办过这个，有什么坑没 ?", "content_rendered": "<p>招行的老打电话，以前不爱接，今天接了下有点心动：</p>\n<p>最高有 20W 额度，可以自定义额度，分 36 ，24 或 18 期还</p>\n<p>假设贷款 10W, 分 36 期，则每期还款（本金加 2 折手续费）：2777+135=2912</p>\n<p>算了下年化只有 3%，很低啊，大家有谁办过这个，有什么坑没 ?</p>\n", "last_modified": 1652324618, "replies": 87, "id": 852356}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/4e73/2ced/26_large.png?m=1584288945", "name": "hangzhou", "avatar_normal": "https://cdn.v2ex.com/navatar/4e73/2ced/26_normal.png?m=1584288945", "title": "杭州", "url": "https://www.v2ex.com/go/hangzhou", "topics": 1743, "footer": "", "header": "", "title_alternative": "Hangzhou", "avatar_mini": "https://cdn.v2ex.com/navatar/4e73/2ced/26_mini.png?m=1584288945", "stars": 1462, "aliases": [], "root": false, "id": 26, "parent_node_name": "cn"}, "member": {"id": 341739, "username": "blurh11E27", "url": "https://www.v2ex.com/u/blurh11E27", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/9626/727a/341739_mini.png?m=1649906254", "avatar_normal": "https://cdn.v2ex.com/avatar/9626/727a/341739_normal.png?m=1649906254", "avatar_large": "https://cdn.v2ex.com/avatar/9626/727a/341739_large.png?m=1649906254", "created": 1534402034, "last_modified": 1649906254}, "last_reply_by": "DamonLin", "last_touched": 1652362456, "title": "不知道我还能不能顶的住。", "url": "https://www.v2ex.com/t/852343", "created": 1652322796, "deleted": 0, "content": "如题，资金链断裂 ，杭州 6 点有哪些兼职，搬砖都行大家有没有兼职群 ，给我推一下。谢谢", "content_rendered": "<p>如题，资金链断裂 ，杭州 6 点有哪些兼职，搬砖都行大家有没有兼职群 ，给我推一下。谢谢</p>\n", "last_modified": 1652322796, "replies": 86, "id": 852343}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1651385949", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1651385949", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 48722, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1651385949", "stars": 7814, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 543981, "username": "vchroc", "url": "https://www.v2ex.com/u/vchroc", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/50773e3a41daddb9af3b605295c52c9c?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/50773e3a41daddb9af3b605295c52c9c?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/50773e3a41daddb9af3b605295c52c9c?s=73&d=retro", "created": 1619580702, "last_modified": 1638959889}, "last_reply_by": "codefun666", "last_touched": 1652366600, "title": "Go 特性少，语法糖太少，味儿苦啊！求开发体验好、生态全的语言推荐", "url": "https://www.v2ex.com/t/852388", "created": 1652330540, "deleted": 0, "content": "包括不限于错误 /异常处理，泛型，OOP 等，\r\n还有就是缺失类似 spring 的 bean 扫描功能", "content_rendered": "<p>包括不限于错误 /异常处理，泛型，OOP 等，\n还有就是缺失类似 spring 的 bean 扫描功能</p>\n", "last_modified": 1652330973, "replies": 81, "id": 852388}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/8613/985e/90_large.png?m=1648339948", "name": "python", "avatar_normal": "https://cdn.v2ex.com/navatar/8613/985e/90_normal.png?m=1648339948", "title": "Python", "url": "https://www.v2ex.com/go/python", "topics": 14948, "footer": "", "header": "这里讨论各种 Python 语言编程话题，也包括 Django，Tornado 等框架的讨论。这里是一个能够帮助你解决实际问题的地方。", "title_alternative": "Python", "avatar_mini": "https://cdn.v2ex.com/navatar/8613/985e/90_mini.png?m=1648339948", "stars": 9933, "aliases": [], "root": false, "id": 90, "parent_node_name": "programming"}, "member": {"id": 111562, "username": "yazoox", "url": "https://www.v2ex.com/u/yazoox", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "Shanghai", "tagline": "", "bio": "三人行，必有我师\r\n勤学与好问", "avatar_mini": "https://cdn.v2ex.com/avatar/7b39/2690/111562_mini.png?m=1635297358", "avatar_normal": "https://cdn.v2ex.com/avatar/7b39/2690/111562_normal.png?m=1635297358", "avatar_large": "https://cdn.v2ex.com/avatar/7b39/2690/111562_large.png?m=1635297358", "created": 1429328866, "last_modified": 1635297358}, "last_reply_by": "Richard14", "last_touched": 1652365350, "title": "大家有没有比较好的经验，管理两个版本的 Python , 2 & 3?", "url": "https://www.v2ex.com/t/852314", "created": 1652316335, "deleted": 0, "content": "发现很多程序的运行环境，都需要 python 支持，而且，版本还不一样。python2 和 python3 都需要。\r\n\r\n楼主一直整得不太好（因为不是经常使用），经常一个程序或者环境跑起来，缺 python 。所以特意来请教一下，大家有没有比较好的 best practice ，管理 python 的版本，2 & 3 ，以及对应的 pip 。\r\n\r\nmacOS 和 windows 都分别怎么设置，比较好用&通用？\r\n\r\n谢谢！", "content_rendered": "<p>发现很多程序的运行环境，都需要 python 支持，而且，版本还不一样。python2 和 python3 都需要。</p>\n<p>楼主一直整得不太好（因为不是经常使用），经常一个程序或者环境跑起来，缺 python 。所以特意来请教一下，大家有没有比较好的 best practice ，管理 python 的版本，2 &amp; 3 ，以及对应的 pip 。</p>\n<p>macOS 和 windows 都分别怎么设置，比较好用&amp;通用？</p>\n<p>谢谢！</p>\n", "last_modified": 1652316335, "replies": 64, "id": 852314}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/3c59/dc04/21_large.png?m=1650127623", "name": "shenzhen", "avatar_normal": "https://cdn.v2ex.com/navatar/3c59/dc04/21_normal.png?m=1650127623", "title": "深圳", "url": "https://www.v2ex.com/go/shenzhen", "topics": 2396, "footer": "", "header": "", "title_alternative": "Shenzhen", "avatar_mini": "https://cdn.v2ex.com/navatar/3c59/dc04/21_mini.png?m=1650127623", "stars": 1666, "aliases": [], "root": false, "id": 21, "parent_node_name": "cn"}, "member": {"id": 536734, "username": "MrCsharp", "url": "https://www.v2ex.com/u/MrCsharp", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/6778790d1537961b63a7829b0aeabd65?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/6778790d1537961b63a7829b0aeabd65?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/6778790d1537961b63a7829b0aeabd65?s=73&d=retro", "created": 1615268272, "last_modified": 1615268272}, "last_reply_by": "lyvv", "last_touched": 1652363868, "title": "我是新时代四败青年", "url": "https://www.v2ex.com/t/852316", "created": 1652317850, "deleted": 0, "content": "我是新时代四败青年：\r\n人生失败、事业失败、婚姻失败、人际关系失败\r\n\r\n我骄傲了吗？", "content_rendered": "<p>我是新时代四败青年：\n人生失败、事业失败、婚姻失败、人际关系失败</p>\n<p>我骄傲了吗？</p>\n", "last_modified": 1652317850, "replies": 62, "id": 852316}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/bbf9/4b34/403_large.png?m=1649961290", "name": "bitcoin", "avatar_normal": "https://cdn.v2ex.com/navatar/bbf9/4b34/403_normal.png?m=1649961290", "title": "Bitcoin", "url": "https://www.v2ex.com/go/bitcoin", "topics": 1434, "footer": "17FwbygitZ88JUZGZdUCE8AmpFiR86Nav3", "header": "P2P digital currency", "title_alternative": "Bitcoin", "avatar_mini": "https://cdn.v2ex.com/navatar/bbf9/4b34/403_mini.png?m=1649961290", "stars": 1556, "aliases": [], "root": false, "id": 403, "parent_node_name": "crypto"}, "member": {"id": 258847, "username": "mooniitt", "url": "https://www.v2ex.com/u/mooniitt", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/4474/01a0/258847_mini.png?m=1568100447", "avatar_normal": "https://cdn.v2ex.com/avatar/4474/01a0/258847_normal.png?m=1568100447", "avatar_large": "https://cdn.v2ex.com/avatar/4474/01a0/258847_large.png?m=1568100447", "created": 1507691743, "last_modified": 1568100447}, "last_reply_by": "cheese", "last_touched": 1652364696, "title": "比特币 开始暴跌了", "url": "https://www.v2ex.com/t/852413", "created": 1652336813, "deleted": 0, "content": "显卡还会降价吗", "content_rendered": "<p>显卡还会降价吗</p>\n", "last_modified": 1652336813, "replies": 61, "id": 852413}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6512/bd43/11_large.png?m=1651565926", "name": "linux", "avatar_normal": "https://cdn.v2ex.com/navatar/6512/bd43/11_normal.png?m=1651565926", "title": "Linux", "url": "https://www.v2ex.com/go/linux", "topics": 6689, "footer": "", "header": "Linux is a Unix-like computer operating system assembled under the model of free and open source software development and distribution.", "title_alternative": "Linux", "avatar_mini": "https://cdn.v2ex.com/navatar/6512/bd43/11_mini.png?m=1651565926", "stars": 5789, "aliases": [], "root": false, "id": 11, "parent_node_name": "os"}, "member": {"id": 561211, "username": "zedpass", "url": "https://www.v2ex.com/u/zedpass", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/0cec3cc23245ab2394d55d6db820d75b?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/0cec3cc23245ab2394d55d6db820d75b?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/0cec3cc23245ab2394d55d6db820d75b?s=73&d=retro", "created": 1636386089, "last_modified": 1650358741}, "last_reply_by": "Scare", "last_touched": 1652366979, "title": "Linux 桌面的春天要来了？", "url": "https://www.v2ex.com/t/852363", "created": 1652325234, "deleted": 0, "content": "Flutter 3 加入了对 Linux 桌面应用程序的支持：\r\nhttps://medium.com/flutter/introducing-flutter-3-5eb69151622f\r\n\r\nNVIDIA 也开源了 Linux GPU 内核模块：\r\nhttps://github.com/NVIDIA/open-gpu-kernel-modules", "content_rendered": "<p>Flutter 3 加入了对 Linux 桌面应用程序的支持：\n<a href=\"https://medium.com/flutter/introducing-flutter-3-5eb69151622f\" rel=\"nofollow\">https://medium.com/flutter/introducing-flutter-3-5eb69151622f</a></p>\n<p>NVIDIA 也开源了 Linux GPU 内核模块：\n<a href=\"https://github.com/NVIDIA/open-gpu-kernel-modules\" rel=\"nofollow\">https://github.com/NVIDIA/open-gpu-kernel-modules</a></p>\n", "last_modified": 1652325234, "replies": 55, "id": 852363}]