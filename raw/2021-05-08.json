[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/1f0e/3dad/19_large.png?m=1588235467", "name": "beijing", "avatar_normal": "https://cdn.v2ex.com/navatar/1f0e/3dad/19_normal.png?m=1588235467", "title": "北京", "url": "https://www.v2ex.com/go/beijing", "topics": 3146, "footer": "", "header": "", "title_alternative": "Beijing", "avatar_mini": "https://cdn.v2ex.com/navatar/1f0e/3dad/19_mini.png?m=1588235467", "stars": 1863, "aliases": [], "root": false, "id": 19, "parent_node_name": "cn"}, "member": {"username": "Pogbag", "website": "shua1zh.top", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/a49b/0fdd/300244_mini.png?m=1609399441", "bio": "", "url": "https://www.v2ex.com/u/Pogbag", "tagline": "", "twitter": "", "created": 1521078466, "avatar_large": "https://cdn.v2ex.com/avatar/a49b/0fdd/300244_mini.png?m=1609399441", "avatar_mini": "https://cdn.v2ex.com/avatar/a49b/0fdd/300244_mini.png?m=1609399441", "location": "", "btc": "", "id": 300244}, "last_reply_by": "wtdd", "last_touched": 1620390508, "title": "同事和我借房产证…", "url": "https://www.v2ex.com/t/775403", "created": 1620363130, "content": "坐标北京，我同事没有北京户口，最近单位给没户口的办居住证，需要租房合同和房本原件，他租的房子没有房本（即使有可能也不借给租户吧），然后他就找我了，想和我借，说要交到人力审核。<br><br>我同事挺老实的，但是拿原件还是有点担心，怕有风险，但是又在一个办公室，实在不好拒绝，就借口说房本在老家，你再想想别的办法，实在不行我快递过来借你。<br>", "content_rendered": "<p>坐标北京，我同事没有北京户口，最近单位给没户口的办居住证，需要租房合同和房本原件，他租的房子没有房本（即使有可能也不借给租户吧），然后他就找我了，想和我借，说要交到人力审核。<br/><br/>我同事挺老实的，但是拿原件还是有点担心，怕有风险，但是又在一个办公室，实在不好拒绝，就借口说房本在老家，你再想想别的办法，实在不行我快递过来借你。<br/></p>\n", "last_modified": 1620366383, "replies": 106, "id": 775403}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1620107083", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1620107083", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 44379, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1620107083", "stars": 7364, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"username": "LiuJiang", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/b6db/b91f/409961_mini.png?m=1595056186", "bio": null, "url": "https://www.v2ex.com/u/LiuJiang", "tagline": null, "twitter": null, "created": 1557221640, "avatar_large": "https://cdn.v2ex.com/avatar/b6db/b91f/409961_mini.png?m=1595056186", "avatar_mini": "https://cdn.v2ex.com/avatar/b6db/b91f/409961_mini.png?m=1595056186", "location": null, "btc": null, "id": 409961}, "last_reply_by": "yifeng33", "last_touched": 1620400297, "title": "我是如何突围传统行业的？", "url": "https://www.v2ex.com/t/775334", "created": 1620350869, "content": "# 背景\r\n\r\n自我介绍下，四年工作经验，头两年全栈开发，后两年专职做前端，目前已达到高级前端工程师水平，经历过三家公司。第一家公司，电商行业，做阿里 `ISV` 供应商，为淘宝卖家服务，也是我第一次接触百万 `UV` 级别的产品，在第一家公司呆了两年，由于达到技术瓶颈期，遂跳槽，第二家公司，航运物流行业，呆了六个月（工作强度对我来说，是真的高），身体不适，没有同意转正。目前这家，担任项目管理和前端组长，两个角色，目前呆了两年，做了很多东西，把自己的一些想法跟大家聊一聊。\r\n\r\n# 入职时的环境\r\n\r\n这是一家做保险和金融行业的公司，属于传统行业的科技公司，有点外包的性质，当然，也有自己的 `SaaS` 产品，由于是传统行业的公司，技术栈相对互联网公司来说，稍微落后一点。我刚来的时候，上一个前端要辞职了，然后做对接工作（告诉我，有啥问题，直接搜代码），我算是接盘侠，前任留下的屎山，其他的，大概有以下几点：\r\n\r\n## 前端组 4 个人\r\n\r\n其中一个归 CTO （做后端） 管，另外两个在广东，我入职的时候，也没有确认，到底要不要带人。我来的时候，就已经在了，后面我领导跟我说，要带下他们，我当时压根就没有带人的想法，也是个坑。\r\n\r\n## 历史项目有很多个，都是基于一套从 GitHub 上弄过来的项目框架\r\n\r\n-   没有前端工程化体系，开发周期长，开发质量差，维护困难\r\n\r\n-   前后端混合项目，剥离前端代码没有剥离干净，后端很多文件都在，不知道重不重要，前端代码运行在服务端，每次修改一行代码，看效果，需要拖到服务器上进行编译，编译大概 1-2 分钟左右，非常痛苦。\r\n\r\n-   完全熟悉该项目的人员已离职（技术和产品），项目交接没有处理好。\r\n\r\n-   业务逻辑非常混乱，没有相关的产品流程图，全凭记忆。\r\n\r\n-   服务器上运行的 `Node` 版本非常低，到现在还是 `8.x`，各种低版本的库都在，比如 `Ant Design` 用的 `3.6.2`，在项目开发中遇到穿梭框无法进行树状显示(代码一摸一样，在高版本 `3.19.2`，可以显示)。又比如还有这种 `\"translate.js\": \"git+https://github.com/MichelSimonot/translate.js.git”`\r\n\r\n-   尝试过升级库和卸载其他库，各种报错。\r\n\r\n-   代码缺乏注释，一个文件几千行，对 `React`，`Redux` 使用，欠缺理解。\r\n\r\n-   有过一次”爆炸”，此项目如果再继续迭代下去，随时可能继续”爆炸”，现在已经是在踩雷开发阶段。\r\n\r\n    在 2019 年 10 月 18 号，24：00 发生生产事故，事故表现为，操作特定页面，浏览器崩溃，卡死。\r\n\r\n    ![WechatIMG1151.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d33ac930d28b457984955cbdea008732~tplv-k3u1fbpfcp-watermark.image)\r\n\r\n    脚本执行时间非常长，后面经查，是由以下代码引起\r\n\r\n    ```\r\n    actions.getAgentListByPage({\r\n        companyId: currentAgent.companyId,\r\n        pageIndex: 1,\r\n        pageSize: 20000,\r\n        searchProvince: currentAgent.province,\r\n        searchCity: currentAgent.city\r\n    })\r\n    ```\r\n\r\n    页面很多地方存在请求 **_pageSize：20000_** 的情况，该代码是由前任前端编写，具体为何写出这样的代码，原因未知，处理方案给到后端解决，前端配合加入 `workbench` 字段，凌晨 1 点左右得到解决。\r\n\r\n-   一套项目上，运行着两套系统。\r\n\r\n-   打包出来的项目代码体积有 **49.5MB**，页面首次加载耗时 **11.4 min**\r\n\r\n    ![WechatIMG1153.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de04613d88da48cfaa28d97c8bc37517~tplv-k3u1fbpfcp-watermark.image)\r\n\r\n基于以上的原因，向领导提出过重构，没有同意，我认为可能有两个方面的顾虑，\r\n\r\n-   从人力资源条件来讲，并不允许。\r\n-   从公司战略角度来讲，能挣钱的项目就是好项目。但是，这并不影响我建设前端工程化体系。\r\n\r\n## 项目人员能力较弱\r\n\r\n-   测试同学报备 BUG，没有记录可复现步骤。\r\n-   任务管理工具平台没有真正利用起来，相关项目需求，BUG 没有整理起来放在上面。\r\n-   产品不理解大概的技术实现，没有把产品文档梳理，留存下来，不理解客户的真正需求，以至于技术实现比较鸡肋。\r\n\r\n## 前后端接口对接，没有相关的文档\r\n\r\n## 产品画的原形 和 UI 设计稿不规范\r\n\r\n列举了以上的这些点，烂摊子太多了，好在有一个点，领导的支持力度还不错，看我是如何突围的。\r\n\r\n# 明确自己的任务\r\n\r\n前端技术建设的核心目的，是为了提高开发效率，保证开发质量，为保障项目高质量按时交付，同时兼顾考虑中长期研发实际情况，结合团队实际能力，为未来做技术储备，为业务发展提供更多的可能性，大概将自己的分为以下四类\r\n\r\n-   **基础架构设计**，主要目的是从架构层面出发，通过流程化设计，规避常见问题，提高开发效率。\r\n-   **工程化设计**，与代码强相关，主要目的是提高代码质量，增强代码的长期可维护性，降低开发时间和成本。\r\n-   **团队管理**，通过合理有效的团队管理，提高团队人效比，为未来项目研发、技术发展，进行人才储备、技术研发。\r\n-   **项目管理**，进行合理的项目管理，合适的工时排期和迭代计划，提高项目交付质量和效率。\r\n\r\n# 如何解决\r\n\r\n首先，要对现有的问题进行梳理归纳，按照问题的优先级进行排序，然后，分阶段性目标进行实现，对于上面的问题，我大概整理了一张表格\r\n\r\n| 问题                   | 优先级 | 成本 | 目标                                                 |\r\n| ---------------------- | ------ | ---- | ---------------------------------------------------- |\r\n| 如何打造前端工程化体系 | p0     | 高   | 提升整个前端团队的开发效率、按时交付、保证交付质量。 |\r\n| 如何进行团队管理       | p0     | 中   | 进行人才储备，提高团队人员技术能力                   |\r\n| 如何进行项目管理       | p1     | 中   | 掌控全局，知道项目下的人都在做什么，资源协调         |\r\n\r\n## 团队管理\r\n\r\n### 人员管理\r\n\r\n-   **初来乍到**，首先就是跟大家一起聊聊天，了解他 /她的想法，以及个人情况、技术能力、兴趣爱好、性格特点等。\r\n\r\n-   **团建聚餐**，经常请大家喝奶茶 /咖啡，不定时的组织活动，通常是聚餐（个人出钱），为下面的工作，好开展。\r\n\r\n-   **导师帮带**，新人进来后，安排一个人带着他，答复常见问题，由简单的需求再到核心模块的负责，一点一点施展压力。\r\n\r\n-   **新人适应**，负责安排新成员的发展方向，并在新人入职的前几周，了解项目框架和开发模式，再安排其做基于现有页面的优化，帮助其了解不同人负责的业务。\r\n\r\n-   **责任划分**，明确团队里人员定位，并使其知晓，根据成员能力不同，态度不同，安排适合其的任务。\r\n\r\n-   **前端周会**，每周一次，组织大家开前端周会，在这个会上，过下大家目前手头上的事情，有没有遇到什么问题，需要协调的一些资源，进度把控等。\r\n\r\n-   **技术分享**，不定时的前端技术分享，主题不限，并把相关分享后的资料，上传到前端文档管理，方便日后的人员进行查看。\r\n\r\n### 权限管理\r\n\r\n主要是指代码权限控制，目的是确保代码安全，问题可控可避免可追溯\r\n\r\n具体管理举措有以下几条：\r\n\r\n-   **公司仓库**，代码属于公司财产，对代码进行权限隔离，启用内网 `GitLab`，默认关闭所有外网访问权限，针对每个项目，按实际需要给开发赋予指定权限。\r\n\r\n-   **提交权限**，允许开发在自己仓库下提交，但涉及到公司仓库的合并，需要发起 `PR`，然后在组长进行 `CR` 后，才能提交到主仓库。\r\n\r\n-   **发布权限**，对于将要发布到生产环境，权限给到组长，只允许组长进行发布。\r\n\r\n### 前后端接口对接\r\n\r\n前后端开发联调有一个严重问题，就是后端接口变动或者字段改动时，没有在事前事后通知相应前端开发，测试人员，导致效率底下，并且会出现各种异常情况。\r\n\r\n因此，通过梳理开发流程，出接口文档，作为对接标准。\r\n\r\n我们使用 `apiDoc` 来作为前后端联调标准。\r\n\r\n![WechatIMG1176.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e601cbd8a8e548bb9d985a055aaab043~tplv-k3u1fbpfcp-watermark.image)\r\n\r\n但在实际情况中，还是会有一些接口文档和实际接口不符的情况发生，导致一些问题产生，这个我们也在思考。\r\n\r\n## 前端工程化体系\r\n\r\n刚入职的时候，由于上面的项目框架问题太多，之前也尝试过解决，但，解决不了，领导也意识到了这点，而且也有新项目进来，就让我重新搞一套项目框架。所以，我自研了一套基于 `Webpack` 的项目框架和工程化体系，做这件事的目的，就如我上面提到过的一样，提升整个前端团队的开发效率、按时交付、保证交付质量。\r\n\r\n### 基础架构设计\r\n\r\n#### Git 分支管理规范化\r\n\r\n我们使用的是 `Git Flow` 分支管理策略\r\n\r\n`Git Flow` 最开始是由 `Vincent Driessen` 发行并广受欢迎，这个模型是在 2010 年构思出来的，而现在距今已有 10 多年了，而 `Git` 本身才诞生不久。在过去的十年中，`Git Flow` 在许多软件团队中非常流行\r\n\r\n##### 分支命名规范\r\n\r\n-   master 分支：master 分支只有一个，名称即为 master 。GitHub 现在叫 main\r\n\r\n-   develop 分支：develop 分支只有一个，名称即为 develop\r\n\r\n-   feature 分支：feature/<功能名>，例如：feature/login，以便其他人可以看到你的工作\r\n\r\n-   hotfix 分支：hotfix/日期，例如：hotfix/0104\r\n\r\n##### 分支说明\r\n\r\n-   master || main 分支：存储正式发布的产品，`master || main` 分支上的产品要求随时处于可部署状态。`master || main` 分支只能通过与其他分支合并来更新内容，禁止直接在 `master || main` 分支进行修改。\r\n\r\n-   develop 分支：汇总开发者完成的工作成果，`develop` 分支上的产品可以是缺失功能模块的半成品，但是已有的功能模块不能是半成品。`develop` 分支只能通过与其他分支合并来更新内容，禁止直接在 `develop` 分支进行修改。\r\n\r\n-   feature 分支：当要开发新功能时，从 master 分支创建一个新的 `feature` 分支，并在 `feature` 分支上进行开发。开发完成后，需要将该 `feature` 分支合并到 `develop` 分支，最后删除该 `feature` 分支。\r\n\r\n-   release 分支：当 `develop` 分支上的项目准备发布时，从 `develop` 分支上创建一个新的 `release` 分支，新建的 `release` 分支只能进行质量测试、bug 修复、文档生成等面向发布的任务，不能再添加功能。这一系列发布任务完成后，需要将 `release` 分支合并到 `master` 分支上，并根据版本号为 `master` 分支添加 `tag`，然后将 `release` 分支创建以来的修改合并回 `develop` 分支，最后删除 `release` 分支。\r\n\r\n-   hotfix 分支：当 `master` 分支中的产品出现需要立即修复的 bug 时，从 `master` 分支上创建一个新的 `hotfix` 分支，并在 `hotfix` 分支上进行 BUG 修复。修复完成后，需要将 `hotfix` 分支合并到 `master` 分支和 `develop` 分支，并为 `master` 分支添加新的版本号 `tag`，最后删除 `hotfix` 分支。\r\n\r\n##### 提交信息规范\r\n\r\n提交信息应该描述“做了什么”和“这么做的原因”，必要时还可以加上“造成的影响”，主要由 **3** 个部分组成：`Header`、`Body` 和 `Footer`。\r\n\r\nHeader\r\nHeader 部分只有 1 行，格式为`<type>(<scope>): <subject>`。\r\n\r\ntype 用于说明提交的类型，共有 8 个候选值：\r\n\r\n1. feat：新功能（ feature ）\r\n\r\n2. fix：问题修复\r\n\r\n3. docs：文档\r\n\r\n4. style：调整格式（不影响代码运行）\r\n\r\n5. refactor：重构\r\n\r\n6. test：增加测试\r\n\r\n7. chore：构建过程或辅助工具的变动\r\n\r\n8. revert：撤销以前的提交\r\n\r\n9. scope 用于说明提交的影响范围，内容根据具体项目而定。\r\n\r\nsubject 用于概括提交内容。\r\n\r\nBody 省略\r\n\r\nFooter 省略\r\n\r\n![WechatIMG1175.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95db2bd611d144e596026143d02fba44~tplv-k3u1fbpfcp-watermark.image)\r\n\r\n这样做起来的好处，这个项目下：\r\n\r\n-   对于分支，每个人在做什么，我看分支就清楚。\r\n-   对于修改内容，看前缀就知道这个文件改动了什么。\r\n-   对于版本迭代，看 `Tag` 都上线了什么内容。\r\n\r\n总之，一目了然。\r\n\r\n#### 开发人员基本流程\r\n\r\n![codeProcess.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21810c5662374b2bb10e11e307e83d7c~tplv-k3u1fbpfcp-watermark.image)\r\n\r\n在这个流程中，开发人员只对个人仓库拥有可控权，无法直接改变公司仓库代码，当需要提交到公司仓库下时，需要发起 `PR` 请求，经过组长 `CR` 后，将其代码合并到公司仓库下。\r\n\r\n主分支代码和线上代码进行隔离，由组长将指定版本的 `Tag` 发布到生产环境，再通过运营人员直接从 `GitLab` 上拉取指定的 `Tag`，然后打包发布。\r\n\r\n通过以上流程，前端代码能保证高质量，高稳定性的状态，运行在服务器端。\r\n\r\n### 工程化设计\r\n\r\n要根据实际业务情况和团队规模，技术水平来做，关键是要形成一个闭环，所谓闭环就是从零开始到上线再到迭代的全链路，有很多节点，这些节点需要根据实际情况进行设计，避免过度设计。\r\n\r\n#### 定制 Webpack 项目框架\r\n\r\n为何不是 create-react-app\r\n\r\ncreate-react-app 是基于 `webpack` 的打包层方案，包含 `build 、dev 、lint` 等，他在打包层把体验做到了极致，但是不包含路由，不是框架，也不支持配置。所以，如果大家想基于他修改部分配置，或者希望在打包层之外也做技术收敛时，就会遇到困难。\r\n\r\n为何不是 umi\r\n\r\numi 提供的功能很多，这也导致它太过于臃肿。而且你还要去学它的封装化配置，而不是学原生第三方库的配置，如果你只想要一些简单的功能，追求更高的可玩性，哪 umi 不太适合。\r\n\r\n所以，我自己定制了一套脚手架，实现了以下功能：\r\n\r\n-   **快速上手**，只要了解 React 、Mobx 、Webpack 和 React Router，就可以快速搭建中后台管理平台\r\n-   **路由系统**，基于 react-router 实现的路由系统\r\n-   **Loading**，不需要重复写组件 Loading 判断\r\n-   **国际化**，基于 react-intl-universal 实现的国际化\r\n-   **网络请求**，基于 axios 实现的请求拦截\r\n-   **页面交互**，基于 mobx 实现的数据交互方式\r\n-   **UI**，使用业界最著名的 ant-design\r\n-   **代码规范校验**，使用 eslint 、pre-commit 、lint-staged 、prettier 、stylelint\r\n-   **模拟请求数据**，基于 mockjs 实现\r\n-   **打包工具**，目前最流行的 Webpack\r\n\r\n解决了以下的问题：\r\n\r\n-   约束开发人员代码规范\r\n-   方便提供给其他开发使用标准的脚手架，并提供技术支持\r\n\r\n完成整个编码过程的一个闭环：\r\n\r\n-   编码前：编码规范，最佳实践\r\n-   编码中：自研项目框架、代码校验\r\n-   编码后：发布部署工具 JenKins，手动发布或 CI/CD\r\n\r\n这些节点要视实际情况，以最小成本去做，然后逐步升级。比如编码规范，我们是采用业界比较著名的 `Airbnb JavaScript` 代码规范，搭配`eslint 、pre-commit 、lint-staged 、prettier 、stylelint` 去进行约束。\r\n\r\n这套项目框架，目前开发体验非常爽，在我司多个产品线上，投入使用，并已开源，**[框架地址]( https://github.com/xuya227939/tristana.git)**，演示页面比较少，大佬们觉得不错的话，可以给个 Star 🌟，也欢迎给项目提 issues ～\r\n\r\n#### 业务场景\r\n\r\n我们是做 `ToB` 业务，存在页面上大量使用表单的场景，所以，把我们的表单页面做成可配置化，实现了大部分页面表单配置化，减少前端人力资源投入。\r\n\r\n针对公司的实际业务场景，其他子系统不会特别复杂，页面也不会多，共享一套账号体系，这里采用的思路是只有一个项目，不分主从系统，通过 `Webpack` 配置多页面，不同的子系统进入的首页内容不一样，加载内容不一样，菜单导航，则通过后端对每个租户进行区分，来做到租户看到的菜单系统不一样。\r\n\r\n如果子系统特别复杂，有主从系统概念，可以考虑使用微服务设计，这里不做过多介绍。\r\n\r\n#### 静态资源\r\n\r\n除了业务代码以外，前端还会有一些公共静态资源，例如 `React` 资源，`Ant Design` 资源，`BizCharts` 资源，以及一些图片文件等。\r\n\r\n对于这些文件，是所有项目所共享的，假如这些文件分散在各个项目里，既没必要，也容易导致不同项目依赖文件不统一。\r\n\r\n我们是放在 `S3` 上，做 `CDN` 静态资源加速，然后前端项目通过引入`url` 来使用这些资源，这样可以减轻自己的服务器网络带宽消耗。\r\n\r\n## 项目管理\r\n\r\n-   **任务分配**，产品把相关的需求，经过讨论，可行性分析，通过项目管理工具，放到迭代计划中，录入开发工时，测试工时。\r\n\r\n-   **文档管理**，采用项目管理工具自带的文档，要求做到文档可以团队编辑，可以查看到编辑历史。\r\n\r\n-   **项目周会**，过大家手上目前的迭代进度，遇到的问题，需要协调的资源，风险控制等。\r\n\r\n-   **项目复盘**，复盘首先是要做的是事实陈述，开始诊断、分析存在差异的原因，找出导致成功或失败的根本原因后进行规律总结。明白为什么会成功、哪些关键行为起了作用，这些行为有没有适用条件，对于提高后续行动的成功率有没有价值。\r\n\r\n### 熟悉产品线业务\r\n\r\n所谓技术服务业务，找产品了解现有的业务流程以及痛点，甚至未来要做的一些产品规划，好的技术架构，要考虑各种各样的业务场景，怎样才能结合业务的复杂度，设计出颗粒度更加细化的组件。\r\n\r\n画出产品架构图\r\n\r\n![WechatIMG1152.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11c8fc6cf5b6464199a56b238b4a8a35~tplv-k3u1fbpfcp-watermark.image)\r\n\r\n### 提升相关人员的能力\r\n\r\n#### 产品人员\r\n\r\n需求频繁且混乱，决策摇摆不定、动辄推倒重来。市面上一个好的产品经理是很贵的，没个三四万是拿不下一个真正靠谱的能抗住复杂产品线的产品经理，但是很多公司老板是不愿意花这个钱，一般就会招个工作一两年的产品经理先过来，顶个位置把这个工具给做出来就行了。恰恰因为这样一个认知导致产品经理这一层他既没话语权，又不能让自己闲着，所以层出不穷的需求全堆上来了，而对于公司长久型的产品架构就把控不住，如果一个产品经理无法起到，上对客户负责，下对开发负责，不会对所有需求进行筛选，把需求只会丢给开发，不会进行工时把控和质量把控。甚至对现有产品有什么功能，都不了解，那么就不是一个合格的产品。\r\n\r\n所以对产品经理的要求非常严格，因为一个公司，如果战略方向把握住了，那么核心是要看产品，能否把握住市场方向，非常关键。这样才能决定你是否能占有市场，由于我司是做一个 `ToB SaaS` 化的平台，所以，必须要求产品经理清楚的了解客户实际需求，需求背后的实际场景，提炼出来哪些是共性的需求，哪些是客户定制化的需求，然后再讨论，再进行落地实际的开发。\r\n\r\n#### 测试人员\r\n\r\n对测试人员，尽量覆盖全所有场景，保证核心流程畅通，要求能找到复现步骤，提高开发解决 BUG 的效率。\r\n\r\n### 设计规范\r\n\r\n由于我司采用的是 `Ant Design` UI 库，所以设计标准，尽量都是按照 `Ant Design` 现成组件和样式来做，避免开发二次修改，参考这个链接 [Ant Design 设计原则]( https://ant.design/docs/spec/introduce-cn)\r\n\r\n某个列表页\r\n\r\n![WechatIMG1180.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb6638ebc1ae4df5aca1f72314b829e0~tplv-k3u1fbpfcp-watermark.image)\r\n\r\n普通的列表，和设计，产品都约定好，上面是筛选，下面是按钮，底部是表格展示。\r\n\r\n某个详情页\r\n\r\n![WechatIMG1181.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6348152e2214dccbb81102a44e10585~tplv-k3u1fbpfcp-watermark.image)\r\n\r\n详情页大量会使用到表单，所以直接使用 `Ant Design` 的 `From` 表单组件。\r\n\r\n表单每行放多少个，都是以 `Ant Design` 组件来的。\r\n\r\n这样带来的好处就是尽量避免定制化的开发，所有列表和详情都是按照这种风格来进行开发。\r\n\r\n# 总结\r\n\r\n上面这些，包含其他的，大概花了一年多的时间，建设完成，我们目前的基建状况如下表所示\r\n\r\n![Infrastructure.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/006e3ec44e8e47b98c697222dd3e2e41~tplv-k3u1fbpfcp-watermark.image)\r\n\r\n前端人员的开发效率较之前，提升了一倍左右的开发效率，前提是完全熟悉我这套项目框架的开发模式。\r\n\r\n项目管理，人员工时占比，资源协调，目前下来都还不错，平稳进行。\r\n\r\n如果你觉得对你有帮助或启发，欢迎点赞留言。", "content_rendered": "<h1>背景</h1>\n<p>自我介绍下，四年工作经验，头两年全栈开发，后两年专职做前端，目前已达到高级前端工程师水平，经历过三家公司。第一家公司，电商行业，做阿里 <code>ISV</code> 供应商，为淘宝卖家服务，也是我第一次接触百万 <code>UV</code> 级别的产品，在第一家公司呆了两年，由于达到技术瓶颈期，遂跳槽，第二家公司，航运物流行业，呆了六个月（工作强度对我来说，是真的高），身体不适，没有同意转正。目前这家，担任项目管理和前端组长，两个角色，目前呆了两年，做了很多东西，把自己的一些想法跟大家聊一聊。</p>\n<h1>入职时的环境</h1>\n<p>这是一家做保险和金融行业的公司，属于传统行业的科技公司，有点外包的性质，当然，也有自己的 <code>SaaS</code> 产品，由于是传统行业的公司，技术栈相对互联网公司来说，稍微落后一点。我刚来的时候，上一个前端要辞职了，然后做对接工作（告诉我，有啥问题，直接搜代码），我算是接盘侠，前任留下的屎山，其他的，大概有以下几点：</p>\n<h2>前端组 4 个人</h2>\n<p>其中一个归 CTO （做后端） 管，另外两个在广东，我入职的时候，也没有确认，到底要不要带人。我来的时候，就已经在了，后面我领导跟我说，要带下他们，我当时压根就没有带人的想法，也是个坑。</p>\n<h2>历史项目有很多个，都是基于一套从 GitHub 上弄过来的项目框架</h2>\n<ul>\n<li>\n<p>没有前端工程化体系，开发周期长，开发质量差，维护困难</p>\n</li>\n<li>\n<p>前后端混合项目，剥离前端代码没有剥离干净，后端很多文件都在，不知道重不重要，前端代码运行在服务端，每次修改一行代码，看效果，需要拖到服务器上进行编译，编译大概 1-2 分钟左右，非常痛苦。</p>\n</li>\n<li>\n<p>完全熟悉该项目的人员已离职（技术和产品），项目交接没有处理好。</p>\n</li>\n<li>\n<p>业务逻辑非常混乱，没有相关的产品流程图，全凭记忆。</p>\n</li>\n<li>\n<p>服务器上运行的 <code>Node</code> 版本非常低，到现在还是 <code>8.x</code>，各种低版本的库都在，比如 <code>Ant Design</code> 用的 <code>3.6.2</code>，在项目开发中遇到穿梭框无法进行树状显示(代码一摸一样，在高版本 <code>3.19.2</code>，可以显示)。又比如还有这种 <code>\"translate.js\": \"git+<a href=\"https://github.com/MichelSimonot/translate.js.git”\" rel=\"nofollow\">https://github.com/MichelSimonot/translate.js.git”</a></code></p>\n</li>\n<li>\n<p>尝试过升级库和卸载其他库，各种报错。</p>\n</li>\n<li>\n<p>代码缺乏注释，一个文件几千行，对 <code>React</code>，<code>Redux</code> 使用，欠缺理解。</p>\n</li>\n<li>\n<p>有过一次”爆炸”，此项目如果再继续迭代下去，随时可能继续”爆炸”，现在已经是在踩雷开发阶段。</p>\n<p>在 2019 年 10 月 18 号，24：00 发生生产事故，事故表现为，操作特定页面，浏览器崩溃，卡死。</p>\n<p><img alt=\"WechatIMG1151.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d33ac930d28b457984955cbdea008732%7Etplv-k3u1fbpfcp-watermark.image\"/></p>\n<p>脚本执行时间非常长，后面经查，是由以下代码引起</p>\n<pre><code>actions.getAgentListByPage({\n    companyId: currentAgent.companyId,\n    pageIndex: 1,\n    pageSize: 20000,\n    searchProvince: currentAgent.province,\n    searchCity: currentAgent.city\n})\n</code></pre>\n<p>页面很多地方存在请求 <strong><em>pageSize：20000</em></strong> 的情况，该代码是由前任前端编写，具体为何写出这样的代码，原因未知，处理方案给到后端解决，前端配合加入 <code>workbench</code> 字段，凌晨 1 点左右得到解决。</p>\n</li>\n<li>\n<p>一套项目上，运行着两套系统。</p>\n</li>\n<li>\n<p>打包出来的项目代码体积有 <strong>49.5MB</strong>，页面首次加载耗时 <strong>11.4 min</strong></p>\n<p><img alt=\"WechatIMG1153.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de04613d88da48cfaa28d97c8bc37517%7Etplv-k3u1fbpfcp-watermark.image\"/></p>\n</li>\n</ul>\n<p>基于以上的原因，向领导提出过重构，没有同意，我认为可能有两个方面的顾虑，</p>\n<ul>\n<li>从人力资源条件来讲，并不允许。</li>\n<li>从公司战略角度来讲，能挣钱的项目就是好项目。但是，这并不影响我建设前端工程化体系。</li>\n</ul>\n<h2>项目人员能力较弱</h2>\n<ul>\n<li>测试同学报备 BUG，没有记录可复现步骤。</li>\n<li>任务管理工具平台没有真正利用起来，相关项目需求，BUG 没有整理起来放在上面。</li>\n<li>产品不理解大概的技术实现，没有把产品文档梳理，留存下来，不理解客户的真正需求，以至于技术实现比较鸡肋。</li>\n</ul>\n<h2>前后端接口对接，没有相关的文档</h2>\n<h2>产品画的原形 和 UI 设计稿不规范</h2>\n<p>列举了以上的这些点，烂摊子太多了，好在有一个点，领导的支持力度还不错，看我是如何突围的。</p>\n<h1>明确自己的任务</h1>\n<p>前端技术建设的核心目的，是为了提高开发效率，保证开发质量，为保障项目高质量按时交付，同时兼顾考虑中长期研发实际情况，结合团队实际能力，为未来做技术储备，为业务发展提供更多的可能性，大概将自己的分为以下四类</p>\n<ul>\n<li><strong>基础架构设计</strong>，主要目的是从架构层面出发，通过流程化设计，规避常见问题，提高开发效率。</li>\n<li><strong>工程化设计</strong>，与代码强相关，主要目的是提高代码质量，增强代码的长期可维护性，降低开发时间和成本。</li>\n<li><strong>团队管理</strong>，通过合理有效的团队管理，提高团队人效比，为未来项目研发、技术发展，进行人才储备、技术研发。</li>\n<li><strong>项目管理</strong>，进行合理的项目管理，合适的工时排期和迭代计划，提高项目交付质量和效率。</li>\n</ul>\n<h1>如何解决</h1>\n<p>首先，要对现有的问题进行梳理归纳，按照问题的优先级进行排序，然后，分阶段性目标进行实现，对于上面的问题，我大概整理了一张表格</p>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>优先级</th>\n<th>成本</th>\n<th>目标</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>如何打造前端工程化体系</td>\n<td>p0</td>\n<td>高</td>\n<td>提升整个前端团队的开发效率、按时交付、保证交付质量。</td>\n</tr>\n<tr>\n<td>如何进行团队管理</td>\n<td>p0</td>\n<td>中</td>\n<td>进行人才储备，提高团队人员技术能力</td>\n</tr>\n<tr>\n<td>如何进行项目管理</td>\n<td>p1</td>\n<td>中</td>\n<td>掌控全局，知道项目下的人都在做什么，资源协调</td>\n</tr>\n</tbody></table><h2>团队管理</h2>\n<h3>人员管理</h3>\n<ul>\n<li>\n<p><strong>初来乍到</strong>，首先就是跟大家一起聊聊天，了解他 /她的想法，以及个人情况、技术能力、兴趣爱好、性格特点等。</p>\n</li>\n<li>\n<p><strong>团建聚餐</strong>，经常请大家喝奶茶 /咖啡，不定时的组织活动，通常是聚餐（个人出钱），为下面的工作，好开展。</p>\n</li>\n<li>\n<p><strong>导师帮带</strong>，新人进来后，安排一个人带着他，答复常见问题，由简单的需求再到核心模块的负责，一点一点施展压力。</p>\n</li>\n<li>\n<p><strong>新人适应</strong>，负责安排新成员的发展方向，并在新人入职的前几周，了解项目框架和开发模式，再安排其做基于现有页面的优化，帮助其了解不同人负责的业务。</p>\n</li>\n<li>\n<p><strong>责任划分</strong>，明确团队里人员定位，并使其知晓，根据成员能力不同，态度不同，安排适合其的任务。</p>\n</li>\n<li>\n<p><strong>前端周会</strong>，每周一次，组织大家开前端周会，在这个会上，过下大家目前手头上的事情，有没有遇到什么问题，需要协调的一些资源，进度把控等。</p>\n</li>\n<li>\n<p><strong>技术分享</strong>，不定时的前端技术分享，主题不限，并把相关分享后的资料，上传到前端文档管理，方便日后的人员进行查看。</p>\n</li>\n</ul>\n<h3>权限管理</h3>\n<p>主要是指代码权限控制，目的是确保代码安全，问题可控可避免可追溯</p>\n<p>具体管理举措有以下几条：</p>\n<ul>\n<li>\n<p><strong>公司仓库</strong>，代码属于公司财产，对代码进行权限隔离，启用内网 <code>GitLab</code>，默认关闭所有外网访问权限，针对每个项目，按实际需要给开发赋予指定权限。</p>\n</li>\n<li>\n<p><strong>提交权限</strong>，允许开发在自己仓库下提交，但涉及到公司仓库的合并，需要发起 <code>PR</code>，然后在组长进行 <code>CR</code> 后，才能提交到主仓库。</p>\n</li>\n<li>\n<p><strong>发布权限</strong>，对于将要发布到生产环境，权限给到组长，只允许组长进行发布。</p>\n</li>\n</ul>\n<h3>前后端接口对接</h3>\n<p>前后端开发联调有一个严重问题，就是后端接口变动或者字段改动时，没有在事前事后通知相应前端开发，测试人员，导致效率底下，并且会出现各种异常情况。</p>\n<p>因此，通过梳理开发流程，出接口文档，作为对接标准。</p>\n<p>我们使用 <code>apiDoc</code> 来作为前后端联调标准。</p>\n<p><img alt=\"WechatIMG1176.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e601cbd8a8e548bb9d985a055aaab043%7Etplv-k3u1fbpfcp-watermark.image\"/></p>\n<p>但在实际情况中，还是会有一些接口文档和实际接口不符的情况发生，导致一些问题产生，这个我们也在思考。</p>\n<h2>前端工程化体系</h2>\n<p>刚入职的时候，由于上面的项目框架问题太多，之前也尝试过解决，但，解决不了，领导也意识到了这点，而且也有新项目进来，就让我重新搞一套项目框架。所以，我自研了一套基于 <code>Webpack</code> 的项目框架和工程化体系，做这件事的目的，就如我上面提到过的一样，提升整个前端团队的开发效率、按时交付、保证交付质量。</p>\n<h3>基础架构设计</h3>\n<h4>Git 分支管理规范化</h4>\n<p>我们使用的是 <code>Git Flow</code> 分支管理策略</p>\n<p><code>Git Flow</code> 最开始是由 <code>Vincent Driessen</code> 发行并广受欢迎，这个模型是在 2010 年构思出来的，而现在距今已有 10 多年了，而 <code>Git</code> 本身才诞生不久。在过去的十年中，<code>Git Flow</code> 在许多软件团队中非常流行</p>\n<h5>分支命名规范</h5>\n<ul>\n<li>\n<p>master 分支：master 分支只有一个，名称即为 master 。GitHub 现在叫 main</p>\n</li>\n<li>\n<p>develop 分支：develop 分支只有一个，名称即为 develop</p>\n</li>\n<li>\n<p>feature 分支：feature/&lt;功能名&gt;，例如：feature/login，以便其他人可以看到你的工作</p>\n</li>\n<li>\n<p>hotfix 分支：hotfix/日期，例如：hotfix/0104</p>\n</li>\n</ul>\n<h5>分支说明</h5>\n<ul>\n<li>\n<p>master || main 分支：存储正式发布的产品，<code>master || main</code> 分支上的产品要求随时处于可部署状态。<code>master || main</code> 分支只能通过与其他分支合并来更新内容，禁止直接在 <code>master || main</code> 分支进行修改。</p>\n</li>\n<li>\n<p>develop 分支：汇总开发者完成的工作成果，<code>develop</code> 分支上的产品可以是缺失功能模块的半成品，但是已有的功能模块不能是半成品。<code>develop</code> 分支只能通过与其他分支合并来更新内容，禁止直接在 <code>develop</code> 分支进行修改。</p>\n</li>\n<li>\n<p>feature 分支：当要开发新功能时，从 master 分支创建一个新的 <code>feature</code> 分支，并在 <code>feature</code> 分支上进行开发。开发完成后，需要将该 <code>feature</code> 分支合并到 <code>develop</code> 分支，最后删除该 <code>feature</code> 分支。</p>\n</li>\n<li>\n<p>release 分支：当 <code>develop</code> 分支上的项目准备发布时，从 <code>develop</code> 分支上创建一个新的 <code>release</code> 分支，新建的 <code>release</code> 分支只能进行质量测试、bug 修复、文档生成等面向发布的任务，不能再添加功能。这一系列发布任务完成后，需要将 <code>release</code> 分支合并到 <code>master</code> 分支上，并根据版本号为 <code>master</code> 分支添加 <code>tag</code>，然后将 <code>release</code> 分支创建以来的修改合并回 <code>develop</code> 分支，最后删除 <code>release</code> 分支。</p>\n</li>\n<li>\n<p>hotfix 分支：当 <code>master</code> 分支中的产品出现需要立即修复的 bug 时，从 <code>master</code> 分支上创建一个新的 <code>hotfix</code> 分支，并在 <code>hotfix</code> 分支上进行 BUG 修复。修复完成后，需要将 <code>hotfix</code> 分支合并到 <code>master</code> 分支和 <code>develop</code> 分支，并为 <code>master</code> 分支添加新的版本号 <code>tag</code>，最后删除 <code>hotfix</code> 分支。</p>\n</li>\n</ul>\n<h5>提交信息规范</h5>\n<p>提交信息应该描述“做了什么”和“这么做的原因”，必要时还可以加上“造成的影响”，主要由 <strong>3</strong> 个部分组成：<code>Header</code>、<code>Body</code> 和 <code>Footer</code>。</p>\n<p>Header\nHeader 部分只有 1 行，格式为<code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code>。</p>\n<p>type 用于说明提交的类型，共有 8 个候选值：</p>\n<ol>\n<li>\n<p>feat：新功能（ feature ）</p>\n</li>\n<li>\n<p>fix：问题修复</p>\n</li>\n<li>\n<p>docs：文档</p>\n</li>\n<li>\n<p>style：调整格式（不影响代码运行）</p>\n</li>\n<li>\n<p>refactor：重构</p>\n</li>\n<li>\n<p>test：增加测试</p>\n</li>\n<li>\n<p>chore：构建过程或辅助工具的变动</p>\n</li>\n<li>\n<p>revert：撤销以前的提交</p>\n</li>\n<li>\n<p>scope 用于说明提交的影响范围，内容根据具体项目而定。</p>\n</li>\n</ol>\n<p>subject 用于概括提交内容。</p>\n<p>Body 省略</p>\n<p>Footer 省略</p>\n<p><img alt=\"WechatIMG1175.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95db2bd611d144e596026143d02fba44%7Etplv-k3u1fbpfcp-watermark.image\"/></p>\n<p>这样做起来的好处，这个项目下：</p>\n<ul>\n<li>对于分支，每个人在做什么，我看分支就清楚。</li>\n<li>对于修改内容，看前缀就知道这个文件改动了什么。</li>\n<li>对于版本迭代，看 <code>Tag</code> 都上线了什么内容。</li>\n</ul>\n<p>总之，一目了然。</p>\n<h4>开发人员基本流程</h4>\n<p><img alt=\"codeProcess.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21810c5662374b2bb10e11e307e83d7c%7Etplv-k3u1fbpfcp-watermark.image\"/></p>\n<p>在这个流程中，开发人员只对个人仓库拥有可控权，无法直接改变公司仓库代码，当需要提交到公司仓库下时，需要发起 <code>PR</code> 请求，经过组长 <code>CR</code> 后，将其代码合并到公司仓库下。</p>\n<p>主分支代码和线上代码进行隔离，由组长将指定版本的 <code>Tag</code> 发布到生产环境，再通过运营人员直接从 <code>GitLab</code> 上拉取指定的 <code>Tag</code>，然后打包发布。</p>\n<p>通过以上流程，前端代码能保证高质量，高稳定性的状态，运行在服务器端。</p>\n<h3>工程化设计</h3>\n<p>要根据实际业务情况和团队规模，技术水平来做，关键是要形成一个闭环，所谓闭环就是从零开始到上线再到迭代的全链路，有很多节点，这些节点需要根据实际情况进行设计，避免过度设计。</p>\n<h4>定制 Webpack 项目框架</h4>\n<p>为何不是 create-react-app</p>\n<p>create-react-app 是基于 <code>webpack</code> 的打包层方案，包含 <code>build 、dev 、lint</code> 等，他在打包层把体验做到了极致，但是不包含路由，不是框架，也不支持配置。所以，如果大家想基于他修改部分配置，或者希望在打包层之外也做技术收敛时，就会遇到困难。</p>\n<p>为何不是 umi</p>\n<p>umi 提供的功能很多，这也导致它太过于臃肿。而且你还要去学它的封装化配置，而不是学原生第三方库的配置，如果你只想要一些简单的功能，追求更高的可玩性，哪 umi 不太适合。</p>\n<p>所以，我自己定制了一套脚手架，实现了以下功能：</p>\n<ul>\n<li><strong>快速上手</strong>，只要了解 React 、Mobx 、Webpack 和 React Router，就可以快速搭建中后台管理平台</li>\n<li><strong>路由系统</strong>，基于 react-router 实现的路由系统</li>\n<li><strong>Loading</strong>，不需要重复写组件 Loading 判断</li>\n<li><strong>国际化</strong>，基于 react-intl-universal 实现的国际化</li>\n<li><strong>网络请求</strong>，基于 axios 实现的请求拦截</li>\n<li><strong>页面交互</strong>，基于 mobx 实现的数据交互方式</li>\n<li><strong>UI</strong>，使用业界最著名的 ant-design</li>\n<li><strong>代码规范校验</strong>，使用 eslint 、pre-commit 、lint-staged 、prettier 、stylelint</li>\n<li><strong>模拟请求数据</strong>，基于 mockjs 实现</li>\n<li><strong>打包工具</strong>，目前最流行的 Webpack</li>\n</ul>\n<p>解决了以下的问题：</p>\n<ul>\n<li>约束开发人员代码规范</li>\n<li>方便提供给其他开发使用标准的脚手架，并提供技术支持</li>\n</ul>\n<p>完成整个编码过程的一个闭环：</p>\n<ul>\n<li>编码前：编码规范，最佳实践</li>\n<li>编码中：自研项目框架、代码校验</li>\n<li>编码后：发布部署工具 JenKins，手动发布或 CI/CD</li>\n</ul>\n<p>这些节点要视实际情况，以最小成本去做，然后逐步升级。比如编码规范，我们是采用业界比较著名的 <code>Airbnb JavaScript</code> 代码规范，搭配<code>eslint 、pre-commit 、lint-staged 、prettier 、stylelint</code> 去进行约束。</p>\n<p>这套项目框架，目前开发体验非常爽，在我司多个产品线上，投入使用，并已开源，**<a href=\"https://github.com/xuya227939/tristana.git\" rel=\"nofollow\">框架地址</a>**，演示页面比较少，大佬们觉得不错的话，可以给个 Star 🌟，也欢迎给项目提 issues ～</p>\n<h4>业务场景</h4>\n<p>我们是做 <code>ToB</code> 业务，存在页面上大量使用表单的场景，所以，把我们的表单页面做成可配置化，实现了大部分页面表单配置化，减少前端人力资源投入。</p>\n<p>针对公司的实际业务场景，其他子系统不会特别复杂，页面也不会多，共享一套账号体系，这里采用的思路是只有一个项目，不分主从系统，通过 <code>Webpack</code> 配置多页面，不同的子系统进入的首页内容不一样，加载内容不一样，菜单导航，则通过后端对每个租户进行区分，来做到租户看到的菜单系统不一样。</p>\n<p>如果子系统特别复杂，有主从系统概念，可以考虑使用微服务设计，这里不做过多介绍。</p>\n<h4>静态资源</h4>\n<p>除了业务代码以外，前端还会有一些公共静态资源，例如 <code>React</code> 资源，<code>Ant Design</code> 资源，<code>BizCharts</code> 资源，以及一些图片文件等。</p>\n<p>对于这些文件，是所有项目所共享的，假如这些文件分散在各个项目里，既没必要，也容易导致不同项目依赖文件不统一。</p>\n<p>我们是放在 <code>S3</code> 上，做 <code>CDN</code> 静态资源加速，然后前端项目通过引入<code>url</code> 来使用这些资源，这样可以减轻自己的服务器网络带宽消耗。</p>\n<h2>项目管理</h2>\n<ul>\n<li>\n<p><strong>任务分配</strong>，产品把相关的需求，经过讨论，可行性分析，通过项目管理工具，放到迭代计划中，录入开发工时，测试工时。</p>\n</li>\n<li>\n<p><strong>文档管理</strong>，采用项目管理工具自带的文档，要求做到文档可以团队编辑，可以查看到编辑历史。</p>\n</li>\n<li>\n<p><strong>项目周会</strong>，过大家手上目前的迭代进度，遇到的问题，需要协调的资源，风险控制等。</p>\n</li>\n<li>\n<p><strong>项目复盘</strong>，复盘首先是要做的是事实陈述，开始诊断、分析存在差异的原因，找出导致成功或失败的根本原因后进行规律总结。明白为什么会成功、哪些关键行为起了作用，这些行为有没有适用条件，对于提高后续行动的成功率有没有价值。</p>\n</li>\n</ul>\n<h3>熟悉产品线业务</h3>\n<p>所谓技术服务业务，找产品了解现有的业务流程以及痛点，甚至未来要做的一些产品规划，好的技术架构，要考虑各种各样的业务场景，怎样才能结合业务的复杂度，设计出颗粒度更加细化的组件。</p>\n<p>画出产品架构图</p>\n<p><img alt=\"WechatIMG1152.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11c8fc6cf5b6464199a56b238b4a8a35%7Etplv-k3u1fbpfcp-watermark.image\"/></p>\n<h3>提升相关人员的能力</h3>\n<h4>产品人员</h4>\n<p>需求频繁且混乱，决策摇摆不定、动辄推倒重来。市面上一个好的产品经理是很贵的，没个三四万是拿不下一个真正靠谱的能抗住复杂产品线的产品经理，但是很多公司老板是不愿意花这个钱，一般就会招个工作一两年的产品经理先过来，顶个位置把这个工具给做出来就行了。恰恰因为这样一个认知导致产品经理这一层他既没话语权，又不能让自己闲着，所以层出不穷的需求全堆上来了，而对于公司长久型的产品架构就把控不住，如果一个产品经理无法起到，上对客户负责，下对开发负责，不会对所有需求进行筛选，把需求只会丢给开发，不会进行工时把控和质量把控。甚至对现有产品有什么功能，都不了解，那么就不是一个合格的产品。</p>\n<p>所以对产品经理的要求非常严格，因为一个公司，如果战略方向把握住了，那么核心是要看产品，能否把握住市场方向，非常关键。这样才能决定你是否能占有市场，由于我司是做一个 <code>ToB SaaS</code> 化的平台，所以，必须要求产品经理清楚的了解客户实际需求，需求背后的实际场景，提炼出来哪些是共性的需求，哪些是客户定制化的需求，然后再讨论，再进行落地实际的开发。</p>\n<h4>测试人员</h4>\n<p>对测试人员，尽量覆盖全所有场景，保证核心流程畅通，要求能找到复现步骤，提高开发解决 BUG 的效率。</p>\n<h3>设计规范</h3>\n<p>由于我司采用的是 <code>Ant Design</code> UI 库，所以设计标准，尽量都是按照 <code>Ant Design</code> 现成组件和样式来做，避免开发二次修改，参考这个链接 <a href=\"https://ant.design/docs/spec/introduce-cn\" rel=\"nofollow\">Ant Design 设计原则</a></p>\n<p>某个列表页</p>\n<p><img alt=\"WechatIMG1180.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb6638ebc1ae4df5aca1f72314b829e0%7Etplv-k3u1fbpfcp-watermark.image\"/></p>\n<p>普通的列表，和设计，产品都约定好，上面是筛选，下面是按钮，底部是表格展示。</p>\n<p>某个详情页</p>\n<p><img alt=\"WechatIMG1181.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6348152e2214dccbb81102a44e10585%7Etplv-k3u1fbpfcp-watermark.image\"/></p>\n<p>详情页大量会使用到表单，所以直接使用 <code>Ant Design</code> 的 <code>From</code> 表单组件。</p>\n<p>表单每行放多少个，都是以 <code>Ant Design</code> 组件来的。</p>\n<p>这样带来的好处就是尽量避免定制化的开发，所有列表和详情都是按照这种风格来进行开发。</p>\n<h1>总结</h1>\n<p>上面这些，包含其他的，大概花了一年多的时间，建设完成，我们目前的基建状况如下表所示</p>\n<p><img alt=\"Infrastructure.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/006e3ec44e8e47b98c697222dd3e2e41%7Etplv-k3u1fbpfcp-watermark.image\"/></p>\n<p>前端人员的开发效率较之前，提升了一倍左右的开发效率，前提是完全熟悉我这套项目框架的开发模式。</p>\n<p>项目管理，人员工时占比，资源协调，目前下来都还不错，平稳进行。</p>\n<p>如果你觉得对你有帮助或启发，欢迎点赞留言。</p>\n", "last_modified": 1620350869, "replies": 89, "id": 775334}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/4e73/2ced/26_large.png?m=1584288945", "name": "hangzhou", "avatar_normal": "https://cdn.v2ex.com/navatar/4e73/2ced/26_normal.png?m=1584288945", "title": "杭州", "url": "https://www.v2ex.com/go/hangzhou", "topics": 1565, "footer": "", "header": "", "title_alternative": "Hangzhou", "avatar_mini": "https://cdn.v2ex.com/navatar/4e73/2ced/26_mini.png?m=1584288945", "stars": 1339, "aliases": [], "root": false, "id": 26, "parent_node_name": "cn"}, "member": {"username": "mantreegcj", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/724c/bd47/421086_mini.png?m=1619595964", "bio": null, "url": "https://www.v2ex.com/u/mantreegcj", "tagline": null, "twitter": null, "created": 1560330663, "avatar_large": "https://cdn.v2ex.com/avatar/724c/bd47/421086_mini.png?m=1619595964", "avatar_mini": "https://cdn.v2ex.com/avatar/724c/bd47/421086_mini.png?m=1619595964", "location": null, "btc": null, "id": 421086}, "last_reply_by": "Jaosn", "last_touched": 1620400412, "title": "请教一下大城市该如何买房？", "url": "https://www.v2ex.com/t/775335", "created": 1620350951, "content": "请教一下大城市该如何买房，杭州社保仅满一年，很怕杭州亚运会时的房价再涨了，所以在考虑是现在选择二手房还是等满两年摇号买新房。如果买二手房是 3w 一方左右的预算，想在西湖区和未来科技城附近看看。有没有 V 友杭州买过房，请教一下如何去选择房源。", "content_rendered": "<p>请教一下大城市该如何买房，杭州社保仅满一年，很怕杭州亚运会时的房价再涨了，所以在考虑是现在选择二手房还是等满两年摇号买新房。如果买二手房是 3w 一方左右的预算，想在西湖区和未来科技城附近看看。有没有 V 友杭州买过房，请教一下如何去选择房源。</p>\n", "last_modified": 1620350969, "replies": 76, "id": 775335}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/e4da/3b7f/5_large.png?m=1584385880", "name": "movie", "avatar_normal": "https://cdn.v2ex.com/navatar/e4da/3b7f/5_normal.png?m=1584385880", "title": "电影", "url": "https://www.v2ex.com/go/movie", "topics": 1152, "footer": "", "header": "用 90 分钟去体验另外一个世界。", "title_alternative": "Movie", "avatar_mini": "https://cdn.v2ex.com/navatar/e4da/3b7f/5_mini.png?m=1584385880", "stars": 1678, "aliases": [], "root": false, "id": 5, "parent_node_name": "life"}, "member": {"username": "ELloop", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/556c34f6376dfd6f24e884d96103a27a?s=24&d=retro", "bio": null, "url": "https://www.v2ex.com/u/ELloop", "tagline": null, "twitter": null, "created": 1605839857, "avatar_large": "https://cdn.v2ex.com/gravatar/556c34f6376dfd6f24e884d96103a27a?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/556c34f6376dfd6f24e884d96103a27a?s=24&d=retro", "location": null, "btc": null, "id": 518413}, "last_reply_by": "johnsona", "last_touched": 1620397591, "title": "请问有什么恐怖电影可以推荐吗", "url": "https://www.v2ex.com/t/775377", "created": 1620357421, "content": "如题，剧本或者逻辑、氛围、演技有感觉到不错的恐怖黑暗电影剧集类，有没有可以推荐的？", "content_rendered": "如题，剧本或者逻辑、氛围、演技有感觉到不错的恐怖黑暗电影剧集类，有没有可以推荐的？", "last_modified": 1620357421, "replies": 76, "id": 775377}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/a3c6/5c29/108_large.png?m=1620107025", "name": "bb", "avatar_normal": "https://cdn.v2ex.com/navatar/a3c6/5c29/108_normal.png?m=1620107025", "title": "宽带症候群", "url": "https://www.v2ex.com/go/bb", "topics": 9372, "footer": "", "header": "网速很重要。比快更快。", "title_alternative": "Broadband Symptom Complex", "avatar_mini": "https://cdn.v2ex.com/navatar/a3c6/5c29/108_mini.png?m=1620107025", "stars": 4971, "aliases": [], "root": false, "id": 108, "parent_node_name": "geek"}, "member": {"username": "crazychang", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/989b/e5d1/475809_mini.png?m=1612707621", "bio": null, "url": "https://www.v2ex.com/u/crazychang", "tagline": null, "twitter": null, "created": 1583885832, "avatar_large": "https://cdn.v2ex.com/avatar/989b/e5d1/475809_mini.png?m=1612707621", "avatar_mini": "https://cdn.v2ex.com/avatar/989b/e5d1/475809_mini.png?m=1612707621", "location": null, "btc": null, "id": 475809}, "last_reply_by": "gBurnX", "last_touched": 1620389346, "title": "复式楼 1 楼没网线咋整？ 或者有没有信号很强 2 层楼都有信号的路由？", "url": "https://www.v2ex.com/t/775352", "created": 1620353271, "content": "老房子 装修的时候只有 2 楼有拉网线 1 楼没有网线 \r\n\r\n1 楼没人用电脑 只有手机 平板 但是经常断流\r\n\r\n现在放了个路由器无线桥接 效果不佳\r\n\r\n有没有更好的办法？（少点钱最好啦）", "content_rendered": "<p>老房子 装修的时候只有 2 楼有拉网线 1 楼没有网线 </p>\n<p>1 楼没人用电脑 只有手机 平板 但是经常断流</p>\n<p>现在放了个路由器无线桥接 效果不佳</p>\n<p>有没有更好的办法？（少点钱最好啦）</p>\n", "last_modified": 1620353271, "replies": 58, "id": 775352}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/ede7/e2b6/867_large.png?m=1583757182", "name": "vscode", "avatar_normal": "https://cdn.v2ex.com/navatar/ede7/e2b6/867_normal.png?m=1583757182", "title": "Visual Studio Code", "url": "https://www.v2ex.com/go/vscode", "topics": 397, "footer": "", "header": "来自 <a href=\"/go/microsoft\">Microsoft</a> 的全新代码编辑器", "title_alternative": "Visual Studio Code", "avatar_mini": "https://cdn.v2ex.com/navatar/ede7/e2b6/867_mini.png?m=1583757182", "stars": 458, "aliases": [], "root": false, "id": 867, "parent_node_name": "editors"}, "member": {"username": "Livid", "website": "https://livid.v2ex.com/", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/c4ca/4238/1_mini.png?m=1611085320", "bio": "Remember the bigger green", "url": "https://www.v2ex.com/u/Livid", "tagline": "Gravitated and spellbound", "twitter": "", "created": 1272203146, "avatar_large": "https://cdn.v2ex.com/avatar/c4ca/4238/1_mini.png?m=1611085320", "avatar_mini": "https://cdn.v2ex.com/avatar/c4ca/4238/1_mini.png?m=1611085320", "location": "", "btc": "", "id": 1}, "last_reply_by": "Yvette", "last_touched": 1620411124, "title": "VSCode 的这个叫做 Solarized Light 的配色主题很有 Notion 的感觉", "url": "https://www.v2ex.com/t/775399", "created": 1620361869, "content": "https://i.v2ex.co/xbrZIz2s.png", "content_rendered": "<a target=\"_blank\" href=\"/i/xbrZIz2s.png\" rel=\"nofollow noopener\" target=\"_blank\" title=\"在新窗口打开图片 xbrZIz2s.png\"><img src=\"//i.v2ex.co/xbrZIz2s.png\" class=\"embedded_image\"></a>", "last_modified": 1620361869, "replies": 58, "id": 775399}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1620107083", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1620107083", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 44379, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1620107083", "stars": 7364, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"username": "kensoz", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/143d/5c79/544567_mini.png?m=1620284385", "bio": null, "url": "https://www.v2ex.com/u/kensoz", "tagline": null, "twitter": null, "created": 1620284346, "avatar_large": "https://cdn.v2ex.com/avatar/143d/5c79/544567_mini.png?m=1620284385", "avatar_mini": "https://cdn.v2ex.com/avatar/143d/5c79/544567_mini.png?m=1620284385", "location": null, "btc": null, "id": 544567}, "last_reply_by": "dayeye2006199", "last_touched": 1620376241, "title": "我们学最新的技术和概念，写优雅的代码和注释是为了什么？", "url": "https://www.v2ex.com/t/775329", "created": 1620350057, "content": "我们花时间学最新的库，最新的特性，写的时候代码优雅注释清晰，这是为了什么？\r\n\r\n写几个无脑的 for 循环，无脑的 if 判断就可以搞定上线，让老板赚钱。因为无论你用什么东西写最后的目的就是能用能上线就行，你写的再 nb 再高端，也不会升职加薪，老板也不懂，甚至因为看不懂你的奇淫巧计而批评你。\r\n\r\n而且有时学习新东西用新写法还会耽误自己的时间，自己的的 nb 代码，仅仅在写完的时候让自己爽了，其他人都不在乎，只在乎能用就行，其他的意义还有什么嘛。为了面试吗？如果下一家公司还是这样不就陷入了循环之中嘛。", "content_rendered": "我们花时间学最新的库，最新的特性，写的时候代码优雅注释清晰，这是为了什么？<br /><br />写几个无脑的 for 循环，无脑的 if 判断就可以搞定上线，让老板赚钱。因为无论你用什么东西写最后的目的就是能用能上线就行，你写的再 nb 再高端，也不会升职加薪，老板也不懂，甚至因为看不懂你的奇淫巧计而批评你。<br /><br />而且有时学习新东西用新写法还会耽误自己的时间，自己的的 nb 代码，仅仅在写完的时候让自己爽了，其他人都不在乎，只在乎能用就行，其他的意义还有什么嘛。为了面试吗？如果下一家公司还是这样不就陷入了循环之中嘛。", "last_modified": 1620350057, "replies": 56, "id": 775329}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/e223/0b85/509_large.png?m=1515388901", "name": "pet", "avatar_normal": "https://cdn.v2ex.com/navatar/e223/0b85/509_normal.png?m=1515388901", "title": "宠物", "url": "https://www.v2ex.com/go/pet", "topics": 346, "footer": "", "header": "", "title_alternative": "宠物", "avatar_mini": "https://cdn.v2ex.com/navatar/e223/0b85/509_mini.png?m=1515388901", "stars": 256, "aliases": [], "root": false, "id": 509, "parent_node_name": "naturalist"}, "member": {"username": "th00000", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/d8ed/3f9f/250405_mini.png?m=1595558313", "bio": "", "url": "https://www.v2ex.com/u/th00000", "tagline": "", "twitter": "", "created": 1503480138, "avatar_large": "https://cdn.v2ex.com/avatar/d8ed/3f9f/250405_mini.png?m=1595558313", "avatar_mini": "https://cdn.v2ex.com/avatar/d8ed/3f9f/250405_mini.png?m=1595558313", "location": "", "btc": "", "id": 250405}, "last_reply_by": "cadmuxe", "last_touched": 1620404248, "title": "最近家里养猫咪的困扰", "url": "https://www.v2ex.com/t/775462", "created": 1620377723, "content": "猫咪现在一岁多了, 已绝育, 每天早上五点会固定到卧室门口叫门, 吵得无法休息, 这个问题已经持续两个月了\r\n\r\n最近还解锁了新的技能, 跳起来够门把手开门\r\n\r\n早上起来莫名其妙身上多了一只猫, 本来这也没啥, 问题是现在换毛的季节, 实在不能忍\r\n\r\n当然会开门的问题倒是好解决, 把门一锁就完事了, 一大早叫门这个实在是不能忍\r\n\r\n叫门的原因应该就是太粘人了, 不是缺水缺粮的原因\r\n\r\n所以求问一下各位猫主子, 怎么才能训练猫咪自己玩耍, 不要一大早扯着嗓子在卧室门口喊?\r\n\r\n另外附一张自己家的主子照片\r\n\r\n![cat]( https://i.imgur.com/jObus5z.png)", "content_rendered": "<p>猫咪现在一岁多了, 已绝育, 每天早上五点会固定到卧室门口叫门, 吵得无法休息, 这个问题已经持续两个月了</p>\n<p>最近还解锁了新的技能, 跳起来够门把手开门</p>\n<p>早上起来莫名其妙身上多了一只猫, 本来这也没啥, 问题是现在换毛的季节, 实在不能忍</p>\n<p>当然会开门的问题倒是好解决, 把门一锁就完事了, 一大早叫门这个实在是不能忍</p>\n<p>叫门的原因应该就是太粘人了, 不是缺水缺粮的原因</p>\n<p>所以求问一下各位猫主子, 怎么才能训练猫咪自己玩耍, 不要一大早扯着嗓子在卧室门口喊?</p>\n<p>另外附一张自己家的主子照片</p>\n<p><img alt=\"cat\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/jObus5z.png\"/></p>\n", "last_modified": 1620377723, "replies": 54, "id": 775462}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1618811339", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1618811339", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 172159, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1618811339", "stars": 3222, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"username": "zhanggong", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/26c8/2ac7/530635_mini.png?m=1620372585", "bio": "当愚昧成为主流，清醒就是原罪。", "url": "https://www.v2ex.com/u/zhanggong", "tagline": "", "twitter": null, "created": 1611708157, "avatar_large": "https://cdn.v2ex.com/avatar/26c8/2ac7/530635_mini.png?m=1620372585", "avatar_mini": "https://cdn.v2ex.com/avatar/26c8/2ac7/530635_mini.png?m=1620372585", "location": "", "btc": null, "id": 530635}, "last_reply_by": "Mirage09", "last_touched": 1620416021, "title": "大家现在是通过什么软件来实现手机和电脑之间的文件互传的？", "url": "https://www.v2ex.com/t/775434", "created": 1620370556, "content": "QQ 和微信的文件传输实在不太理想，而且我感觉每次传输的文件都会被腾讯扫描，感觉很不自在。", "content_rendered": "<p>QQ 和微信的文件传输实在不太理想，而且我感觉每次传输的文件都会被腾讯扫描，感觉很不自在。</p>\n", "last_modified": 1620370556, "replies": 52, "id": 775434}]