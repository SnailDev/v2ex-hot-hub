[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1700771269", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1700771269", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 61759, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1700771269", "stars": 8891, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 651074, "username": "walle1530", "url": "https://www.v2ex.com/u/walle1530", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/83daa887eb4f95e3fe4711dccd0ba4f7?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/83daa887eb4f95e3fe4711dccd0ba4f7?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/83daa887eb4f95e3fe4711dccd0ba4f7?s=73&d=retro", "created": 1695713374, "last_modified": 1699429715}, "last_reply_by": "zhzhangcs", "last_touched": 1710554938, "title": "手里有大量 GPT 额度欢迎白嫖", "url": "https://www.v2ex.com/t/1023995", "created": 1710486255, "deleted": 0, "content": "手里有大量 GPT 额度自己的镜像站用不完\r\n\r\n因此搭建了中转站供开发者搭建自用和镜像站站长使用\r\n\r\n注册和邀请均送 5 刀，后续充值价格最低刀 3 毛/刀，个人用白嫖赠送额度也可以\r\n\r\n地址：justchat.top\r\n\r\n有感兴趣的朋友留言账号或者用户名再送 10 刀", "content_rendered": "手里有大量 GPT 额度自己的镜像站用不完<br /><br />因此搭建了中转站供开发者搭建自用和镜像站站长使用<br /><br />注册和邀请均送 5 刀，后续充值价格最低刀 3 毛/刀，个人用白嫖赠送额度也可以<br /><br />地址：<a target=\"_blank\" href=\"http://justchat.top\" rel=\"nofollow noopener\">justchat.top</a><br /><br />有感兴趣的朋友留言账号或者用户名再送 10 刀", "last_modified": 1710486805, "replies": 262, "id": 1023995}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/093f/65e0/59_large.png?m=1615956453", "name": "random", "avatar_normal": "https://cdn.v2ex.com/navatar/093f/65e0/59_normal.png?m=1615956453", "title": "随想", "url": "https://www.v2ex.com/go/random", "topics": 3695, "footer": "", "header": "有的时候，可以停下来找找灵感，然后再继续。", "title_alternative": "Random", "avatar_mini": "https://cdn.v2ex.com/navatar/093f/65e0/59_mini.png?m=1615956453", "stars": 1191, "aliases": [], "root": false, "id": 59, "parent_node_name": "v2ex"}, "member": {"id": 415795, "username": "chanChristin", "url": "https://www.v2ex.com/u/chanChristin", "website": null, "twitter": "", "psn": "", "github": "", "btc": "", "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/b0c6/6f54/415795_mini.png?m=1709287825", "avatar_normal": "https://cdn.v2ex.com/avatar/b0c6/6f54/415795_normal.png?m=1709287825", "avatar_large": "https://cdn.v2ex.com/avatar/b0c6/6f54/415795_large.png?m=1709287825", "avatar_xlarge": "https://cdn.v2ex.com/avatar/b0c6/6f54/415795_xlarge.png?m=1709287825", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/b0c6/6f54/415795_xlarge.png?m=1709287825", "created": 1558872774, "last_modified": 1709287825}, "last_reply_by": "sherlockwhite", "last_touched": 1710554218, "title": "关于男女关系——上班路上所见有感", "url": "https://www.v2ex.com/t/1023983", "created": 1710484928, "deleted": 0, "content": "早上在地铁上看到一个女生在微信聊天。\r\n\r\n最上面一条应该是昨天晚上发的，那个女生说「下次我约你」，对方就回了个「 ok 」。然后今天早上也是女方先开口问早安，男生只是回了一个表情包。\r\n\r\n接着我看到女生换了个微信号，在和另一个人的聊天记录中翻了很长时间，最后也没翻到，然后是在聊天记录里面搜索关键词才找到的内容。她把那条内容复制出来，又换回原来的微信号，把内容粘贴进去之后想了想可能觉得不妥，于是把复制的内容删了，删了又打打了又删，换了好几遍措辞最后才小心翼翼的问出一句「我向你请教个事呗」\r\n\r\n等了一会对方没回复，女生就切出去刷抖音了，这时候突然来了两条微信消息，我竟然和她一样有点紧张了。她赶快点开微信发现是别人发来的消息，我跟着也失落了一下。在她和别人聊天的过程中对方回消息了，回了个「你说」还是「可以」记不太清了。女生就赶紧切过去先和男生聊天，但是发的内容比之前复制的要多好多。\r\n\r\n之前复制的事情可能一二十个字就说完了，但是她前前后后和男生说了三四句才表达完。\r\n\r\n不管是女生反复删改要发的内容，还是看双方的聊天内容，都能明显感觉到这个女生是对男生有意思的，但是男生好像兴致不高。我好像没体会过女生非常主动的情况，看完真的挺感慨的，原来不是女生天生慢热或者不主动，只是对你没兴趣而已，她有兴趣的时候和和其他男生一样主动。\r\n\r\n突然想起来上大学的时候我自己总结出来的一个道理，「人的精力是固定的，总是要发泄在某个地方。可能是看剧刷抖音，也可能是和朋友出门玩，如果你发现对方对你不上心，那 ta 就是在别的地方上心。如果 ta 最近没有发朋友圈，那可能是在发抖音/微博/小红书，或者是单纯的屏蔽了你」。", "content_rendered": "<p>早上在地铁上看到一个女生在微信聊天。</p>\n<p>最上面一条应该是昨天晚上发的，那个女生说「下次我约你」，对方就回了个「 ok 」。然后今天早上也是女方先开口问早安，男生只是回了一个表情包。</p>\n<p>接着我看到女生换了个微信号，在和另一个人的聊天记录中翻了很长时间，最后也没翻到，然后是在聊天记录里面搜索关键词才找到的内容。她把那条内容复制出来，又换回原来的微信号，把内容粘贴进去之后想了想可能觉得不妥，于是把复制的内容删了，删了又打打了又删，换了好几遍措辞最后才小心翼翼的问出一句「我向你请教个事呗」</p>\n<p>等了一会对方没回复，女生就切出去刷抖音了，这时候突然来了两条微信消息，我竟然和她一样有点紧张了。她赶快点开微信发现是别人发来的消息，我跟着也失落了一下。在她和别人聊天的过程中对方回消息了，回了个「你说」还是「可以」记不太清了。女生就赶紧切过去先和男生聊天，但是发的内容比之前复制的要多好多。</p>\n<p>之前复制的事情可能一二十个字就说完了，但是她前前后后和男生说了三四句才表达完。</p>\n<p>不管是女生反复删改要发的内容，还是看双方的聊天内容，都能明显感觉到这个女生是对男生有意思的，但是男生好像兴致不高。我好像没体会过女生非常主动的情况，看完真的挺感慨的，原来不是女生天生慢热或者不主动，只是对你没兴趣而已，她有兴趣的时候和和其他男生一样主动。</p>\n<p>突然想起来上大学的时候我自己总结出来的一个道理，「人的精力是固定的，总是要发泄在某个地方。可能是看剧刷抖音，也可能是和朋友出门玩，如果你发现对方对你不上心，那 ta 就是在别的地方上心。如果 ta 最近没有发朋友圈，那可能是在发抖音/微博/小红书，或者是单纯的屏蔽了你」。</p>\n", "last_modified": 1710485506, "replies": 121, "id": 1023983}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1700771269", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1700771269", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 61759, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1700771269", "stars": 8891, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 666753, "username": "UncleCAT4", "url": "https://www.v2ex.com/u/UncleCAT4", "website": "yuanj.top", "twitter": "", "psn": "", "github": "UncleCAT4", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/b3a3/2391/666753_mini.png?m=1702447939", "avatar_normal": "https://cdn.v2ex.com/avatar/b3a3/2391/666753_normal.png?m=1702447939", "avatar_large": "https://cdn.v2ex.com/avatar/b3a3/2391/666753_large.png?m=1702447939", "avatar_xlarge": "https://cdn.v2ex.com/avatar/b3a3/2391/666753_xlarge.png?m=1702447939", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/b3a3/2391/666753_xlarge.png?m=1702447939", "created": 1702447853, "last_modified": 1702447939}, "last_reply_by": "luwang", "last_touched": 1710525689, "title": "我的博客看起来如何？有何建议？", "url": "https://www.v2ex.com/t/1023939", "created": 1710479421, "deleted": 0, "content": "如题，希望各位能够给我一些改善建议\r\n\r\nhttps://yuanj.top", "content_rendered": "<p>如题，希望各位能够给我一些改善建议</p>\n<p><a href=\"https://yuanj.top\" rel=\"nofollow\">https://yuanj.top</a></p>\n", "last_modified": 1710479421, "replies": 107, "id": 1023939}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/e7b2/4b11/360_large.png?m=1670319927", "name": "windows", "avatar_normal": "https://cdn.v2ex.com/navatar/e7b2/4b11/360_normal.png?m=1670319927", "title": "Windows", "url": "https://www.v2ex.com/go/windows", "topics": 3787, "footer": "", "header": "Windows, not walls.", "title_alternative": "Windows", "avatar_mini": "https://cdn.v2ex.com/navatar/e7b2/4b11/360_mini.png?m=1670319927", "stars": 1208, "aliases": [], "root": false, "id": 360, "parent_node_name": "os"}, "member": {"id": 630884, "username": "gav1nwwk", "url": "https://www.v2ex.com/u/gav1nwwk", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/7e9d4e986bd57bc2a3bcd55392257fa9?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/7e9d4e986bd57bc2a3bcd55392257fa9?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/7e9d4e986bd57bc2a3bcd55392257fa9?s=73&d=retro", "created": 1685003520, "last_modified": 1685003520}, "last_reply_by": "badmotherfucker", "last_touched": 1710554922, "title": "Windows 的分区设计早就开始朝着 Linux 的思路发展了,很多人根本不知道", "url": "https://www.v2ex.com/t/1023944", "created": 1710480343, "deleted": 0, "content": "Windows 的分区，感觉其实早就开始了以 C 盘 `Home`目录为中心，其他盘存储的架构了，到现在还有好多人以为电脑要分区，真的是一种陋习了\r\n\r\nC:\\user\\xx\\下面 Desktop 、Documents 、Pictures 、Videos 等等\r\n\r\n但是微软也搞了坨屎，ProgramFiles 文件夹本来就设计的有问题，首先要区分 X86 ，其次 ProgramFiles 理论上是多用户共享的程序文件夹，然而 Home 下面并没有显著标明当前用户程序放在哪里，只有新程序安装时可能会归档到 Home\\AppData\\Local 下面。\r\n\r\n系统权限也是一团乱麻", "content_rendered": "<p>Windows 的分区，感觉其实早就开始了以 C 盘 <code>Home</code>目录为中心，其他盘存储的架构了，到现在还有好多人以为电脑要分区，真的是一种陋习了</p>\n<p>C:\\user\\xx\\下面 Desktop 、Documents 、Pictures 、Videos 等等</p>\n<p>但是微软也搞了坨屎，ProgramFiles 文件夹本来就设计的有问题，首先要区分 X86 ，其次 ProgramFiles 理论上是多用户共享的程序文件夹，然而 Home 下面并没有显著标明当前用户程序放在哪里，只有新程序安装时可能会归档到 Home\\AppData\\Local 下面。</p>\n<p>系统权限也是一团乱麻</p>\n", "last_modified": 1710480343, "replies": 76, "id": 1023944}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_large.png?m=1695370146", "name": "career", "avatar_normal": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_normal.png?m=1695370146", "title": "职场话题", "url": "https://www.v2ex.com/go/career", "topics": 16360, "footer": "", "header": "这里，我们聊聊那些工作中遇到的开心和不开心的事。", "title_alternative": "Career", "avatar_mini": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_mini.png?m=1695370146", "stars": 3047, "aliases": [], "root": false, "id": 770, "parent_node_name": "work"}, "member": {"id": 276922, "username": "lemoncake07", "url": "https://www.v2ex.com/u/lemoncake07", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/5ab3e815aa5487f2d70b95895767d6dc?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/5ab3e815aa5487f2d70b95895767d6dc?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/5ab3e815aa5487f2d70b95895767d6dc?s=73&d=retro", "created": 1514216469, "last_modified": 1514216469}, "last_reply_by": "wansho", "last_touched": 1710530343, "title": "小镇青年，选择考公回县城还是跳槽去大城市？", "url": "https://www.v2ex.com/t/1023872", "created": 1710470822, "deleted": 0, "content": "在家乡省会工作 2 年了，晋升无望，不知道下一步该去哪里", "content_rendered": "<p>在家乡省会工作 2 年了，晋升无望，不知道下一步该去哪里</p>\n", "last_modified": 1710501032, "replies": 57, "id": 1023872}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1700771269", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1700771269", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 61759, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1700771269", "stars": 8891, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 615116, "username": "doudou456", "url": "https://www.v2ex.com/u/doudou456", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/dc27c3cc55af9c172d546cc3f6ee92fd?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/dc27c3cc55af9c172d546cc3f6ee92fd?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/dc27c3cc55af9c172d546cc3f6ee92fd?s=73&d=retro", "created": 1676879436, "last_modified": 1710468263}, "last_reply_by": "expy", "last_touched": 1710497010, "title": "人工智能（AI）井喷式发展下，未来“程序员”这个职业会不存在吗？", "url": "https://www.v2ex.com/t/1023860", "created": 1710469383, "deleted": 0, "content": "前两天，几位互联网大佬聊人工智能（ AI ）上了热搜，一些观点比较犀利，在软件行业掀起了大范围的热议，其中一大热点是：**“程序员”这个职业会不会存在**。去年就有惊人的观点：谷歌工程主管：**程序员的职业生涯将在 3 年内被 AIGC 终结。**\r\n\r\n我先亮出自己的的观点：**“程序员”这个职业会存在，未来人机结对编程是常态。**也就是说，程序员会和基于大模型的编程助手/编程 Copilot 协同工作，以更高效的方式完成程序/软件的开发。见我的软件工程 3.0 宣言（附演讲 PPT ）的第一句：\r\n![alt 属性文本]( https://cdn.easycorp.cn/web/data/upload/zentao/202403/f_ec7b44a40accebd5f7bcb27ff9799bba.png)\r\n\r\n其实，我 5 年前就写过一篇文章：**未来两年：人机结对编程(MMPP)将成为现实。**当时，我过于乐观，但也不算乐观：2020 年北京大学推出了 aiXCoder 2.0 （版本到了 2.0 ，说明产品相对成熟了，其工作始于 2013 年），可以完成代码补全、代码评审等，开始实现人机结对编程。\r\n\r\n今天的大语言模型（ LLM ）是一个概率模型、一个不确定模型，我甚至说过（见：软件工程 3.0 实践之路（一）最后一段）：因为 LLM 的不确定性，有幻觉/幻想，倒是不适合做编程助手，更适合帮我们在一些不确定事务（股票投资、风险管理等）上做决策、可以获得最大的赢率。LLM 也更适合参与我们的头脑风暴活动、文化创意、设计等活动，这时幻觉/幻象成了优点、有创造性，例如挖掘用户的需求、应用场景、海报生成、视频创作、音乐创作等。\r\n\r\n**今天，我们确实越来越多地将 LLM 应用于代码补全、代码生成、代码理解、代码解释等工作中（见：软件工程 3.0 实践之路(六)：LLM 驱动编程，银弹快来了吗？）**，它也可以生成单元测试脚本、测试用例。但所有生成的结果都不能直接采用，需要人工 review 。如果你的能力弱，就无法判定结果对与错，review 的效果就不理想。如果你只懂英文和中文，而不懂计算机编程语言，那根本无法 review 。对，像其他同学说的，你还要懂操作系统、懂数据库、懂通信协议、懂架构、懂算法和数据结构......这些都是软件开发的基础。\r\n\r\n**但是否有可能：生成的代码不需要人工 review 呢？**在某些情况下也是有可能的，我的设想是：\r\n\r\n- 事先分别构建独立的开发 LLM （更多是代码正例）、测试 LLM （语料更多是反例，如缺陷报告、测试脚本、测试运行日志等）、业务/需求 LLM 等。\r\n- 让 LLM 帮我们实现 BDD 那样的需求（ GWT 格式，即需求足够明确），这个过程还是人机交互的，需要业务需求专家确认结果，确保结果是正确的（相对的，不是绝对的）。\r\n- 从基于 BDD 的需求出发，开发 LLM 生成产品代码，测试 LLM 生成测试代码，两者独立工作，相互博弈、相互验证（类似 AlphaZero ，之前也有微软的论文做了局部验证）。这种情况下，几乎不需要人工参与（但很有可能是少量参与），让 LLM 相互验证，确保结果运行正确、通过测试。\r\n- 业务/需求 LLM 会参与全过程来验证，包括针对运行的程序进行验证。\r\n\r\n\r\n**“程序员” 职业肯定会存在，但部分能力弱的程序员会受到很大的挑战，而能力越强的程序员越安全。**今年年初谷歌首席商务官发布备忘录、宣布再次裁员，而这次被「毕业」的员工，多数都是被 AI 淘汰的。《 24 年技术招聘现状》显示，已经有 21%的程序员担心失业。而 IMF （国际货币基金组织）报告显示，AI 会影响全球 40%的岗位，但同时它对每个人来说也是一个巨大的机会。例如：\r\n- 谷歌广告中，开始集成进大量的生成式 AI 功能。\r\n- 谷歌的聊天机器人，可以帮人们浏览大量的广告产品。\r\n- 谷歌的某 AI 系统，可以根据广告购买者给出的预算和目标，自行制作图像和文本。\r\n- 过去，提供销售指导、创建艺术资产、决定文本和布局这些工作都是人类做的，但是现在，AI 完成起这类任务可以每秒做一千次。\r\n\r\n\r\n**不过，面对 AI 的冲击，绝大多数（ 70%）的开发者认为，AI 辅助工具能够帮助他们更好地完成工作。**尤其是在以下这几个方面：\r\n\r\n- 编程辅助、代码自动补全与生成，例如用 ChatGPT 、GitHub Copilot 、CodeArts Snap 等。\r\n- 学习与答疑，不懂的问题找大模型。\r\n- 文档润色和生成，需求文档润色、个人总结和测试报告生成等。\r\n\r\n\r\n在这之中，**有大约 67%的开发者表示，自己已经将 AI 作为工作的一部分了。**所以，我们可能会说，** 你的能力越强越安全，同时，你必须拥抱 AI 、拥抱 LLM ，不会用 AI/LLM 工具的人会被熟练使用 AI/LLM 工具的同行所淘汰。**\r\n\r\n- 根据国内招聘网站统计数据（以下相同）显示，机器视觉的薪资差距最大——达到了 62.44%。其中，要求 AIGC 技能的机器视觉招聘平均年薪为 48.45 万，而无此要求只有 29.83 万元。\r\n- 售前技术支持、大客户销售和平面设计这三个职位，是否具有 AIGC 技能也将带来超过 50%的薪资差异。\r\n- 对于企业来说，在同等条件下，有 57.04%会优先考虑那些具备 AIGC 技能的候选人。\r\n- 被开聊次数最多的是注明具有 AIGC 技能的算法工程师，高达 15.72 次，比未注明的同等职能多 6.21 次。\r\n- 从行业分布来看，新发职位主要集中于互联网、计算机软件、人工智能三大行业，占比为 29.65%、12.7%、9.96%。好消息是：说明互联网/软件职位在增长，软件定义世界、数字化转型，会带来更多的互联网/软件职位。\r\n\r\n\r\n鉴于此，我们要尽早着手学习使用 AIGC 工具，从而增强自己的职场竞争力和求职议价权。\r\n\r\n\r\n\r\n\r\n\r\n\r\n原文作者：Test Ninja", "content_rendered": "<p>前两天，几位互联网大佬聊人工智能（ AI ）上了热搜，一些观点比较犀利，在软件行业掀起了大范围的热议，其中一大热点是：<strong>“程序员”这个职业会不会存在</strong>。去年就有惊人的观点：谷歌工程主管：<strong>程序员的职业生涯将在 3 年内被 AIGC 终结。</strong></p>\n<p>我先亮出自己的的观点：<strong>“程序员”这个职业会存在，未来人机结对编程是常态。</strong>也就是说，程序员会和基于大模型的编程助手/编程 Copilot 协同工作，以更高效的方式完成程序/软件的开发。见我的软件工程 3.0 宣言（附演讲 PPT ）的第一句：\n<img alt=\"alt 属性文本\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://cdn.easycorp.cn/web/data/upload/zentao/202403/f_ec7b44a40accebd5f7bcb27ff9799bba.png\"/></p>\n<p>其实，我 5 年前就写过一篇文章：<strong>未来两年：人机结对编程(MMPP)将成为现实。</strong>当时，我过于乐观，但也不算乐观：2020 年北京大学推出了 aiXCoder 2.0 （版本到了 2.0 ，说明产品相对成熟了，其工作始于 2013 年），可以完成代码补全、代码评审等，开始实现人机结对编程。</p>\n<p>今天的大语言模型（ LLM ）是一个概率模型、一个不确定模型，我甚至说过（见：软件工程 3.0 实践之路（一）最后一段）：因为 LLM 的不确定性，有幻觉/幻想，倒是不适合做编程助手，更适合帮我们在一些不确定事务（股票投资、风险管理等）上做决策、可以获得最大的赢率。LLM 也更适合参与我们的头脑风暴活动、文化创意、设计等活动，这时幻觉/幻象成了优点、有创造性，例如挖掘用户的需求、应用场景、海报生成、视频创作、音乐创作等。</p>\n<p><strong>今天，我们确实越来越多地将 LLM 应用于代码补全、代码生成、代码理解、代码解释等工作中（见：软件工程 3.0 实践之路(六)：LLM 驱动编程，银弹快来了吗？）</strong>，它也可以生成单元测试脚本、测试用例。但所有生成的结果都不能直接采用，需要人工 review 。如果你的能力弱，就无法判定结果对与错，review 的效果就不理想。如果你只懂英文和中文，而不懂计算机编程语言，那根本无法 review 。对，像其他同学说的，你还要懂操作系统、懂数据库、懂通信协议、懂架构、懂算法和数据结构......这些都是软件开发的基础。</p>\n<p><strong>但是否有可能：生成的代码不需要人工 review 呢？</strong>在某些情况下也是有可能的，我的设想是：</p>\n<ul>\n<li>事先分别构建独立的开发 LLM （更多是代码正例）、测试 LLM （语料更多是反例，如缺陷报告、测试脚本、测试运行日志等）、业务/需求 LLM 等。</li>\n<li>让 LLM 帮我们实现 BDD 那样的需求（ GWT 格式，即需求足够明确），这个过程还是人机交互的，需要业务需求专家确认结果，确保结果是正确的（相对的，不是绝对的）。</li>\n<li>从基于 BDD 的需求出发，开发 LLM 生成产品代码，测试 LLM 生成测试代码，两者独立工作，相互博弈、相互验证（类似 AlphaZero ，之前也有微软的论文做了局部验证）。这种情况下，几乎不需要人工参与（但很有可能是少量参与），让 LLM 相互验证，确保结果运行正确、通过测试。</li>\n<li>业务/需求 LLM 会参与全过程来验证，包括针对运行的程序进行验证。</li>\n</ul>\n<p><strong>“程序员” 职业肯定会存在，但部分能力弱的程序员会受到很大的挑战，而能力越强的程序员越安全。</strong>今年年初谷歌首席商务官发布备忘录、宣布再次裁员，而这次被「毕业」的员工，多数都是被 AI 淘汰的。《 24 年技术招聘现状》显示，已经有 21%的程序员担心失业。而 IMF （国际货币基金组织）报告显示，AI 会影响全球 40%的岗位，但同时它对每个人来说也是一个巨大的机会。例如：</p>\n<ul>\n<li>谷歌广告中，开始集成进大量的生成式 AI 功能。</li>\n<li>谷歌的聊天机器人，可以帮人们浏览大量的广告产品。</li>\n<li>谷歌的某 AI 系统，可以根据广告购买者给出的预算和目标，自行制作图像和文本。</li>\n<li>过去，提供销售指导、创建艺术资产、决定文本和布局这些工作都是人类做的，但是现在，AI 完成起这类任务可以每秒做一千次。</li>\n</ul>\n<p><strong>不过，面对 AI 的冲击，绝大多数（ 70%）的开发者认为，AI 辅助工具能够帮助他们更好地完成工作。</strong>尤其是在以下这几个方面：</p>\n<ul>\n<li>编程辅助、代码自动补全与生成，例如用 ChatGPT 、GitHub Copilot 、CodeArts Snap 等。</li>\n<li>学习与答疑，不懂的问题找大模型。</li>\n<li>文档润色和生成，需求文档润色、个人总结和测试报告生成等。</li>\n</ul>\n<p>在这之中，<strong>有大约 67%的开发者表示，自己已经将 AI 作为工作的一部分了。</strong>所以，我们可能会说，** 你的能力越强越安全，同时，你必须拥抱 AI 、拥抱 LLM ，不会用 AI/LLM 工具的人会被熟练使用 AI/LLM 工具的同行所淘汰。**</p>\n<ul>\n<li>根据国内招聘网站统计数据（以下相同）显示，机器视觉的薪资差距最大——达到了 62.44%。其中，要求 AIGC 技能的机器视觉招聘平均年薪为 48.45 万，而无此要求只有 29.83 万元。</li>\n<li>售前技术支持、大客户销售和平面设计这三个职位，是否具有 AIGC 技能也将带来超过 50%的薪资差异。</li>\n<li>对于企业来说，在同等条件下，有 57.04%会优先考虑那些具备 AIGC 技能的候选人。</li>\n<li>被开聊次数最多的是注明具有 AIGC 技能的算法工程师，高达 15.72 次，比未注明的同等职能多 6.21 次。</li>\n<li>从行业分布来看，新发职位主要集中于互联网、计算机软件、人工智能三大行业，占比为 29.65%、12.7%、9.96%。好消息是：说明互联网/软件职位在增长，软件定义世界、数字化转型，会带来更多的互联网/软件职位。</li>\n</ul>\n<p>鉴于此，我们要尽早着手学习使用 AIGC 工具，从而增强自己的职场竞争力和求职议价权。</p>\n<p>原文作者：Test Ninja</p>\n", "last_modified": 1710469383, "replies": 53, "id": 1023860}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6e27/13a6/557_large.png?m=1608969785", "name": "life", "avatar_normal": "https://cdn.v2ex.com/navatar/6e27/13a6/557_normal.png?m=1608969785", "title": "生活", "url": "https://www.v2ex.com/go/life", "topics": 5648, "footer": "", "header": "生活中的技术讨论", "title_alternative": "Life", "avatar_mini": "https://cdn.v2ex.com/navatar/6e27/13a6/557_mini.png?m=1608969785", "stars": 1382, "aliases": [], "root": false, "id": 557, "parent_node_name": ""}, "member": {"id": 482768, "username": "wdold", "url": "https://www.v2ex.com/u/wdold", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/622801107d80a8a563ecfca6df056468?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/622801107d80a8a563ecfca6df056468?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/622801107d80a8a563ecfca6df056468?s=73&d=retro", "created": 1586489729, "last_modified": 1586489729}, "last_reply_by": "dfdd1811", "last_touched": 1710544326, "title": "有防蓝光但是看东西不泛黄的镜片吗?", "url": "https://www.v2ex.com/t/1023880", "created": 1710471304, "deleted": 0, "content": "如题，有没懂得老哥说两句,想换副眼镜了，之前一直戴防蓝光的带那种紫色膜的，但是看啥东西颜色都稍微有点泛黄，想问问有没有啥解决方法", "content_rendered": "<p>如题，有没懂得老哥说两句,想换副眼镜了，之前一直戴防蓝光的带那种紫色膜的，但是看啥东西颜色都稍微有点泛黄，想问问有没有啥解决方法</p>\n", "last_modified": 1710471304, "replies": 51, "id": 1023880}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1707293361", "name": "share", "avatar_normal": "https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1707293361", "title": "分享发现", "url": "https://www.v2ex.com/go/share", "topics": 40710, "footer": "", "header": "分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。", "title_alternative": "Share", "avatar_mini": "https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1707293361", "stars": 5731, "aliases": [], "root": false, "id": 16, "parent_node_name": "v2ex"}, "member": {"id": 78948, "username": "p412726700", "url": "https://www.v2ex.com/u/p412726700", "website": "www.ewpan.com", "twitter": "", "psn": "", "github": "p412726700", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/130f954c5312f6add8e99eae6bb04427?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/130f954c5312f6add8e99eae6bb04427?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/130f954c5312f6add8e99eae6bb04427?s=73&d=retro", "created": 1414466616, "last_modified": 1710442967}, "last_reply_by": "NoOneNoBody", "last_touched": 1710531160, "title": "介于年久失修以及 Chrome 马上不能支持 v2 版本插件，所以重写了 Switchy Omega 的功能", "url": "https://www.v2ex.com/t/1023873", "created": 1710470858, "deleted": 0, "content": "# Proxy Rock\r\nhttps://chromewebstore.google.com/detail/proxy-rock/dkeknkogllphlkmcfdjllhpbpnmkmgea\r\n\r\n## 为什么做这个项目\r\n\r\n大家对 Switchy Omega 应该都不陌生，在上古时代代理生态还比较匮乏的时候此插件是为数不多用起来还不错的项目。此外，特别是做前端开发的小伙伴，在开发过程经常会用到其提供的转发功能来保可以用域名进行请求。即使是现在仍有大批的用户在使用该插件。\r\n\r\n但该插件又不能说毫无槽点，GitHub issue 中也有不少用户进行反馈，如在浏览器扩展栏中点击小图标会出现弹出页面加载失败的情况，配置失败导致插件崩溃继而引发浏览器崩溃，加载资源失败等等，以及 10 年前的界面风格，上次更新距今也过去 4 年了。\r\n\r\n所以，想着能不能对插件重构一下，其实正式的重构在今年春节的时候就开始了（比较巧的是 2 月份 Google 宣布 6 月份开始不支持 manifest v2 版本的插件），由于 Switchy Omega 是用 coffeescript 构建，加之项目本身的复杂度看起来还是有点难度的，所以基本上是从头进行开发了，以至于拖拖拉拉到了现在，但核心功能已经基本可用了。\r\n\r\n## 目前支持的功能\r\n\r\n核心功能其实均已经支持，具体如下。\r\n\r\n#### 模式配置\r\n\r\n* Proxy 模式，即 so （ Switchy Omega ） 中的 Proxy Profile ，此模式下配置好本地的代理服务，根据请求 schema 选择对应的协议。\r\n  \r\n<img src=\"https://i.imgur.com/gFqdpOF.png\" width=\"400\"></img>\r\n\r\n\r\n* Auto 模式，即 so 中 Switch Profile ，此模式下可以根据设置的 Host 规则路由到不同的 Proxy 中，也可以下载在线的 PAC 格式资源进行匹配后再转发。\r\n  \r\n<img src=\"https://i.imgur.com/Hz5xj97.png\" width=\"400\"></img>\r\n\r\n\r\n* Pac 模式，即 so 中 Pac Profile ，此模式下直接使用在线或者手动录入的 PAC 内容作为配置规则。建议熟悉 PAC 文件的同学使用。\r\n  \r\n<img src=\"https://i.imgur.com/3TdiJBp.png\" width=\"400\"></img>\r\n\r\n#### 规则切换\r\n\r\n* 插件栏中点击小图标，可将配置好的规则展现出来，点击即可进行切换，同样在配置页面可以选择是否在切换时进行刷新。\r\n\r\n\r\n<img src=\"https://i.imgur.com/g82JG6U.png\" width=\"150\"></img>\r\n\r\n\r\n* 另外，配置的规则会根据名字生成唯一的颜色标识，选中的配置所对应的颜色同样会在状态栏插件中体现出来\r\n\r\n<img src=\"https://i.imgur.com/chWyWut.png\" width=\"150\"></img>\r\n<img src=\"https://i.imgur.com/hk6aIv6.png\" width=\"150\"></img>\r\n\r\n\r\n## 计划支持的功能\r\n\r\n还有很多功能计划未来逐步添加，暂定每半个月一个版本的节奏。\r\n- [ ] 导入导出\r\n- [ ] 规则颜色可配\r\n- [ ] 深色模式，跟随系统\r\n- [ ] 点击小图标规则跳转配置页\r\n- [ ] 异常配置检测\r\n\r\n## 最后\r\n由于目前还在密集开发中，使用中有什么问题的话可随时到 https://github.com/proxy-rock/proxy-rock/issues 进行反馈。\r\n\r\n感谢 Switch Omega 的作者给我们带来如此优秀的项目 :+1: 。", "content_rendered": "<h1>Proxy Rock</h1>\n<p><a href=\"https://chromewebstore.google.com/detail/proxy-rock/dkeknkogllphlkmcfdjllhpbpnmkmgea\" rel=\"nofollow\">https://chromewebstore.google.com/detail/proxy-rock/dkeknkogllphlkmcfdjllhpbpnmkmgea</a></p>\n<h2>为什么做这个项目</h2>\n<p>大家对 Switchy Omega 应该都不陌生，在上古时代代理生态还比较匮乏的时候此插件是为数不多用起来还不错的项目。此外，特别是做前端开发的小伙伴，在开发过程经常会用到其提供的转发功能来保可以用域名进行请求。即使是现在仍有大批的用户在使用该插件。</p>\n<p>但该插件又不能说毫无槽点，GitHub issue 中也有不少用户进行反馈，如在浏览器扩展栏中点击小图标会出现弹出页面加载失败的情况，配置失败导致插件崩溃继而引发浏览器崩溃，加载资源失败等等，以及 10 年前的界面风格，上次更新距今也过去 4 年了。</p>\n<p>所以，想着能不能对插件重构一下，其实正式的重构在今年春节的时候就开始了（比较巧的是 2 月份 Google 宣布 6 月份开始不支持 manifest v2 版本的插件），由于 Switchy Omega 是用 coffeescript 构建，加之项目本身的复杂度看起来还是有点难度的，所以基本上是从头进行开发了，以至于拖拖拉拉到了现在，但核心功能已经基本可用了。</p>\n<h2>目前支持的功能</h2>\n<p>核心功能其实均已经支持，具体如下。</p>\n<h4>模式配置</h4>\n<ul>\n<li>Proxy 模式，即 so （ Switchy Omega ） 中的 Proxy Profile ，此模式下配置好本地的代理服务，根据请求 schema 选择对应的协议。</li>\n</ul>\n<p><img class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/gFqdpOF.png\"/></p>\n<ul>\n<li>Auto 模式，即 so 中 Switch Profile ，此模式下可以根据设置的 Host 规则路由到不同的 Proxy 中，也可以下载在线的 PAC 格式资源进行匹配后再转发。</li>\n</ul>\n<p><img class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/Hz5xj97.png\"/></p>\n<ul>\n<li>Pac 模式，即 so 中 Pac Profile ，此模式下直接使用在线或者手动录入的 PAC 内容作为配置规则。建议熟悉 PAC 文件的同学使用。</li>\n</ul>\n<p><img class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/3TdiJBp.png\"/></p>\n<h4>规则切换</h4>\n<ul>\n<li>插件栏中点击小图标，可将配置好的规则展现出来，点击即可进行切换，同样在配置页面可以选择是否在切换时进行刷新。</li>\n</ul>\n<p><img class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/g82JG6U.png\"/></p>\n<ul>\n<li>另外，配置的规则会根据名字生成唯一的颜色标识，选中的配置所对应的颜色同样会在状态栏插件中体现出来</li>\n</ul>\n<p><img class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/chWyWut.png\"/>\n<img class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/hk6aIv6.png\"/></p>\n<h2>计划支持的功能</h2>\n<p>还有很多功能计划未来逐步添加，暂定每半个月一个版本的节奏。</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"/> 导入导出</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 规则颜色可配</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 深色模式，跟随系统</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 点击小图标规则跳转配置页</li>\n<li><input disabled=\"\" type=\"checkbox\"/> 异常配置检测</li>\n</ul>\n<h2>最后</h2>\n<p>由于目前还在密集开发中，使用中有什么问题的话可随时到 <a href=\"https://github.com/proxy-rock/proxy-rock/issues\" rel=\"nofollow\">https://github.com/proxy-rock/proxy-rock/issues</a> 进行反馈。</p>\n<p>感谢 Switch Omega 的作者给我们带来如此优秀的项目 :+1: 。</p>\n", "last_modified": 1710470858, "replies": 50, "id": 1023873}]