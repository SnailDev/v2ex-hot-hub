[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1677911181", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1677911181", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 56596, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1677911181", "stars": 8426, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 620639, "username": "ScottHU", "url": "https://www.v2ex.com/u/ScottHU", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "全栈工程师", "avatar_mini": "https://cdn.v2ex.com/avatar/d239/f440/620639_mini.png?m=1686715527", "avatar_normal": "https://cdn.v2ex.com/avatar/d239/f440/620639_normal.png?m=1686715527", "avatar_large": "https://cdn.v2ex.com/avatar/d239/f440/620639_large.png?m=1686715527", "avatar_xlarge": "https://cdn.v2ex.com/avatar/d239/f440/620639_xlarge.png?m=1686715527", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/d239/f440/620639_xlarge.png?m=1686715527", "created": 1679644923, "last_modified": 1686715527}, "last_reply_by": "gunnarli", "last_touched": 1686797646, "title": "是时候该换掉你的 axios 了", "url": "https://www.v2ex.com/t/948621", "created": 1686715553, "deleted": 0, "content": "axios 是一个基于 Promise 的 HTTP 客户端，每周的 npm 下载量 4000W+，如果回到在 10 年前，promise 式的请求工具是一个很大的创新，它解决了请求繁琐的问题，在那个性能要求不那么高的年代可谓是一骑绝尘。但随着时间的推移，Axios 在开发效率和性能方面开始有所落后，现在都已经是 2023 年了，面对日益复杂的需求，我们需要的是一款更具创新性和领先性的请求工具，而 promise 式的请求工具只能被称为**传统**了，如果你想保持在快速发展的前沿，那么请继续阅读。\r\n\r\n> 首先我想声明的是，我确实不是标题党，接下来我将通过暴露随着时间的推移，axios 在一些方面表现的力不从心，并推荐一个新的，相比 axios 更具现代化和创新性的请求工具给你，它就是 [轻量级的请求策略库 alova]( https://alova.js.org/)\r\n\r\n# 接下来我们看看 Promise 式请求工具的弱点（ axios ）\r\n\r\n## 1. 与 React 、Vue 等框架割裂\r\n现在，React 、Vue 等前端 UI 框架对于前端来说几乎是不可缺少的，axios 无法和这些框架的状态深度绑定，需要开发者自行维护它们，导致开发效率较低。\r\n\r\n## 2. 在性能方面毫无作为\r\n2023 年了，相比 10 年前的应用已经复杂了不知几个数量级，在请求方面要求也越来越高，来保证页面性能的要求，axios 在这方面毫无作为，例如在频繁地重复请求、同时发起多个相同请求等场景。\r\n\r\n## 3. 臃肿的体积\r\n根据 bundlephobia 显示，axios 的体积在压缩状态下有 11+kb ，不信的话，[你可以点此去查看]( https://bundlephobia.com/package/axios)\r\n\r\n## 4. 响应数据的 Ts 类型定义混乱\r\n在使用 axios 时，你可能经常会这样写：\r\n\r\n```typescript\r\n// 创建一个 axios 实例\r\nconst inst = axios.create({\r\n  baseURL: 'https://example.com/'\r\n})\r\n\r\n// 在响应拦截器中返回 data\r\ninst.interceptors.response.use(response => {\r\n  if (response.status === 200) {\r\n    return response.data\r\n  }\r\n  throw new Error(response.status)\r\n})\r\n\r\ninterface Resp {\r\n  id: number\r\n}\r\ninst.get<Resp>('/xxx').then(result => {\r\n  // result 的类型总是为 axios.AxiosResponse<Resp>\r\n  data.data\r\n})\r\n```\r\n不知道是 axios 故意为之还是忽略了，以上的发起的 GET 请求中，响应数据`result`的类型总是`axios.AxiosResponse<Resp>`的，但其实我们在响应拦截器中已经将`response.data`返回了，这导致响应数据类型混乱而被困扰。\r\n\r\n# 在 alova 中是如何解决的呢？\r\n\r\nalova 作为一个更加现代化，更加适应复杂应用的请求方案，也给出了它更加优雅的解决方案。同时为了降低给的学习成本，也保持了和 axios 相似的 api 设计，看起来就很熟悉有木有。\r\n\r\n> alova 读作“阿洛娃”，虽然和 axios 一样都是以 a 开头，以下两个名称需要注意区分哦！\r\n\r\n## 与 UI 框架深度融合，自动管理请求相关数据\r\n假设我们需要发起一个基本的数据获取请求，以 vue 为例，直接上对比代码。\r\n\r\n**axios**\r\n```html\r\n<template>\r\n  <div v-if=\"loading\">Loading...</div>\r\n  <div v-else-if=\"error\" class=\"error\">\r\n    {{ error.message }}\r\n  </div>\r\n  <div v-else>{{ data }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport axios from 'axios';\r\nimport { ref, onMounted } from 'vue';\r\n\r\nconst loading = ref(false);\r\nconst error = ref(null);\r\nconst data = ref(null);\r\n\r\nconst requestData = () => {\r\n  loading.value = true;\r\n  axios.get('http://xxx/index').then(result => {\r\n    data.value = result;\r\n  }).catch(e => {\r\n    error.value = e;\r\n  }).finally(() => {\r\n    loading.value = false;\r\n  });\r\n}\r\nonMounted(requestData);\r\n</script>\r\n```\r\n\r\n**alova**\r\n```html\r\n<template>\r\n  <div v-if=\"loading\">Loading...</div>\r\n  <div v-else-if=\"error\" class=\"error\">\r\n    {{ error.message }}\r\n  </div>\r\n  <div v-else>{{ data }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport { createAlova } from 'alova';\r\n\r\nconst pageData = createAlova({ baseURL: 'http://xxx' }).Get('/index');\r\nconst { loading, data, error } = useRequest(pageData);\r\n</script>\r\n```\r\n\r\n在 axios 中需要自己创建对应的请求状态并自行维护，而 alova 却帮你接管了这项工作\r\n\r\n## 开箱即用的高性能功能\r\n\r\n传统 Promise 式的请求工具主要定位于通过 Promise 的方式简化请求，而提高性能可能是它们最不会考虑的一点，但作为请求策略库的 alova 中却着重突出这一点，在 alova 中默认开启了内存缓存和请求共享，这两项可以极大地提高请求性能，提升用户体验的同时还能降低服务端压力，让我们来一一了解下它们吧。\r\n\r\n**内存缓存**\r\n\r\n内存模式就是在请求响应后将响应数据保存在本地内存中，当下次再发起相同请求时就会使用缓存数据，而不会再次发送请求，试想一下，当你在实现一个列表页，点击列表项可以进入详情页查看数据，你会想到用户可能会频繁在列表中点击查看详情，当详情数据没有变化时，如果每一次进入详情页都要请求一次未免也太浪费了，而且每次还需要用户等待加载。在 alova 中你可以默认享受到这样的待遇，以下展示下效果\r\n\r\n![screenshots.gif]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/310166bcba7845faa7b5cf8ee50437f6~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n**请求共享**\r\n\r\n你可能遇到过这种情况，当一个请求发出但还未响应时，又发起了相同请求，就造成了请求浪费，或者重复提交问题，例如以下三种场景：\r\n\r\n1. 一个组件在创建时会获取初始化数据，当一个页面同时渲染多个此组件时，将会同时发出多次相同请求；\r\n2. 提交按钮未被禁用，用户点击了多次提交按钮；\r\n3. 当预加载还未完成时进入了预加载页面，将会发起多次相同请求；\r\n\r\n共享请求就是用来解决这些问题的，它是通过复用请求的方式来实现的，由于这种案例无法直观展示，就不展示了，有兴趣的小伙伴可以自行体验体验。\r\n\r\n> 除此以外，自称是请求策略库的 alova 还提供了特定场景下的请求策略，我们将在下文中介绍，有兴趣的小伙伴请继续往下看。\r\n\r\n\r\n## 轻量级的体积\r\n压缩状态下的 alova 只有 4kb+，只有 axios 的 30%+，不信的话，[你可以点此去查看]( https://bundlephobia.com/package/alova)\r\n\r\n## 更加直观的响应数据 TS 类型\r\n\r\n在 axios 中，你想要定义响应数据的类型真是会让人感到困惑，如果你是个 Typescript 的重度用户，alova 可以给你提供完整的类型体验，当你在请求处定义响应数据时的类型后，你可以在多处享受到它，会让你感觉很清晰，我们来看看。\r\n\r\n```typescript\r\ninterface Resp {\r\n  id: number\r\n}\r\nconst pageData = createAlova({ baseURL: 'http://xxx' }).Get<Resp>('/index');\r\nconst {\r\n  data,  // data 的类型为 Resp\r\n  loading, error, onSuccess, send\r\n} = useRequest(pageData);\r\nonSuccess(event => {\r\n  // 在成功回调中获取响应数据时，event.data 的值类型也是 Resp\r\n  console.log(event.data);\r\n});\r\n\r\nconst handleClick = async () => {\r\n  // send 函数可以手动再次发送请求，它将可以接收到响应数据，它的值类型还是 Resp\r\n  const data = await send();\r\n}\r\n```\r\n\r\n至此，相比传统的 Promise 式请求库，你可能已经初步了解了 alova 的厉害。\r\n\r\n**但... 它的特性还远不止于此！**\r\n\r\n# alova 的其他特性\r\n\r\n## 多 UI 框架同时支持\r\n\r\nalova 同时支持 react 、vue 、svelte ，无论你使用哪种 UI 框架，它都能满足你。\r\n\r\n## 与 axios 相似的 api 设计，用起来更简单熟悉\r\nalova 的请求信息构造几乎和 axios 相同，我们来对比一下它们的 GET 和 POST 请求。\r\n\r\n**GET 请求**\r\n\r\n```js\r\n// axios\r\naxios.get('/index', {\r\n  // 设置请求头\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  },\r\n  // params 参数\r\n  params: {\r\n    userId: 1\r\n  }\r\n});\r\n\r\n// alova\r\nconst todoListGetter = alovaInstance.Get('/index', {\r\n  // 设置请求头\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  },\r\n  // params 参数\r\n  params: {\r\n    userId: 1\r\n  }\r\n});\r\n```\r\n\r\n**POST 请求**\r\n```js\r\n// axios\r\naxios.post('/login', {\r\n  username: 'xxx',\r\n  password: 'ppp'\r\n}, {\r\n  // 设置请求头\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  },\r\n  // params 参数\r\n  params: {\r\n    userId: 1\r\n  }\r\n});\r\n\r\n// alova\r\nconst loginPoster = alovaInstance.Post('/login', {\r\n  username: 'xxx',\r\n  password: 'ppp'\r\n}, {\r\n  // 设置请求头\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  },\r\n  // params 参数\r\n  params: {\r\n    userId: 1\r\n  }\r\n});\r\n```\r\n\r\n## （请求策略）高性能分页请求策略\r\n\r\n自动维护分页相关数据和状态，并提供了常用的分页数据操作能力，据官方介绍，可以让列表页流畅性提高 300%，编码难度降低 50%，以下是官方提供的示例，有兴趣的同学可以去看看。\r\n\r\n[分页列表示例]( https://alova.js.org/example/paginated-list)\r\n\r\n[下拉加载示例]( https://alova.js.org/example/load-more)\r\n\r\n## （请求策略）无感数据交互\r\n\r\n这个在我看来，这个无感数据交互请求策略可谓是一大创举，我把它理解为更加可靠的乐观更新，官网是这样解释的：\r\n\r\n> 无感数据交互是指用户在与应用进行交互时，无需等待即可立即展示相关内容，或者提交信息时也无需等待即可展示操作结果，就像和本地数据交互一样，从而大幅提升应用的流畅性，它让用户感知不到数据传输带来的卡顿。可以更高限度地降低网络波动带来的问题，你的应用在高延迟网络甚至是断网状态下依然可用。\r\n\r\n在我的体验过程中，即使在弱网状态下，也可以让我感受到一种毫无延迟带来的顺畅感，你也来感受下吧。\r\n\r\n![screenshots.gif]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6955a59f41c406483570481075568f5~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n据我了解，它使用以下技术：\r\n1. 持久化的请求队列来保证请求的安全性和串联性；\r\n2. 请求重试策略机制，来保证请求的顺利完成；\r\n3. 虚拟响应数据（一个创新的概念），来作为未响应时的数据占位，以便在响应后定位它并替换为实际数据。\r\n\r\n关于无感数据交互更具体的可以在[官网]( https://alova.js.org/strategy/sensorless-data-interaction/overview)了解哦\r\n\r\n## 数据预拉取\r\n\r\n通过拉取数据的方式预先加载好数据并缓存在本地，当真正用到这部分数据时就可以命中缓存并直接显示数据，这种方式也极大地提升了用户体验。\r\n\r\n# 写在最后\r\n\r\n总之，alova 作为一个新生代的请求工具，具有很大的潜力，你也想试用的话，可以点击以下链接去了解。\r\n\r\n[alova 官网]( https://alova.js.org/)\r\n\r\n[alova 的 Github 地址]( https://github.com/alovajs/alova)\r\n\r\n写作不易，看都看到这了，不如帮我点个免费的爱心吧！！！感谢你的喜欢", "content_rendered": "<p>axios 是一个基于 Promise 的 HTTP 客户端，每周的 npm 下载量 4000W+，如果回到在 10 年前，promise 式的请求工具是一个很大的创新，它解决了请求繁琐的问题，在那个性能要求不那么高的年代可谓是一骑绝尘。但随着时间的推移，Axios 在开发效率和性能方面开始有所落后，现在都已经是 2023 年了，面对日益复杂的需求，我们需要的是一款更具创新性和领先性的请求工具，而 promise 式的请求工具只能被称为<strong>传统</strong>了，如果你想保持在快速发展的前沿，那么请继续阅读。</p>\n<blockquote>\n<p>首先我想声明的是，我确实不是标题党，接下来我将通过暴露随着时间的推移，axios 在一些方面表现的力不从心，并推荐一个新的，相比 axios 更具现代化和创新性的请求工具给你，它就是 <a href=\"https://alova.js.org/\" rel=\"nofollow\">轻量级的请求策略库 alova</a></p>\n</blockquote>\n<h1>接下来我们看看 Promise 式请求工具的弱点（ axios ）</h1>\n<h2>1. 与 React 、Vue 等框架割裂</h2>\n<p>现在，React 、Vue 等前端 UI 框架对于前端来说几乎是不可缺少的，axios 无法和这些框架的状态深度绑定，需要开发者自行维护它们，导致开发效率较低。</p>\n<h2>2. 在性能方面毫无作为</h2>\n<p>2023 年了，相比 10 年前的应用已经复杂了不知几个数量级，在请求方面要求也越来越高，来保证页面性能的要求，axios 在这方面毫无作为，例如在频繁地重复请求、同时发起多个相同请求等场景。</p>\n<h2>3. 臃肿的体积</h2>\n<p>根据 bundlephobia 显示，axios 的体积在压缩状态下有 11+kb ，不信的话，<a href=\"https://bundlephobia.com/package/axios\" rel=\"nofollow\">你可以点此去查看</a></p>\n<h2>4. 响应数据的 Ts 类型定义混乱</h2>\n<p>在使用 axios 时，你可能经常会这样写：</p>\n<pre><code class=\"language-typescript\">// 创建一个 axios 实例\nconst inst = axios.create({\n  baseURL: 'https://example.com/'\n})\n\n// 在响应拦截器中返回 data\ninst.interceptors.response.use(response =&gt; {\n  if (response.status === 200) {\n    return response.data\n  }\n  throw new Error(response.status)\n})\n\ninterface Resp {\n  id: number\n}\ninst.get&lt;Resp&gt;('/xxx').then(result =&gt; {\n  // result 的类型总是为 axios.AxiosResponse&lt;Resp&gt;\n  data.data\n})\n</code></pre>\n<p>不知道是 axios 故意为之还是忽略了，以上的发起的 GET 请求中，响应数据<code>result</code>的类型总是<code>axios.AxiosResponse&lt;Resp&gt;</code>的，但其实我们在响应拦截器中已经将<code>response.data</code>返回了，这导致响应数据类型混乱而被困扰。</p>\n<h1>在 alova 中是如何解决的呢？</h1>\n<p>alova 作为一个更加现代化，更加适应复杂应用的请求方案，也给出了它更加优雅的解决方案。同时为了降低给的学习成本，也保持了和 axios 相似的 api 设计，看起来就很熟悉有木有。</p>\n<blockquote>\n<p>alova 读作“阿洛娃”，虽然和 axios 一样都是以 a 开头，以下两个名称需要注意区分哦！</p>\n</blockquote>\n<h2>与 UI 框架深度融合，自动管理请求相关数据</h2>\n<p>假设我们需要发起一个基本的数据获取请求，以 vue 为例，直接上对比代码。</p>\n<p><strong>axios</strong></p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div v-if=\"loading\"&gt;Loading...&lt;/div&gt;\n  &lt;div v-else-if=\"error\" class=\"error\"&gt;\n    {{ error.message }}\n  &lt;/div&gt;\n  &lt;div v-else&gt;{{ data }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport axios from 'axios';\nimport { ref, onMounted } from 'vue';\n\nconst loading = ref(false);\nconst error = ref(null);\nconst data = ref(null);\n\nconst requestData = () =&gt; {\n  loading.value = true;\n  axios.get('http://xxx/index').then(result =&gt; {\n    data.value = result;\n  }).catch(e =&gt; {\n    error.value = e;\n  }).finally(() =&gt; {\n    loading.value = false;\n  });\n}\nonMounted(requestData);\n&lt;/script&gt;\n</code></pre>\n<p><strong>alova</strong></p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div v-if=\"loading\"&gt;Loading...&lt;/div&gt;\n  &lt;div v-else-if=\"error\" class=\"error\"&gt;\n    {{ error.message }}\n  &lt;/div&gt;\n  &lt;div v-else&gt;{{ data }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { createAlova } from 'alova';\n\nconst pageData = createAlova({ baseURL: 'http://xxx' }).Get('/index');\nconst { loading, data, error } = useRequest(pageData);\n&lt;/script&gt;\n</code></pre>\n<p>在 axios 中需要自己创建对应的请求状态并自行维护，而 alova 却帮你接管了这项工作</p>\n<h2>开箱即用的高性能功能</h2>\n<p>传统 Promise 式的请求工具主要定位于通过 Promise 的方式简化请求，而提高性能可能是它们最不会考虑的一点，但作为请求策略库的 alova 中却着重突出这一点，在 alova 中默认开启了内存缓存和请求共享，这两项可以极大地提高请求性能，提升用户体验的同时还能降低服务端压力，让我们来一一了解下它们吧。</p>\n<p><strong>内存缓存</strong></p>\n<p>内存模式就是在请求响应后将响应数据保存在本地内存中，当下次再发起相同请求时就会使用缓存数据，而不会再次发送请求，试想一下，当你在实现一个列表页，点击列表项可以进入详情页查看数据，你会想到用户可能会频繁在列表中点击查看详情，当详情数据没有变化时，如果每一次进入详情页都要请求一次未免也太浪费了，而且每次还需要用户等待加载。在 alova 中你可以默认享受到这样的待遇，以下展示下效果</p>\n<p><img alt=\"screenshots.gif\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/310166bcba7845faa7b5cf8ee50437f6%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p><strong>请求共享</strong></p>\n<p>你可能遇到过这种情况，当一个请求发出但还未响应时，又发起了相同请求，就造成了请求浪费，或者重复提交问题，例如以下三种场景：</p>\n<ol>\n<li>一个组件在创建时会获取初始化数据，当一个页面同时渲染多个此组件时，将会同时发出多次相同请求；</li>\n<li>提交按钮未被禁用，用户点击了多次提交按钮；</li>\n<li>当预加载还未完成时进入了预加载页面，将会发起多次相同请求；</li>\n</ol>\n<p>共享请求就是用来解决这些问题的，它是通过复用请求的方式来实现的，由于这种案例无法直观展示，就不展示了，有兴趣的小伙伴可以自行体验体验。</p>\n<blockquote>\n<p>除此以外，自称是请求策略库的 alova 还提供了特定场景下的请求策略，我们将在下文中介绍，有兴趣的小伙伴请继续往下看。</p>\n</blockquote>\n<h2>轻量级的体积</h2>\n<p>压缩状态下的 alova 只有 4kb+，只有 axios 的 30%+，不信的话，<a href=\"https://bundlephobia.com/package/alova\" rel=\"nofollow\">你可以点此去查看</a></p>\n<h2>更加直观的响应数据 TS 类型</h2>\n<p>在 axios 中，你想要定义响应数据的类型真是会让人感到困惑，如果你是个 Typescript 的重度用户，alova 可以给你提供完整的类型体验，当你在请求处定义响应数据时的类型后，你可以在多处享受到它，会让你感觉很清晰，我们来看看。</p>\n<pre><code class=\"language-typescript\">interface Resp {\n  id: number\n}\nconst pageData = createAlova({ baseURL: 'http://xxx' }).Get&lt;Resp&gt;('/index');\nconst {\n  data,  // data 的类型为 Resp\n  loading, error, onSuccess, send\n} = useRequest(pageData);\nonSuccess(event =&gt; {\n  // 在成功回调中获取响应数据时，event.data 的值类型也是 Resp\n  console.log(event.data);\n});\n\nconst handleClick = async () =&gt; {\n  // send 函数可以手动再次发送请求，它将可以接收到响应数据，它的值类型还是 Resp\n  const data = await send();\n}\n</code></pre>\n<p>至此，相比传统的 Promise 式请求库，你可能已经初步了解了 alova 的厉害。</p>\n<p><strong>但... 它的特性还远不止于此！</strong></p>\n<h1>alova 的其他特性</h1>\n<h2>多 UI 框架同时支持</h2>\n<p>alova 同时支持 react 、vue 、svelte ，无论你使用哪种 UI 框架，它都能满足你。</p>\n<h2>与 axios 相似的 api 设计，用起来更简单熟悉</h2>\n<p>alova 的请求信息构造几乎和 axios 相同，我们来对比一下它们的 GET 和 POST 请求。</p>\n<p><strong>GET 请求</strong></p>\n<pre><code class=\"language-js\">// axios\naxios.get('/index', {\n  // 设置请求头\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  // params 参数\n  params: {\n    userId: 1\n  }\n});\n\n// alova\nconst todoListGetter = alovaInstance.Get('/index', {\n  // 设置请求头\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  // params 参数\n  params: {\n    userId: 1\n  }\n});\n</code></pre>\n<p><strong>POST 请求</strong></p>\n<pre><code class=\"language-js\">// axios\naxios.post('/login', {\n  username: 'xxx',\n  password: 'ppp'\n}, {\n  // 设置请求头\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  // params 参数\n  params: {\n    userId: 1\n  }\n});\n\n// alova\nconst loginPoster = alovaInstance.Post('/login', {\n  username: 'xxx',\n  password: 'ppp'\n}, {\n  // 设置请求头\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  // params 参数\n  params: {\n    userId: 1\n  }\n});\n</code></pre>\n<h2>（请求策略）高性能分页请求策略</h2>\n<p>自动维护分页相关数据和状态，并提供了常用的分页数据操作能力，据官方介绍，可以让列表页流畅性提高 300%，编码难度降低 50%，以下是官方提供的示例，有兴趣的同学可以去看看。</p>\n<p><a href=\"https://alova.js.org/example/paginated-list\" rel=\"nofollow\">分页列表示例</a></p>\n<p><a href=\"https://alova.js.org/example/load-more\" rel=\"nofollow\">下拉加载示例</a></p>\n<h2>（请求策略）无感数据交互</h2>\n<p>这个在我看来，这个无感数据交互请求策略可谓是一大创举，我把它理解为更加可靠的乐观更新，官网是这样解释的：</p>\n<blockquote>\n<p>无感数据交互是指用户在与应用进行交互时，无需等待即可立即展示相关内容，或者提交信息时也无需等待即可展示操作结果，就像和本地数据交互一样，从而大幅提升应用的流畅性，它让用户感知不到数据传输带来的卡顿。可以更高限度地降低网络波动带来的问题，你的应用在高延迟网络甚至是断网状态下依然可用。</p>\n</blockquote>\n<p>在我的体验过程中，即使在弱网状态下，也可以让我感受到一种毫无延迟带来的顺畅感，你也来感受下吧。</p>\n<p><img alt=\"screenshots.gif\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6955a59f41c406483570481075568f5%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>据我了解，它使用以下技术：</p>\n<ol>\n<li>持久化的请求队列来保证请求的安全性和串联性；</li>\n<li>请求重试策略机制，来保证请求的顺利完成；</li>\n<li>虚拟响应数据（一个创新的概念），来作为未响应时的数据占位，以便在响应后定位它并替换为实际数据。</li>\n</ol>\n<p>关于无感数据交互更具体的可以在<a href=\"https://alova.js.org/strategy/sensorless-data-interaction/overview\" rel=\"nofollow\">官网</a>了解哦</p>\n<h2>数据预拉取</h2>\n<p>通过拉取数据的方式预先加载好数据并缓存在本地，当真正用到这部分数据时就可以命中缓存并直接显示数据，这种方式也极大地提升了用户体验。</p>\n<h1>写在最后</h1>\n<p>总之，alova 作为一个新生代的请求工具，具有很大的潜力，你也想试用的话，可以点击以下链接去了解。</p>\n<p><a href=\"https://alova.js.org/\" rel=\"nofollow\">alova 官网</a></p>\n<p><a href=\"https://github.com/alovajs/alova\" rel=\"nofollow\">alova 的 Github 地址</a></p>\n<p>写作不易，看都看到这了，不如帮我点个免费的爱心吧！！！感谢你的喜欢</p>\n", "last_modified": 1686715626, "replies": 112, "id": 948621}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1650127281", "name": "share", "avatar_normal": "https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1650127281", "title": "分享发现", "url": "https://www.v2ex.com/go/share", "topics": 38704, "footer": "", "header": "分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。", "title_alternative": "Share", "avatar_mini": "https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1650127281", "stars": 5386, "aliases": [], "root": false, "id": 16, "parent_node_name": "v2ex"}, "member": {"id": 588794, "username": "davinci21s", "url": "https://www.v2ex.com/u/davinci21s", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/7a4c4bbb84322b069036d29ad8e1658e?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/7a4c4bbb84322b069036d29ad8e1658e?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/7a4c4bbb84322b069036d29ad8e1658e?s=73&d=retro", "created": 1658391108, "last_modified": 1666580786}, "last_reply_by": "erhaosan", "last_touched": 1686798147, "title": "来衣复制：新的商机", "url": "https://www.v2ex.com/t/948651", "created": 1686722164, "deleted": 0, "content": "昨天突然想到，自己有件衣服挺好看的，但是价格比较贵，假如有人能提供这样一种服务：\r\n\r\n给商家一件自己的衣服，商家一比一复制，甚至衣物材料都一样，但是价格却很划算，应该有点市场吧。\r\n\r\n\r\n这肯定与直接定制衣服不太一样。", "content_rendered": "<p>昨天突然想到，自己有件衣服挺好看的，但是价格比较贵，假如有人能提供这样一种服务：</p>\n<p>给商家一件自己的衣服，商家一比一复制，甚至衣物材料都一样，但是价格却很划算，应该有点市场吧。</p>\n<p>这肯定与直接定制衣服不太一样。</p>\n", "last_modified": 1686722164, "replies": 108, "id": 948651}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1677911181", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1677911181", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 56596, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1677911181", "stars": 8426, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 437866, "username": "samin", "url": "https://www.v2ex.com/u/samin", "website": "https://github.com/SaminZou/study-prj", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "https://github.com/SaminZou/study-prj", "avatar_mini": "https://cdn.v2ex.com/avatar/888b/8136/437866_mini.png?m=1675740115", "avatar_normal": "https://cdn.v2ex.com/avatar/888b/8136/437866_normal.png?m=1675740115", "avatar_large": "https://cdn.v2ex.com/avatar/888b/8136/437866_large.png?m=1675740115", "avatar_xlarge": "https://cdn.v2ex.com/avatar/888b/8136/437866_xlarge.png?m=1675740115", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/888b/8136/437866_xlarge.png?m=1675740115", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/888b/8136/437866_xlarge.png?m=1675740115", "created": 1566715715, "last_modified": 1675740115}, "last_reply_by": "SomeBodsy", "last_touched": 1686797356, "title": "头条：国家发改委通报中职、高职毕业生就业率超 95%和 90%", "url": "https://www.v2ex.com/t/948697", "created": 1686727834, "deleted": 0, "content": "", "content_rendered": "", "last_modified": 1686727834, "replies": 101, "id": 948697}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 205097, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3833, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 628476, "username": "jameskongawork", "url": "https://www.v2ex.com/u/jameskongawork", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/294675129fa8eaa6d97e78b5978256ea?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/294675129fa8eaa6d97e78b5978256ea?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/294675129fa8eaa6d97e78b5978256ea?s=73&d=retro", "created": 1683781450, "last_modified": 1683781450}, "last_reply_by": "chenPiMeiHaoChi", "last_touched": 1686797941, "title": "应试教育把人都学傻了。", "url": "https://www.v2ex.com/t/948819", "created": 1686758027, "deleted": 0, "content": "虽然不是全局否定应试教育，但是工作了几年发现新进来的人越来越不行。\r\n\r\n不行的体现：\r\n1.19 年进来的人能发现问题，但是他们不能主动探索根源。\r\n2.19 年进来的人不太能主动搜文档，而是希望别人讲。\r\n3.19 年进来的人别人主动讲的时候，会说哦我知道了，但是实际上根本没明白，尤其是多次确认你真的明白吗，他们还是一口咬定明白，但是最后发现根本没明白\r\n4.19 年进来的人可以与他们进行比较好的互动，他们会表达自己的兴趣爱好，甚至是一些对于当前发生的事情自己的看法\r\n\r\n然后就是 21 年进来的人\r\n1.21 年进来的人学历很高（清北研究生毕业）\r\n2.21 年进来的人不能发现问题，哪怕最简单的 diff 都懒得做\r\n3.21 年进来的人对工作内容完全没有兴趣，所以文档什么的根本不会看，但是希望别人讲\r\n4.21 年进来的人在别人讲的时候完全不放在心上。几乎就是左耳进右耳出。\r\n4.21 年进来的人几乎没有办法和他们产生太多互动，他们表述自己没有什么兴趣爱好，对于当前发生的一些事情甚至不了解\r\n\r\n今天突然在 v2 上面看到有人认为就业形势不好，觉得要大学缩招才是解决办法。\r\n我在想难道不是鼓励创业，鼓励创新才是解决办法吗？\r\n\r\n我在想到底是什么出了问题，和我年轻时候相比，现在的新人的成长环境应该能接触到更多的东西，更多的资讯，可以尝试的东西更多。\r\n但是反观，实际上却更加缺乏了观察发现思考的能力，甚至很多时候不想，不希望去了解。", "content_rendered": "<p>虽然不是全局否定应试教育，但是工作了几年发现新进来的人越来越不行。</p>\n<p>不行的体现：\n1.19 年进来的人能发现问题，但是他们不能主动探索根源。\n2.19 年进来的人不太能主动搜文档，而是希望别人讲。\n3.19 年进来的人别人主动讲的时候，会说哦我知道了，但是实际上根本没明白，尤其是多次确认你真的明白吗，他们还是一口咬定明白，但是最后发现根本没明白\n4.19 年进来的人可以与他们进行比较好的互动，他们会表达自己的兴趣爱好，甚至是一些对于当前发生的事情自己的看法</p>\n<p>然后就是 21 年进来的人\n1.21 年进来的人学历很高（清北研究生毕业）\n2.21 年进来的人不能发现问题，哪怕最简单的 diff 都懒得做\n3.21 年进来的人对工作内容完全没有兴趣，所以文档什么的根本不会看，但是希望别人讲\n4.21 年进来的人在别人讲的时候完全不放在心上。几乎就是左耳进右耳出。\n4.21 年进来的人几乎没有办法和他们产生太多互动，他们表述自己没有什么兴趣爱好，对于当前发生的一些事情甚至不了解</p>\n<p>今天突然在 v2 上面看到有人认为就业形势不好，觉得要大学缩招才是解决办法。\n我在想难道不是鼓励创业，鼓励创新才是解决办法吗？</p>\n<p>我在想到底是什么出了问题，和我年轻时候相比，现在的新人的成长环境应该能接触到更多的东西，更多的资讯，可以尝试的东西更多。\n但是反观，实际上却更加缺乏了观察发现思考的能力，甚至很多时候不想，不希望去了解。</p>\n", "last_modified": 1686758027, "replies": 95, "id": 948819}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1677911181", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1677911181", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 56596, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1677911181", "stars": 8426, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 279175, "username": "mrzx", "url": "https://www.v2ex.com/u/mrzx", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/2b7c/af18/279175_mini.png?m=1661750224", "avatar_normal": "https://cdn.v2ex.com/avatar/2b7c/af18/279175_normal.png?m=1661750224", "avatar_large": "https://cdn.v2ex.com/avatar/2b7c/af18/279175_large.png?m=1661750224", "created": 1514963125, "last_modified": 1661750224}, "last_reply_by": "gongxuanzhang", "last_touched": 1686797547, "title": "猛然发现， Linux 这些年进步迅速啊。Windows 的原有市场在慢慢被蚕食。。", "url": "https://www.v2ex.com/t/948683", "created": 1686726402, "deleted": 0, "content": "windows 要面对的对手不止 linux.而是各大平台，移动平台，苹果平台等等\r\n\r\n1.首先，随着移动平台的发展，各种银联登录，转账都迁移到移动平台上了，十几年前想在 linux 上淘宝上买个东西都难的要命。\r\n早期不管是银联，还是淘宝，还是政务平台，很多各大网站，只支持 IE 浏览器+ActiveX 插件。linux+火狐浏览器的组合根本无法撼动行业格局。\r\n现在呢，任何业务要是没有手机 app 和支持 html5 的页面基本不可能。。哈哈，没想微软这套组合最终被手机平台干掉了\r\n很多老的政府平台也在积极改革迁移到移动平台和 html5\r\n\r\n\r\n2.现在越来越多的企业管理方案要支持多平台，最少要支持 mac os 和 windows ，各种终端管理，SSL VPN 客户端等等，不在只支持 windows 平台。即使是国外公司用的最多微软 365 整体企业安全管理服务及解决方案也要支持 windows 和 mac os,最新的 aad 云上域控都开始支持 linux 终端管理了（目前已经在使用阶段，我看页面上已经可以操作了）。国内公司大多不用微软这套企业管理方案，所以很多人不知道。\r\n\r\n\r\n\r\n3.以前主流游戏基本上支持 windows.现在很多游戏都支持多平台了，比如 mac os ，手机平台，\r\nsteam 作为世界上最大的游戏平台，它一直在致力推送各大厂家的 3A 游戏支持多平台，现在有很多游戏原生就支持 linux 平台。。。\r\nvlukan 图形技术和各大游戏引擎的快速发展让很多游戏，加快了向多个平台迁移和开发。DirectX 12 不再是唯一选择\r\nN 卡和 AMD 的显卡闭源驱动在 linux 上同步更新速度越来越快（新显卡上市，不到几个月，linux 版驱动就会有）。支持的 linux 发行版本也越来越多，兼容性也原来越好。\r\n目前 steam 的 top 前 100 的游戏，至少有 70%以上可以支持在 linux 平台上运行（虽然有些游戏在 linux 上优化的不好，执行效率偏低），但慢慢在进步。\r\n\r\n家用的游戏串流越来越靠谱~\r\n\r\n\r\n\r\n\r\n4.现在随着自媒体的流行，大家视频剪辑的习惯也在慢慢改变，现在更多 UP 主采用了苹果的平台+Final Cut Pro ，抖音之类的流行，让更多的用户采用移动平台编辑视频.windows+Adobe Premiere Pro 的组合不再是首选\r\n\r\n\r\n十几年前，我为了学习 linux,逼着自己在笔记本上安装原生 linux （ ubuntu 6.06 lts ）,用了 2 年之久。一堆问题。\r\n现在，我刚买了 thinkbook 14+,安装了 Manjaro ，基本没遇到什么硬件兼容问题。这十几年，linux 真的是发展太迅速了。\r\n以后真的不见得是 windows 一家独大的情况了，移动平台，mac os ,linux 在蚕食它原有的市场。", "content_rendered": "<p>windows 要面对的对手不止 linux.而是各大平台，移动平台，苹果平台等等</p>\n<p>1.首先，随着移动平台的发展，各种银联登录，转账都迁移到移动平台上了，十几年前想在 linux 上淘宝上买个东西都难的要命。\n早期不管是银联，还是淘宝，还是政务平台，很多各大网站，只支持 IE 浏览器+ActiveX 插件。linux+火狐浏览器的组合根本无法撼动行业格局。\n现在呢，任何业务要是没有手机 app 和支持 html5 的页面基本不可能。。哈哈，没想微软这套组合最终被手机平台干掉了\n很多老的政府平台也在积极改革迁移到移动平台和 html5</p>\n<p>2.现在越来越多的企业管理方案要支持多平台，最少要支持 mac os 和 windows ，各种终端管理，SSL VPN 客户端等等，不在只支持 windows 平台。即使是国外公司用的最多微软 365 整体企业安全管理服务及解决方案也要支持 windows 和 mac os,最新的 aad 云上域控都开始支持 linux 终端管理了（目前已经在使用阶段，我看页面上已经可以操作了）。国内公司大多不用微软这套企业管理方案，所以很多人不知道。</p>\n<p>3.以前主流游戏基本上支持 windows.现在很多游戏都支持多平台了，比如 mac os ，手机平台，\nsteam 作为世界上最大的游戏平台，它一直在致力推送各大厂家的 3A 游戏支持多平台，现在有很多游戏原生就支持 linux 平台。。。\nvlukan 图形技术和各大游戏引擎的快速发展让很多游戏，加快了向多个平台迁移和开发。DirectX 12 不再是唯一选择\nN 卡和 AMD 的显卡闭源驱动在 linux 上同步更新速度越来越快（新显卡上市，不到几个月，linux 版驱动就会有）。支持的 linux 发行版本也越来越多，兼容性也原来越好。\n目前 steam 的 top 前 100 的游戏，至少有 70%以上可以支持在 linux 平台上运行（虽然有些游戏在 linux 上优化的不好，执行效率偏低），但慢慢在进步。</p>\n<p>家用的游戏串流越来越靠谱~</p>\n<p>4.现在随着自媒体的流行，大家视频剪辑的习惯也在慢慢改变，现在更多 UP 主采用了苹果的平台+Final Cut Pro ，抖音之类的流行，让更多的用户采用移动平台编辑视频.windows+Adobe Premiere Pro 的组合不再是首选</p>\n<p>十几年前，我为了学习 linux,逼着自己在笔记本上安装原生 linux （ ubuntu 6.06 lts ）,用了 2 年之久。一堆问题。\n现在，我刚买了 thinkbook 14+,安装了 Manjaro ，基本没遇到什么硬件兼容问题。这十几年，linux 真的是发展太迅速了。\n以后真的不见得是 windows 一家独大的情况了，移动平台，mac os ,linux 在蚕食它原有的市场。</p>\n", "last_modified": 1686726924, "replies": 95, "id": 948683}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/38af/8613/176_large.png?m=1644885960", "name": "car", "avatar_normal": "https://cdn.v2ex.com/navatar/38af/8613/176_normal.png?m=1644885960", "title": "汽车", "url": "https://www.v2ex.com/go/car", "topics": 1607, "footer": "", "header": "关于买车、开车及汽车文化的技术讨论", "title_alternative": "Car", "avatar_mini": "https://cdn.v2ex.com/navatar/38af/8613/176_mini.png?m=1644885960", "stars": 1539, "aliases": [], "root": false, "id": 176, "parent_node_name": "life"}, "member": {"id": 632963, "username": "yanguang", "url": "https://www.v2ex.com/u/yanguang", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/dfb16e8741bb33443ec76f16b9e2fefd?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/dfb16e8741bb33443ec76f16b9e2fefd?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/dfb16e8741bb33443ec76f16b9e2fefd?s=73&d=retro", "created": 1686129482, "last_modified": 1686629437}, "last_reply_by": "nyakoy", "last_touched": 1686797940, "title": "快 30 岁了想买辆宝马 M3", "url": "https://www.v2ex.com/t/948843", "created": 1686789166, "deleted": 0, "content": "最近想打算入手一辆宝马 M3,用来上班通勤\r\n先说说本人概况吧,坐标新一线城市,年龄快 30 岁了,正在做程序员,之前没有买过车\r\n\r\n购买理由:\r\n1.圆自己一个性能车的梦想\r\n2.未来都是电车天下了,再买到纯燃油性能车比较困难了\r\n3.外观比较低调(相对于保时捷 911 来说还是低调的多)\r\n4.5 座车未来也能兼顾一定家用性\r\n5.以后相亲过程中提高些成功率???\r\n\r\n再说说担忧:\r\n1.平常代步上下班被同事或者领导看到,会不会显得太高调\r\n2.家用型如何,没有拥有过车,对空间没啥概念", "content_rendered": "最近想打算入手一辆宝马 M3,用来上班通勤<br />先说说本人概况吧,坐标新一线城市,年龄快 30 岁了,正在做程序员,之前没有买过车<br /><br />购买理由:<br />1.圆自己一个性能车的梦想<br />2.未来都是电车天下了,再买到纯燃油性能车比较困难了<br />3.外观比较低调(相对于保时捷 911 来说还是低调的多)<br />4.5 座车未来也能兼顾一定家用性<br />5.以后相亲过程中提高些成功率???<br /><br />再说说担忧:<br />1.平常代步上下班被同事或者领导看到,会不会显得太高调<br />2.家用型如何,没有拥有过车,对空间没啥概念", "last_modified": 1686789417, "replies": 88, "id": 948843}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 205097, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3833, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 550434, "username": "PrtScScrLk", "url": "https://www.v2ex.com/u/PrtScScrLk", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/5504/132a/550434_mini.png?m=1652410913", "avatar_normal": "https://cdn.v2ex.com/avatar/5504/132a/550434_normal.png?m=1652410913", "avatar_large": "https://cdn.v2ex.com/avatar/5504/132a/550434_large.png?m=1652410913", "avatar_xlarge": "https://cdn.v2ex.com/avatar/5504/132a/550434_xlarge.png?m=1652410913", "created": 1625798176, "last_modified": 1652410913}, "last_reply_by": "zhq566", "last_touched": 1686798391, "title": "预约了一次提前还贷。", "url": "https://www.v2ex.com/t/948858", "created": 1686791843, "deleted": 0, "content": "19 年年初背上的贷款，101 万，利率 4.95 ，还款差不多 25 万了，本金只减少 5 万不到点，本金基本上每个月只减少 1000+，全部都是利息，生活在恐惧当中，当初爹妈不懂，听说等额本息月供少，就给我背了这个，这玩意儿利息是真的吃人，喝血。还说他们有钱还，回头就是我一个人承担了所有房贷。当初去贷款的时候，啥也不懂，埋头工作，请假被爸妈叫去背的房贷，殊不知这是噩梦的开始。一开始工资就 3000 出头，房贷得爸妈一直补贴，后面工资上来了，一个人承担，基本上就是一直给银行打工的状态。月薪过万了，但是实际上去掉月供也就是普普通通的水平。\r\n\r\n到现在的第一次提前还贷，不多，5 个月，选的缩短期限，预约还款已经排队到了十月份，但好歹能还钱了，能少利息了。\r\n\r\n这中间无数次争吵，我跟我爸妈说这房子我不要了，我们把老房子卖了去填平房贷。你们两住新房去，他们不肯。好像给我买房就是他们的荣誉一样，但是这带给我的是无尽的痛苦，完全不敢辞职，辞职就是断供，爹妈两个人收入加起来一个月 4000 多，房贷只能我去扛。\r\n\r\n终于第一次提前还贷了，以后多攒钱，一次次提前还贷就会好起来。\r\n\r\n人生如果能重来，这房贷是断然不敢背的，住桥洞，日子也比这过得好。", "content_rendered": "<p>19 年年初背上的贷款，101 万，利率 4.95 ，还款差不多 25 万了，本金只减少 5 万不到点，本金基本上每个月只减少 1000+，全部都是利息，生活在恐惧当中，当初爹妈不懂，听说等额本息月供少，就给我背了这个，这玩意儿利息是真的吃人，喝血。还说他们有钱还，回头就是我一个人承担了所有房贷。当初去贷款的时候，啥也不懂，埋头工作，请假被爸妈叫去背的房贷，殊不知这是噩梦的开始。一开始工资就 3000 出头，房贷得爸妈一直补贴，后面工资上来了，一个人承担，基本上就是一直给银行打工的状态。月薪过万了，但是实际上去掉月供也就是普普通通的水平。</p>\n<p>到现在的第一次提前还贷，不多，5 个月，选的缩短期限，预约还款已经排队到了十月份，但好歹能还钱了，能少利息了。</p>\n<p>这中间无数次争吵，我跟我爸妈说这房子我不要了，我们把老房子卖了去填平房贷。你们两住新房去，他们不肯。好像给我买房就是他们的荣誉一样，但是这带给我的是无尽的痛苦，完全不敢辞职，辞职就是断供，爹妈两个人收入加起来一个月 4000 多，房贷只能我去扛。</p>\n<p>终于第一次提前还贷了，以后多攒钱，一次次提前还贷就会好起来。</p>\n<p>人生如果能重来，这房贷是断然不敢背的，住桥洞，日子也比这过得好。</p>\n", "last_modified": 1686791843, "replies": 74, "id": 948858}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/f749/09ac/430_large.png?m=1347578950", "name": "icloud", "avatar_normal": "https://cdn.v2ex.com/navatar/f749/09ac/430_normal.png?m=1347578950", "title": "iCloud", "url": "https://www.v2ex.com/go/icloud", "topics": 1144, "footer": null, "header": "Store contacts, calendars, photos, music, books, apps and more in the cloud and access them on all your devices.", "title_alternative": "iCloud", "avatar_mini": "https://cdn.v2ex.com/navatar/f749/09ac/430_mini.png?m=1347578950", "stars": 219, "aliases": [], "root": false, "id": 430, "parent_node_name": "apple"}, "member": {"id": 553998, "username": "xxxteddy", "url": "https://www.v2ex.com/u/xxxteddy", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/b469/81a0/553998_mini.png?m=1686716820", "avatar_normal": "https://cdn.v2ex.com/avatar/b469/81a0/553998_normal.png?m=1686716820", "avatar_large": "https://cdn.v2ex.com/avatar/b469/81a0/553998_large.png?m=1686716820", "created": 1629549631, "last_modified": 1686716820}, "last_reply_by": "rickll", "last_touched": 1686795562, "title": "云上贵州 iCloud 高级数据保护靠谱吗？", "url": "https://www.v2ex.com/t/948629", "created": 1686716831, "deleted": 0, "content": "苹果全家桶+icloud 重度用户，看了下面的文章有点担心隐私问题，求专业意见，有必要转到美区服务器吗？\r\n\r\nhttps://14th.day/posts/%E6%B5%85%E8%B0%88icloud-%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BF%9D%E6%8A%A4/", "content_rendered": "苹果全家桶+icloud 重度用户，看了下面的文章有点担心隐私问题，求专业意见，有必要转到美区服务器吗？<br /><br />https://14th.day/posts/%E6%B5%85%E8%B0%88icloud-%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BF%9D%E6%8A%A4/", "last_modified": 1686717044, "replies": 72, "id": 948629}]