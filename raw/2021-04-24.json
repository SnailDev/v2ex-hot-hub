[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/57ae/ee35/229_large.png?m=1448883313", "name": "en", "avatar_normal": "https://cdn.v2ex.com/navatar/57ae/ee35/229_normal.png?m=1448883313", "title": "English", "url": "https://www.v2ex.com/go/en", "topics": 149, "footer": "", "header": "英语学习及使用问题讨论。", "title_alternative": "English", "avatar_mini": "https://cdn.v2ex.com/navatar/57ae/ee35/229_mini.png?m=1448883313", "stars": 172, "aliases": [], "root": false, "id": 229, "parent_node_name": ""}, "member": {"username": "limoumou", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/bd3c/4823/513794_mini.png?m=1608097588", "bio": "", "url": "https://www.v2ex.com/u/limoumou", "tagline": "", "twitter": null, "created": 1603250923, "avatar_large": "https://cdn.v2ex.com/avatar/bd3c/4823/513794_mini.png?m=1608097588", "avatar_mini": "https://cdn.v2ex.com/avatar/bd3c/4823/513794_mini.png?m=1608097588", "location": "", "btc": null, "id": 513794}, "last_reply_by": "S179276SP", "last_touched": 1619125915, "title": "程序员日常英文水平怎么提高？ Java 别再读“渣蛙”了！", "url": "https://www.v2ex.com/t/772621", "created": 1619141887, "content": "我司程序员通常会遇到一些尴尬的场景，比如 java 读“渣蛙”“扎我”、jpg 读“勾披计”……包括 C++、image 等等这些发音总会打破程序员的专业性。\r\n\r\n所以我们制作了一系列的程序员英文发音视频来纠正他们，感兴趣的程序员朋友们可以一起来跟我们的海归小姐姐学习下。\r\n\r\n视频戳这里： https://www.zentao.net/redirect-index-18864.html", "content_rendered": "<p>我司程序员通常会遇到一些尴尬的场景，比如 java 读“渣蛙”“扎我”、jpg 读“勾披计”……包括 C++、image 等等这些发音总会打破程序员的专业性。</p>\n<p>所以我们制作了一系列的程序员英文发音视频来纠正他们，感兴趣的程序员朋友们可以一起来跟我们的海归小姐姐学习下。</p>\n<p>视频戳这里： <a href=\"https://www.zentao.net/redirect-index-18864.html\" rel=\"nofollow\">https://www.zentao.net/redirect-index-18864.html</a></p>\n", "last_modified": 1619154215, "replies": 120, "id": 772621}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1615111825", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1615111825", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 14627, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1615111825", "stars": 1790, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"username": "INFP", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/94542ffb6adf8e2cc18be6dcd0d9e3dc?s=24&d=retro", "bio": null, "url": "https://www.v2ex.com/u/INFP", "tagline": null, "twitter": null, "created": 1617372047, "avatar_large": "https://cdn.v2ex.com/gravatar/94542ffb6adf8e2cc18be6dcd0d9e3dc?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/94542ffb6adf8e2cc18be6dcd0d9e3dc?s=24&d=retro", "location": null, "btc": null, "id": 540908}, "last_reply_by": "serverABCD", "last_touched": 1619209042, "title": "苹果 marketing chief 表示不打算整合 iPad 和 MacBook", "url": "https://www.v2ex.com/t/772612", "created": 1619139850, "content": "不让给链接，原文是 macrumors 网站上的。\r\n\r\n\"There's two conflicting stories people like to tell about the iPad and Mac,\" says Joz, as he starts on a clarification that will lead him at one point to apologise for his passion. \"On the one hand, people say that they are in conflict with each other. That somebody has to decide whether they want a Mac, or they want an iPad.\r\n\r\n\"Or people say that we're merging them into one: that there's really this grand conspiracy we have, to eliminate the two categories and make them one. And the reality is neither is true. We're quite proud of the fact that we work really, really hard to create the best products in their respective category.\"\r\n\r\n第二段大概意思：“有人说苹果在把 ipad 和 macbook 整合成一个产品，取消两种产品然后变成一种产品，这是一个坊间非常流行的猜测。事实是这不是真的，我们可以非常自豪地讲：我们目前在非常努力地去让不同的产品在各自的领域上变得最好”\r\n\r\n\r\n没了没了，m1 给 ipad pro 就是让 ipad pro 变成更牛逼的 ipad pro 而不是变成一个 mac 。我的 2018 ipad pro 估计能再战五年了，m1 mba 也再战五年吧 lol 。", "content_rendered": "<p>不让给链接，原文是 macrumors 网站上的。</p>\n<p>\"There's two conflicting stories people like to tell about the iPad and Mac,\" says Joz, as he starts on a clarification that will lead him at one point to apologise for his passion. \"On the one hand, people say that they are in conflict with each other. That somebody has to decide whether they want a Mac, or they want an iPad.</p>\n<p>\"Or people say that we're merging them into one: that there's really this grand conspiracy we have, to eliminate the two categories and make them one. And the reality is neither is true. We're quite proud of the fact that we work really, really hard to create the best products in their respective category.\"</p>\n<p>第二段大概意思：“有人说苹果在把 ipad 和 macbook 整合成一个产品，取消两种产品然后变成一种产品，这是一个坊间非常流行的猜测。事实是这不是真的，我们可以非常自豪地讲：我们目前在非常努力地去让不同的产品在各自的领域上变得最好”</p>\n<p>没了没了，m1 给 ipad pro 就是让 ipad pro 变成更牛逼的 ipad pro 而不是变成一个 mac 。我的 2018 ipad pro 估计能再战五年了，m1 mba 也再战五年吧 lol 。</p>\n", "last_modified": 1619140021, "replies": 73, "id": 772612}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1618915518", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1618915518", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 44268, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1618915518", "stars": 7354, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"username": "Renco", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/8530/7718/402540_mini.png?m=1593570831", "bio": "", "url": "https://www.v2ex.com/u/Renco", "tagline": "", "twitter": "", "created": 1555480728, "avatar_large": "https://cdn.v2ex.com/avatar/8530/7718/402540_mini.png?m=1593570831", "avatar_mini": "https://cdn.v2ex.com/avatar/8530/7718/402540_mini.png?m=1593570831", "location": "", "btc": "", "id": 402540}, "last_reply_by": "risky", "last_touched": 1619204114, "title": "数据库设计太拉跨被喷了。", "url": "https://www.v2ex.com/t/772712", "created": 1619158754, "content": "发现都是些智障问题，总结一下。\r\n\r\n- 表内创建人字段和更新人字段，只存了 name，没有存人的 Id 。当时想着是应该只关心是谁做的操作，所以没有加入 id 的关联关系。但是实际上在表设计中有关联关系但是不存关联信息的数据干脆就不存，要存就都存。\r\n\r\n- 关联表的索引关系一定要明确，该做约束的约束。该设置必输的设置必输。\r\n\r\n- 部分在代码中或者项目里比较高频的字段，表设计时最好加_info 。\r\n\r\n- 英文尽量要合理 比如创建人不应该是 create_name 合理的应该是 creator_name，这块当时设计的时候想的是 creator_name，但是为了和创建时间和更新时间对应就统一变成了  create_name 和 lst_name 。\r\n\r\n目前统计下来应该都是类似的问题。我数据库设计确实拉跨，可能是因为之前做的东西过度松散，对于数据库设计基本都是能用就行，关联表的约束关系可能都没有做全，全靠代码来做。还有很多细节上的问题。其实每次开发都是很快很简单，但是表设计真的让我头大。", "content_rendered": "<p>发现都是些智障问题，总结一下。</p>\n<ul>\n<li>\n<p>表内创建人字段和更新人字段，只存了 name，没有存人的 Id 。当时想着是应该只关心是谁做的操作，所以没有加入 id 的关联关系。但是实际上在表设计中有关联关系但是不存关联信息的数据干脆就不存，要存就都存。</p>\n</li>\n<li>\n<p>关联表的索引关系一定要明确，该做约束的约束。该设置必输的设置必输。</p>\n</li>\n<li>\n<p>部分在代码中或者项目里比较高频的字段，表设计时最好加_info 。</p>\n</li>\n<li>\n<p>英文尽量要合理 比如创建人不应该是 create_name 合理的应该是 creator_name，这块当时设计的时候想的是 creator_name，但是为了和创建时间和更新时间对应就统一变成了  create_name 和 lst_name 。</p>\n</li>\n</ul>\n<p>目前统计下来应该都是类似的问题。我数据库设计确实拉跨，可能是因为之前做的东西过度松散，对于数据库设计基本都是能用就行，关联表的约束关系可能都没有做全，全靠代码来做。还有很多细节上的问题。其实每次开发都是很快很简单，但是表设计真的让我头大。</p>\n", "last_modified": 1619158754, "replies": 63, "id": 772712}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/4607/2631/1075_large.png?m=1605337857", "name": "ps5", "avatar_normal": "https://cdn.v2ex.com/navatar/4607/2631/1075_normal.png?m=1605337857", "title": "PlayStation 5", "url": "https://www.v2ex.com/go/ps5", "topics": 19, "footer": "", "header": "", "title_alternative": "PlayStation 5", "avatar_mini": "https://cdn.v2ex.com/navatar/4607/2631/1075_mini.png?m=1605337857", "stars": 89, "aliases": [], "root": false, "id": 1075, "parent_node_name": "consoles"}, "member": {"username": "aspriny", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/b788/045b/304887_mini.png?m=1571735277", "bio": "", "url": "https://www.v2ex.com/u/aspriny", "tagline": "", "twitter": "", "created": 1522431617, "avatar_large": "https://cdn.v2ex.com/avatar/b788/045b/304887_mini.png?m=1571735277", "avatar_mini": "https://cdn.v2ex.com/avatar/b788/045b/304887_mini.png?m=1571735277", "location": "", "btc": "", "id": 304887}, "last_reply_by": "archknight", "last_touched": 1619181129, "title": "官宣，国行来了！", "url": "https://www.v2ex.com/t/772651", "created": 1619145282, "content": "![image.png]( https://i.loli.net/2021/04/23/sDgIPp8JMnbAYOj.png)", "content_rendered": "<p><img alt=\"image.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.loli.net/2021/04/23/sDgIPp8JMnbAYOj.png\"/></p>\n", "last_modified": 1619145282, "replies": 52, "id": 772651}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1618915518", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1618915518", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 44268, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1618915518", "stars": 7354, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"username": "karatsuba", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/f53d/1ea5/516315_mini.png?m=1605084682", "bio": null, "url": "https://www.v2ex.com/u/karatsuba", "tagline": null, "twitter": null, "created": 1604656296, "avatar_large": "https://cdn.v2ex.com/avatar/f53d/1ea5/516315_mini.png?m=1605084682", "avatar_mini": "https://cdn.v2ex.com/avatar/f53d/1ea5/516315_mini.png?m=1605084682", "location": null, "btc": null, "id": 516315}, "last_reply_by": "myBatis", "last_touched": 1619211834, "title": "怎么避免怯场，或者是说提高自己的沟通技巧", "url": "https://www.v2ex.com/t/772652", "created": 1619145405, "content": "自己属于不熟或者人多就容易怯场，从小到大就属于游戏宅，内心世界很丰富，但是人多就容易大脑宕机，也是很容易脸红\r\n平时业务需求沟通和迭代评审之类的场景也是\r\n\r\n\r\n或者是大哥大姐们有什么读书分享会或者讲故事群或者活动拉拉小弟", "content_rendered": "<p>自己属于不熟或者人多就容易怯场，从小到大就属于游戏宅，内心世界很丰富，但是人多就容易大脑宕机，也是很容易脸红\n平时业务需求沟通和迭代评审之类的场景也是</p>\n<p>或者是大哥大姐们有什么读书分享会或者讲故事群或者活动拉拉小弟</p>\n", "last_modified": 1619145405, "replies": 52, "id": 772652}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1618915518", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1618915518", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 44268, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1618915518", "stars": 7354, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"username": "forsigner", "website": "http://forsigner.com", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/1f58/4098/159198_mini.png?m=1455692741", "bio": "", "url": "https://www.v2ex.com/u/forsigner", "tagline": "Find the bug of the world.", "twitter": "", "created": 1455692599, "avatar_large": "https://cdn.v2ex.com/avatar/1f58/4098/159198_mini.png?m=1455692741", "avatar_mini": "https://cdn.v2ex.com/avatar/1f58/4098/159198_mini.png?m=1455692741", "location": "珠海", "btc": "", "id": 159198}, "last_reply_by": "ShareManT", "last_touched": 1619192118, "title": "Fower: 一个可在 Vue 和 React 方便使用的 CSS in JS 库", "url": "https://www.v2ex.com/t/772656", "created": 1619145637, "content": "今天给大家介绍一个我断断续续花了半年开发的 CSS 项目： [Fower]( https://github.com/forsigner/fower).\r\n\r\n## Fower 是什么？\r\n\r\nFower 是一个让你高效开发 UI 的样式工具库，目标是让你写 CSS 不再痛苦。Fower 的核心特点是原子化(Atomic/utility-first)、类型安全(Type Safe)、CSS in JS，它非常注重开发体验，让你快速且开心的开发界面。\r\n\r\nFower 是框架无关的，你可以在 React 、Vue 、React native 、小程序等任何 JavaScript 项目中使用。\r\n\r\n## 项目背景\r\n\r\n一年前，我所在的团队同时在开发 Web 、React native 、小程序项目。在这三类项目中，我们使用了各不相同的样式方案：\r\n\r\n- 在 Web 项目中，我们使用的是 Styed-component ；\r\n- 在 React native 项目中，我们使用 React native 自带的 `StyleSheet.create`；\r\n- 在小程序项目中，我们使用 Taro 开发，样式方案是 Sass;\r\n\r\n三种样式的方案写法各不相同，导致我们编写样式时特别痛苦：\r\n\r\n- 开发体验差，开发同样的界面，却要不同的写法，需要不断切换习惯和思维\r\n- 工具链太广太复杂，Styled-component 、Sass 、StyleSheet.create...\r\n- 开发效率低下，重复代码特别多\r\n- CSS 天生缺点多，可维护性差\r\n\r\n后面，我发现了 [Tailwindcss]( https://tailwindcss.com/)，一个 utility 优先(utility-first) 的 CSS 框架，在我的推动下，我们团队开始在 Web 项目中使用 Tailwindcss 。一段时间后，我们发现开发体验很不错，开发效率也很高，特别适合在我们这种需要高度定制界面的项目使用。可惜的是，Tailwindcss 无法直接在 React native 、小程序等非 Web 项目使用。\r\n\r\n我们团队的成员都喜欢 Tailwindcss 这种样式写法。所以我创建了 [Fower]( https://github.com/forsigner/fower)，希望能统一了所有项目的样式编写方式。\r\n\r\n和 Tailwindcss 类似，我们也使用了 utility-first 的理念，但有 Fower 又有点不同，Fower 使用 Atomic style props 的方式编写样式，代码如下：\r\n\r\n```html\r\n<div toCenterY p-10 w-260 rounded-10 shadow>\r\n  <img circle-48 src=\"/img/jobs.jpg\" />\r\n  <div ml-10>\r\n    <div textXL fontBold>Steve Jobs</div>\r\n    <span gray800>Co-founder of Apple Inc.</span>\r\n  </div>\r\n</div>\r\n```\r\n\r\n## 核心理念\r\n\r\nFower 是 opinionated 的，我们基于以下理念创建了它：\r\n\r\n- **utility-first**，这种方式让我们更快速地编写样式，和其他 \"utility-first\" CSS 框架不同的是，Fower 使用 \"Atomic style prop\" 编写样式\r\n\r\n- **Type safe**，我们团队是 TypeScript 重度使用用户，Type safe 带来的智能提示，让我们几乎很少翻阅文档，并且在编写代码时不依赖任何编辑插件就有准确的自动补全\r\n\r\n- **Framework-agnostic**，这是我们创建 Fower 的最主要原因之一，Fower 可以让你用一致的写法在 React 、Vue 、React Native 编写样式\r\n\r\n- **CSS in JS**，我们讨厌在独立的 CSS 文件中编写 CSS，纯 CSS 有非常多缺点，如：无法访问 JS 变量；容易产生样式冲突；容易产生死代码... 我们喜欢使用 JS (CSS in JS) 编写样式，它更适合在组件化时代中使用。实际上，Fower 不仅仅是 CSS in JS，它也是 CSS in HTML 。\r\n\r\n## 一些很酷的特性\r\n\r\nFower 有非常多的特性，如原子类、响应式、伪类、主题、设计系统、CSS in JS...，我觉这些是 Fower 的基础功能，并不是特色功能。\r\n\r\nFower 有几个我认为很酷的功能：\r\n\r\n### 1. Layout Toolkit\r\n\r\n如果要我在 Fower 中选一个最喜欢的特性，那毫无疑问是 [Layout Toolkitd]( https://fower.vercel.app/zh-cn/docs/fower-layout-introduction)。\r\n\r\nFower 提供了一个强大的基于 Flexdiv 的布局工具，通过调整布局的方向(Direction)和对齐(Alignment)，可以实现大部分的布局，使布局工作更轻松。\r\n\r\n相比传统的 flex 布局，Fower 的布局更加抽象精简，Fower 的布局抽象为 `toCenter`、`toCenterX`、`toCenterY`、`toLeft`、`toTop`、`toRight`、`toBottom`、`toBetween`、`toEvenly`、`toAround` 十种原子对齐方式，使用时你可以忘记传统 flex 布局中的主轴（ main axis ）和交叉轴（ cross axis ）的概念，你只需要有方向感即可。\r\n\r\n使用方式如下：\r\n\r\n```html\r\n<div toCenter bgGray100 square-200>\r\n  <div square-60 bgAmber400 rounded-8></div>\r\n  <div square-80 bgBlue400 rounded-8></div>\r\n</div>\r\n```\r\n\r\n更详细的使用方法请看文档： [Layout Toolkitd]( https://fower.vercel.app/zh-cn/docs/fower-layout-introduction)。\r\n\r\n### 2. Predictable style\r\n\r\n另外一个我个人很喜欢的特性的是 Predictable style 。在传统的 CSS 中，我认为样式是不可预测的。为什么这么说？这里举个例子。\r\n\r\n我们有如下的 CSS:\r\n\r\n```css\r\n.red {\r\n  color: red;\r\n}\r\n.blue {\r\n  color: blue;\r\n}\r\n```\r\n\r\n有如下的的 html, css 类名分别为 \"red blue\" 和 \"blue red\"：\r\n\r\n```html\r\n<div>\r\n  <span className=\"red blue\">Fower</span>\r\n  <span className=\"blue red\">Fower</span>\r\n</div>\r\n```\r\n\r\n你能确定文字的颜色吗？不好确定，如果我们不翻看上面的 CSS 代码，你无法直接判断文字的颜色，只能通过开发者工具调试得知。\r\n\r\n在 Flower 中，你可以轻易判断下面文字的颜色：\r\n\r\n```html\r\n<div>\r\n  <span red400 blue400> text will be color blue400 </span>\r\n  <span blue400 red400> text will be color red400 </span>\r\n</div>\r\n```\r\n\r\n这有什么用呢？除了让我们更容易判断样式结果，我觉的最有用的是：当我们抽象出一个可复用的组件时，比如一个通用的 `Button`, 那调用方可以轻易的覆盖组件默认样式，比如这样类似的代码 `<Button bgRed300></Button>` 可以安全的设置背景色。\r\n\r\n更详细的使用方法请看文档：[Predictable style]( https://fower.vercel.app/zh-cn/docs/predictable-style)。\r\n\r\n### 3. 颜色助手\r\n\r\nFower 的另一个很酷的功能是颜色助手，您可以使用一些后缀来处理颜色。\r\n\r\n使用 `--D{0-100}` 这样的后缀来加深一个颜色:\r\n\r\n```html\r\n<div toEvenly toCenterY>\r\n  <div red300>normal</div>\r\n  <div red300--D40>darken</div>\r\n  <div color=\"#fff--D40\">darken</div>\r\n  <div bgRed300 square-84></div>\r\n  <div bgRed300--D40 square-84></div>\r\n  <div border borderRed300 square-84></div>\r\n  <div border borderRed300--D40 square-84></div>\r\n</div>\r\n```\r\n\r\n使用 `--L{0-100}` 后缀来变浅一个颜色：\r\n\r\n```html\r\n<div toEvenly>\r\n  <div red500>normal</div>\r\n  <div red500--T40>transparentize</div>\r\n  <div color=\"#000--T40\">transparentize</div>\r\n  <div bgRed500 square-84></div>\r\n  <div bgRed500--T40 square-84></div>\r\n  <div border borderRed300 square-84></div>\r\n  <div border borderRed300--T40 square-84></div>\r\n</div>\r\n```\r\n\r\n使用 `--T{0-100}` 后缀来增加颜色的透明度：\r\n\r\n```html\r\n<div toEvenly>\r\n  <div red500>normal</div>\r\n  <div red500--T40>transparentize</div>\r\n  <div color=\"#000--T40\">transparentize</div>\r\n  <div bgRed500 square-84></div>\r\n  <div bgRed500--T40 square-84></div>\r\n  <div border borderRed300 square-84></div>\r\n  <div border borderRed300--T40 square-84></div>\r\n</div>\r\n```\r\n\r\n使用 `--O{0-100}` 后缀来增加颜色的不透明度：\r\n\r\n```html\r\n<div toEvenly>\r\n  <div color=\"rgba(0,0,0,0.4)\">0.4</div>\r\n  <div color=\"rgba(0,0,0,0.4)--O40\">Opacify to 0.6</div>\r\n  <div bg=\"rgba(0,0,0,0.4)\" square-84></div>\r\n  <div bg=\"rgba(0,0,0,0.4)--O40\" square-84></div>\r\n  <div border borderColor=\"rgba(0,0,0,0.4)\" square-84></div>\r\n  <div border borderColor=\"rgba(0,0,0,0.4)--O40\" square-84></div>\r\n</div>\r\n```\r\n\r\n更详细的使用方法请看文档：[Color helper]( https://fower.vercel.app/zh-cn/docs/color-helper)。\r\n\r\n### 4. 可组合的后缀\r\n\r\nFower 提供一些后缀来快速处理样式, 如: `--hover`, `--focus`, `--sm`, `--dark`, `--T{amount}`...\r\n\r\nFlower 的另一个很酷的功能是可组合的后缀。 您可以组合一些后缀，并且顺序是**任意**的:\r\n\r\n```html\r\n<div square-84 bgOrange300 bgOrange400--D10--hover--sm></div>\r\n```\r\n\r\n下面的代码和上面是等价的：\r\n\r\n```html\r\n<div square-84 bgOrange300 bgOrange400--hover--sm--D10></div>\r\n```\r\n\r\n## 最后\r\n\r\n如果你想了解更多关于 Fower 的信息，你可以访问项目网站和官方文档。\r\n\r\n- 项目地址： ( https://github.com/forsigner/fower)[https://github.com/forsigner/fower]\r\n- 项目文档：( https://fower.vercel.app)[https://fower.vercel.app]", "content_rendered": "<p>今天给大家介绍一个我断断续续花了半年开发的 CSS 项目： <a href=\"https://github.com/forsigner/fower\" rel=\"nofollow\">Fower</a>.</p>\n<h2>Fower 是什么？</h2>\n<p>Fower 是一个让你高效开发 UI 的样式工具库，目标是让你写 CSS 不再痛苦。Fower 的核心特点是原子化(Atomic/utility-first)、类型安全(Type Safe)、CSS in JS，它非常注重开发体验，让你快速且开心的开发界面。</p>\n<p>Fower 是框架无关的，你可以在 React 、Vue 、React native 、小程序等任何 JavaScript 项目中使用。</p>\n<h2>项目背景</h2>\n<p>一年前，我所在的团队同时在开发 Web 、React native 、小程序项目。在这三类项目中，我们使用了各不相同的样式方案：</p>\n<ul>\n<li>在 Web 项目中，我们使用的是 Styed-component ；</li>\n<li>在 React native 项目中，我们使用 React native 自带的 <code>StyleSheet.create</code>；</li>\n<li>在小程序项目中，我们使用 Taro 开发，样式方案是 Sass;</li>\n</ul>\n<p>三种样式的方案写法各不相同，导致我们编写样式时特别痛苦：</p>\n<ul>\n<li>开发体验差，开发同样的界面，却要不同的写法，需要不断切换习惯和思维</li>\n<li>工具链太广太复杂，Styled-component 、Sass 、StyleSheet.create...</li>\n<li>开发效率低下，重复代码特别多</li>\n<li>CSS 天生缺点多，可维护性差</li>\n</ul>\n<p>后面，我发现了 <a href=\"https://tailwindcss.com/\" rel=\"nofollow\">Tailwindcss</a>，一个 utility 优先(utility-first) 的 CSS 框架，在我的推动下，我们团队开始在 Web 项目中使用 Tailwindcss 。一段时间后，我们发现开发体验很不错，开发效率也很高，特别适合在我们这种需要高度定制界面的项目使用。可惜的是，Tailwindcss 无法直接在 React native 、小程序等非 Web 项目使用。</p>\n<p>我们团队的成员都喜欢 Tailwindcss 这种样式写法。所以我创建了 <a href=\"https://github.com/forsigner/fower\" rel=\"nofollow\">Fower</a>，希望能统一了所有项目的样式编写方式。</p>\n<p>和 Tailwindcss 类似，我们也使用了 utility-first 的理念，但有 Fower 又有点不同，Fower 使用 Atomic style props 的方式编写样式，代码如下：</p>\n<pre><code class=\"language-html\">&lt;div toCenterY p-10 w-260 rounded-10 shadow&gt;\n  &lt;img circle-48 src=\"/img/jobs.jpg\" /&gt;\n  &lt;div ml-10&gt;\n    &lt;div textXL fontBold&gt;Steve Jobs&lt;/div&gt;\n    &lt;span gray800&gt;Co-founder of Apple Inc.&lt;/span&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h2>核心理念</h2>\n<p>Fower 是 opinionated 的，我们基于以下理念创建了它：</p>\n<ul>\n<li>\n<p><strong>utility-first</strong>，这种方式让我们更快速地编写样式，和其他 \"utility-first\" CSS 框架不同的是，Fower 使用 \"Atomic style prop\" 编写样式</p>\n</li>\n<li>\n<p><strong>Type safe</strong>，我们团队是 TypeScript 重度使用用户，Type safe 带来的智能提示，让我们几乎很少翻阅文档，并且在编写代码时不依赖任何编辑插件就有准确的自动补全</p>\n</li>\n<li>\n<p><strong>Framework-agnostic</strong>，这是我们创建 Fower 的最主要原因之一，Fower 可以让你用一致的写法在 React 、Vue 、React Native 编写样式</p>\n</li>\n<li>\n<p><strong>CSS in JS</strong>，我们讨厌在独立的 CSS 文件中编写 CSS，纯 CSS 有非常多缺点，如：无法访问 JS 变量；容易产生样式冲突；容易产生死代码... 我们喜欢使用 JS (CSS in JS) 编写样式，它更适合在组件化时代中使用。实际上，Fower 不仅仅是 CSS in JS，它也是 CSS in HTML 。</p>\n</li>\n</ul>\n<h2>一些很酷的特性</h2>\n<p>Fower 有非常多的特性，如原子类、响应式、伪类、主题、设计系统、CSS in JS...，我觉这些是 Fower 的基础功能，并不是特色功能。</p>\n<p>Fower 有几个我认为很酷的功能：</p>\n<h3>1. Layout Toolkit</h3>\n<p>如果要我在 Fower 中选一个最喜欢的特性，那毫无疑问是 <a href=\"https://fower.vercel.app/zh-cn/docs/fower-layout-introduction\" rel=\"nofollow\">Layout Toolkitd</a>。</p>\n<p>Fower 提供了一个强大的基于 Flexdiv 的布局工具，通过调整布局的方向(Direction)和对齐(Alignment)，可以实现大部分的布局，使布局工作更轻松。</p>\n<p>相比传统的 flex 布局，Fower 的布局更加抽象精简，Fower 的布局抽象为 <code>toCenter</code>、<code>toCenterX</code>、<code>toCenterY</code>、<code>toLeft</code>、<code>toTop</code>、<code>toRight</code>、<code>toBottom</code>、<code>toBetween</code>、<code>toEvenly</code>、<code>toAround</code> 十种原子对齐方式，使用时你可以忘记传统 flex 布局中的主轴（ main axis ）和交叉轴（ cross axis ）的概念，你只需要有方向感即可。</p>\n<p>使用方式如下：</p>\n<pre><code class=\"language-html\">&lt;div toCenter bgGray100 square-200&gt;\n  &lt;div square-60 bgAmber400 rounded-8&gt;&lt;/div&gt;\n  &lt;div square-80 bgBlue400 rounded-8&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>更详细的使用方法请看文档： <a href=\"https://fower.vercel.app/zh-cn/docs/fower-layout-introduction\" rel=\"nofollow\">Layout Toolkitd</a>。</p>\n<h3>2. Predictable style</h3>\n<p>另外一个我个人很喜欢的特性的是 Predictable style 。在传统的 CSS 中，我认为样式是不可预测的。为什么这么说？这里举个例子。</p>\n<p>我们有如下的 CSS:</p>\n<pre><code class=\"language-css\">.red {\n  color: red;\n}\n.blue {\n  color: blue;\n}\n</code></pre>\n<p>有如下的的 html, css 类名分别为 \"red blue\" 和 \"blue red\"：</p>\n<pre><code class=\"language-html\">&lt;div&gt;\n  &lt;span className=\"red blue\"&gt;Fower&lt;/span&gt;\n  &lt;span className=\"blue red\"&gt;Fower&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n<p>你能确定文字的颜色吗？不好确定，如果我们不翻看上面的 CSS 代码，你无法直接判断文字的颜色，只能通过开发者工具调试得知。</p>\n<p>在 Flower 中，你可以轻易判断下面文字的颜色：</p>\n<pre><code class=\"language-html\">&lt;div&gt;\n  &lt;span red400 blue400&gt; text will be color blue400 &lt;/span&gt;\n  &lt;span blue400 red400&gt; text will be color red400 &lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n<p>这有什么用呢？除了让我们更容易判断样式结果，我觉的最有用的是：当我们抽象出一个可复用的组件时，比如一个通用的 <code>Button</code>, 那调用方可以轻易的覆盖组件默认样式，比如这样类似的代码 <code>&lt;Button bgRed300&gt;&lt;/Button&gt;</code> 可以安全的设置背景色。</p>\n<p>更详细的使用方法请看文档：<a href=\"https://fower.vercel.app/zh-cn/docs/predictable-style\" rel=\"nofollow\">Predictable style</a>。</p>\n<h3>3. 颜色助手</h3>\n<p>Fower 的另一个很酷的功能是颜色助手，您可以使用一些后缀来处理颜色。</p>\n<p>使用 <code>--D{0-100}</code> 这样的后缀来加深一个颜色:</p>\n<pre><code class=\"language-html\">&lt;div toEvenly toCenterY&gt;\n  &lt;div red300&gt;normal&lt;/div&gt;\n  &lt;div red300--D40&gt;darken&lt;/div&gt;\n  &lt;div color=\"#fff--D40\"&gt;darken&lt;/div&gt;\n  &lt;div bgRed300 square-84&gt;&lt;/div&gt;\n  &lt;div bgRed300--D40 square-84&gt;&lt;/div&gt;\n  &lt;div border borderRed300 square-84&gt;&lt;/div&gt;\n  &lt;div border borderRed300--D40 square-84&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>使用 <code>--L{0-100}</code> 后缀来变浅一个颜色：</p>\n<pre><code class=\"language-html\">&lt;div toEvenly&gt;\n  &lt;div red500&gt;normal&lt;/div&gt;\n  &lt;div red500--T40&gt;transparentize&lt;/div&gt;\n  &lt;div color=\"#000--T40\"&gt;transparentize&lt;/div&gt;\n  &lt;div bgRed500 square-84&gt;&lt;/div&gt;\n  &lt;div bgRed500--T40 square-84&gt;&lt;/div&gt;\n  &lt;div border borderRed300 square-84&gt;&lt;/div&gt;\n  &lt;div border borderRed300--T40 square-84&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>使用 <code>--T{0-100}</code> 后缀来增加颜色的透明度：</p>\n<pre><code class=\"language-html\">&lt;div toEvenly&gt;\n  &lt;div red500&gt;normal&lt;/div&gt;\n  &lt;div red500--T40&gt;transparentize&lt;/div&gt;\n  &lt;div color=\"#000--T40\"&gt;transparentize&lt;/div&gt;\n  &lt;div bgRed500 square-84&gt;&lt;/div&gt;\n  &lt;div bgRed500--T40 square-84&gt;&lt;/div&gt;\n  &lt;div border borderRed300 square-84&gt;&lt;/div&gt;\n  &lt;div border borderRed300--T40 square-84&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>使用 <code>--O{0-100}</code> 后缀来增加颜色的不透明度：</p>\n<pre><code class=\"language-html\">&lt;div toEvenly&gt;\n  &lt;div color=\"rgba(0,0,0,0.4)\"&gt;0.4&lt;/div&gt;\n  &lt;div color=\"rgba(0,0,0,0.4)--O40\"&gt;Opacify to 0.6&lt;/div&gt;\n  &lt;div bg=\"rgba(0,0,0,0.4)\" square-84&gt;&lt;/div&gt;\n  &lt;div bg=\"rgba(0,0,0,0.4)--O40\" square-84&gt;&lt;/div&gt;\n  &lt;div border borderColor=\"rgba(0,0,0,0.4)\" square-84&gt;&lt;/div&gt;\n  &lt;div border borderColor=\"rgba(0,0,0,0.4)--O40\" square-84&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>更详细的使用方法请看文档：<a href=\"https://fower.vercel.app/zh-cn/docs/color-helper\" rel=\"nofollow\">Color helper</a>。</p>\n<h3>4. 可组合的后缀</h3>\n<p>Fower 提供一些后缀来快速处理样式, 如: <code>--hover</code>, <code>--focus</code>, <code>--sm</code>, <code>--dark</code>, <code>--T{amount}</code>...</p>\n<p>Flower 的另一个很酷的功能是可组合的后缀。 您可以组合一些后缀，并且顺序是<strong>任意</strong>的:</p>\n<pre><code class=\"language-html\">&lt;div square-84 bgOrange300 bgOrange400--D10--hover--sm&gt;&lt;/div&gt;\n</code></pre>\n<p>下面的代码和上面是等价的：</p>\n<pre><code class=\"language-html\">&lt;div square-84 bgOrange300 bgOrange400--hover--sm--D10&gt;&lt;/div&gt;\n</code></pre>\n<h2>最后</h2>\n<p>如果你想了解更多关于 Fower 的信息，你可以访问项目网站和官方文档。</p>\n<ul>\n<li>项目地址： ( <a href=\"https://github.com/forsigner/fower)%5Bhttps://github.com/forsigner/fower%5D\" rel=\"nofollow\">https://github.com/forsigner/fower)[https://github.com/forsigner/fower]</a></li>\n<li>项目文档：( <a href=\"https://fower.vercel.app)%5Bhttps://fower.vercel.app%5D\" rel=\"nofollow\">https://fower.vercel.app)[https://fower.vercel.app]</a></li>\n</ul>\n", "last_modified": 1619145637, "replies": 50, "id": 772656}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1618811339", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1618811339", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 171764, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1618811339", "stars": 3211, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"username": "zjvbqla", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/5cc7/759d/305333_mini.png?m=1613721293", "bio": "", "url": "https://www.v2ex.com/u/zjvbqla", "tagline": "", "twitter": null, "created": 1522647311, "avatar_large": "https://cdn.v2ex.com/avatar/5cc7/759d/305333_mini.png?m=1613721293", "avatar_mini": "https://cdn.v2ex.com/avatar/5cc7/759d/305333_mini.png?m=1613721293", "location": "", "btc": null, "id": 305333}, "last_reply_by": "izoabr", "last_touched": 1619192331, "title": "迫于对显示器不懂，看了会帖子瞎买了一款 4k 显示器，求指点", "url": "https://www.v2ex.com/t/772601", "created": 1619133172, "content": "没啥需求，就是黑果用，不打游戏，平时剪剪视频。\r\n\r\n刚刚入手了 https://item.jd.com/100017466386.html\r\n\r\n懂得人说下这种便宜的有啥缺点？\r\n\r\n显卡是 rx590", "content_rendered": "<p>没啥需求，就是黑果用，不打游戏，平时剪剪视频。</p>\n<p>刚刚入手了 <a href=\"https://item.jd.com/100017466386.html\" rel=\"nofollow\">https://item.jd.com/100017466386.html</a></p>\n<p>懂得人说下这种便宜的有啥缺点？</p>\n<p>显卡是 rx590</p>\n", "last_modified": 1619133172, "replies": 46, "id": 772601}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1618811339", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1618811339", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 171764, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1618811339", "stars": 3211, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"username": "ly90907", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/65a2/6675/279535_mini.png?m=1617673306", "bio": "", "url": "https://www.v2ex.com/u/ly90907", "tagline": "", "twitter": null, "created": 1515036248, "avatar_large": "https://cdn.v2ex.com/avatar/65a2/6675/279535_mini.png?m=1617673306", "avatar_mini": "https://cdn.v2ex.com/avatar/65a2/6675/279535_mini.png?m=1617673306", "location": "", "btc": null, "id": 279535}, "last_reply_by": "rus4db", "last_touched": 1619179237, "title": "请问这个直线的方程怎么求", "url": "https://www.v2ex.com/t/772618", "created": 1619141456, "content": "![]( https://i.imgur.com/ntO2HZS.png)\r\n如图所示，我有 n 个离散的点，一根直线从上方掉落，直到落到“最高”的两个点，（其实不一定是最高，就是这根直线无法再下落，重力势能最小了），然后根据这两个点求得直线方程。\r\n\r\n想问下各位大帅逼 /大漂亮用什么算法，或者这个算法的关键词我自己搜索也行，十分感谢。", "content_rendered": "<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/ntO2HZS.png\"/>\n如图所示，我有 n 个离散的点，一根直线从上方掉落，直到落到“最高”的两个点，（其实不一定是最高，就是这根直线无法再下落，重力势能最小了），然后根据这两个点求得直线方程。</p>\n<p>想问下各位大帅逼 /大漂亮用什么算法，或者这个算法的关键词我自己搜索也行，十分感谢。</p>\n", "last_modified": 1619141456, "replies": 45, "id": 772618}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/883e/881b/1027_large.png?m=1583128570", "name": "flutter", "avatar_normal": "https://cdn.v2ex.com/navatar/883e/881b/1027_normal.png?m=1583128570", "title": "Flutter", "url": "https://www.v2ex.com/go/flutter", "topics": 170, "footer": "", "header": "来自 <a href=\"/go/google\">Google</a> 的同时支持 <a href=\"/go/android\">Android</a> 和 <a href=\"/go/idev\">iOS</a> 的移动应用 UI 框架。", "title_alternative": "Flutter", "avatar_mini": "https://cdn.v2ex.com/navatar/883e/881b/1027_mini.png?m=1583128570", "stars": 321, "aliases": [], "root": false, "id": 1027, "parent_node_name": "google"}, "member": {"username": "James369", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/8b64ecd4b42da39f0025e467ce8497d6?s=24&d=retro", "bio": null, "url": "https://www.v2ex.com/u/James369", "tagline": null, "twitter": null, "created": 1602036009, "avatar_large": "https://cdn.v2ex.com/gravatar/8b64ecd4b42da39f0025e467ce8497d6?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/8b64ecd4b42da39f0025e467ce8497d6?s=24&d=retro", "location": null, "btc": null, "id": 511352}, "last_reply_by": "tonyaiken", "last_touched": 1619188576, "title": "异步中 await 和 then 的区别，哪个更好", "url": "https://www.v2ex.com/t/772610", "created": 1619138914, "content": "await 虽然简洁。因为 await 需要等待返回才继续向下执行，如果是较耗时的操作就得等待。\r\n\r\n\r\n方式一：\r\nawait u = login();\r\ngetUserInfo(u);\r\notherTask();    // 必须等待 login()返回。\r\n\r\n\r\n方式二：\r\nlogin().then((u) {\r\n  getUserInfo(u);\r\n);\r\notherTask();    //可以并行\r\n\r\n我觉得 then 更加符合逻辑。", "content_rendered": "await 虽然简洁。因为 await 需要等待返回才继续向下执行，如果是较耗时的操作就得等待。<br /><br /><br />方式一：<br />await u = login();<br />getUserInfo(u);<br />otherTask();    // 必须等待 login()返回。<br /><br /><br />方式二：<br />login().then((u) {<br />  getUserInfo(u);<br />);<br />otherTask();    //可以并行<br /><br />我觉得 then 更加符合逻辑。", "last_modified": 1619138914, "replies": 44, "id": 772610}]