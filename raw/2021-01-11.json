[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1610122510", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1610122510", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 42665, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1610122510", "stars": 7185, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"username": "tinycold", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/1f9a/3e5b/220057_mini.png?m=1602562972", "bio": "", "url": "https://www.v2ex.com/u/tinycold", "tagline": "Nothing", "twitter": "", "created": 1489066562, "avatar_large": "https://cdn.v2ex.com/avatar/1f9a/3e5b/220057_mini.png?m=1602562972", "avatar_mini": "https://cdn.v2ex.com/avatar/1f9a/3e5b/220057_mini.png?m=1602562972", "location": "", "btc": "", "id": 220057}, "last_reply_by": "zone10", "last_touched": 1610335009, "title": "我也知道为了讨个生活不容易，但拼多多的兄弟们也不用这么没下限吧", "url": "https://www.v2ex.com/t/743666", "created": 1610320551, "content": "https://m.weibo.cn/detail/4591917712809183\r\n\r\n看完我是真的气，每月 300-380 小时，真是要钱不要命呀。你随便换个华为头条阿里之内的，性价比也没这么低呀。（哎不对，为什么… …）\r\n\r\n哎", "content_rendered": "<a target=\"_blank\" href=\"https://m.weibo.cn/detail/4591917712809183\" rel=\"nofollow noopener\">https://m.weibo.cn/detail/4591917712809183</a><br /><br />看完我是真的气，每月 300-380 小时，真是要钱不要命呀。你随便换个华为头条阿里之内的，性价比也没这么低呀。（哎不对，为什么… …）<br /><br />哎", "last_modified": 1610320551, "replies": 169, "id": 743666}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/b789/2fb3/937_large.png?m=1584298330", "name": "zhihu", "avatar_normal": "https://cdn.v2ex.com/navatar/b789/2fb3/937_normal.png?m=1584298330", "title": "知乎", "url": "https://www.v2ex.com/go/zhihu", "topics": 211, "footer": "", "header": "知乎创建于 2010 年，是一个用户产生内容的问答社区", "title_alternative": "Zhihu", "avatar_mini": "https://cdn.v2ex.com/navatar/b789/2fb3/937_mini.png?m=1584298330", "stars": 70, "aliases": [], "root": false, "id": 937, "parent_node_name": "internet"}, "member": {"username": "tomari", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/be64/8b5e/369158_mini.png?m=1605256006", "bio": "", "url": "https://www.v2ex.com/u/tomari", "tagline": "", "twitter": null, "created": 1544358291, "avatar_large": "https://cdn.v2ex.com/avatar/be64/8b5e/369158_mini.png?m=1605256006", "avatar_mini": "https://cdn.v2ex.com/avatar/be64/8b5e/369158_mini.png?m=1605256006", "location": "", "btc": null, "id": 369158}, "last_reply_by": "TmacV2", "last_touched": 1610333787, "title": "中国南方到底穿什么裤子能暖和？", "url": "https://www.v2ex.com/t/743600", "created": 1610281085, "content": "冷死我了", "content_rendered": "冷死我了", "last_modified": 1610284280, "replies": 81, "id": 743600}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/677e/0972/824_large.png?m=1588961795", "name": "router", "avatar_normal": "https://cdn.v2ex.com/navatar/677e/0972/824_normal.png?m=1588961795", "title": "路由器", "url": "https://www.v2ex.com/go/router", "topics": 990, "footer": "", "header": "数据包流动的乐趣", "title_alternative": "Router", "avatar_mini": "https://cdn.v2ex.com/navatar/677e/0972/824_mini.png?m=1588961795", "stars": 1223, "aliases": [], "root": false, "id": 824, "parent_node_name": "geek"}, "member": {"username": "yuhuan66666", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/gravatar/6840671dff0dd2c7676f1d1e4b2cb046?s=24&d=retro", "bio": "", "url": "https://www.v2ex.com/u/yuhuan66666", "tagline": "", "twitter": "", "created": 1434904292, "avatar_large": "https://cdn.v2ex.com/gravatar/6840671dff0dd2c7676f1d1e4b2cb046?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/6840671dff0dd2c7676f1d1e4b2cb046?s=24&d=retro", "location": "", "btc": "", "id": 123399}, "last_reply_by": "cpsony", "last_touched": 1610333491, "title": "家里联网设备有点多 ，峰值时能达到 13 个左右，求推荐路由", "url": "https://www.v2ex.com/t/743514", "created": 1610255150, "content": "家里时千兆 现在用的时 TP 的 AC1900\r\n\r\n偶尔会发生 断网的问题 把路由拔了 再插上 就好了\r\n\r\n还有当一台设备进行下载的时候 其他所有设备都没法上网了\r\n\r\n考虑是不是需要换个 wifi6 的路由\r\n\r\n看到了一个 AX6000 不知道咋样\r\n\r\n现在的 AC1900 偶尔的断网 很好奇是啥引起的 TP 的问题吗？", "content_rendered": "<p>家里时千兆 现在用的时 TP 的 AC1900</p>\n<p>偶尔会发生 断网的问题 把路由拔了 再插上 就好了</p>\n<p>还有当一台设备进行下载的时候 其他所有设备都没法上网了</p>\n<p>考虑是不是需要换个 wifi6 的路由</p>\n<p>看到了一个 AX6000 不知道咋样</p>\n<p>现在的 AC1900 偶尔的断网 很好奇是啥引起的 TP 的问题吗？</p>\n", "last_modified": 1610255484, "replies": 79, "id": 743514}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/44f6/83a8/62_large.png?m=1588705541", "name": "php", "avatar_normal": "https://cdn.v2ex.com/navatar/44f6/83a8/62_normal.png?m=1588705541", "title": "PHP", "url": "https://www.v2ex.com/go/php", "topics": 4273, "footer": "", "header": "PHP is a widely-used general-purpose scripting language that is especially suited for Web development and can be embedded into HTML.", "title_alternative": "PHP", "avatar_mini": "https://cdn.v2ex.com/navatar/44f6/83a8/62_mini.png?m=1588705541", "stars": 2566, "aliases": [], "root": false, "id": 62, "parent_node_name": "programming"}, "member": {"username": "crazjieb", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/5ae12d1d9e1a4dfb7941fd115d35aa34?s=24&d=retro", "bio": null, "url": "https://www.v2ex.com/u/crazjieb", "tagline": null, "twitter": null, "created": 1565343810, "avatar_large": "https://cdn.v2ex.com/gravatar/5ae12d1d9e1a4dfb7941fd115d35aa34?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/5ae12d1d9e1a4dfb7941fd115d35aa34?s=24&d=retro", "location": null, "btc": null, "id": 434830}, "last_reply_by": "6orz", "last_touched": 1610332929, "title": "PHP 程序员们, 团结起来, 我们去学点新东西吧", "url": "https://www.v2ex.com/t/743513", "created": 1610255127, "content": "https://medium.com/swlh/one-year-from-php-dying-this-decade-32e2b7a79507\r\n\r\n大周末又看了一篇唱衰 PHP 的, 我个人写过一两个月 Golang, 真的感觉特别好. 而且我也开始慢慢觉得 PHP 走向没落了, 而且在不久的将来必然会走向衰亡. 所以, 我在此以个人名义呼吁, PHP 程序员们, 要么掌握一些前端知识转全栈, 要么去学学 Golang, 学学 Python, 不考虑语言问题, 就是为了正常职业发展, 也要多掌握几门语言的. 为此, 我建了一个群, 有想一起学习 Golang 的童鞋, 可以我微信: bXV5ZXdlaQ==, 我们一起每天进步一点点. \r\n\r\nPHP is the present. Not the future.", "content_rendered": "<p><a href=\"https://medium.com/swlh/one-year-from-php-dying-this-decade-32e2b7a79507\" rel=\"nofollow\">https://medium.com/swlh/one-year-from-php-dying-this-decade-32e2b7a79507</a></p>\n<p>大周末又看了一篇唱衰 PHP 的, 我个人写过一两个月 Golang, 真的感觉特别好. 而且我也开始慢慢觉得 PHP 走向没落了, 而且在不久的将来必然会走向衰亡. 所以, 我在此以个人名义呼吁, PHP 程序员们, 要么掌握一些前端知识转全栈, 要么去学学 Golang, 学学 Python, 不考虑语言问题, 就是为了正常职业发展, 也要多掌握几门语言的. 为此, 我建了一个群, 有想一起学习 Golang 的童鞋, 可以我微信: bXV5ZXdlaQ==, 我们一起每天进步一点点. </p>\n<p>PHP is the present. Not the future.</p>\n", "last_modified": 1610255127, "replies": 70, "id": 743513}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1594743680", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1594743680", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 166932, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1594743680", "stars": 3131, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"username": "kisshere", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/6157/5077/66454_mini.png?m=1404827302", "bio": "", "url": "https://www.v2ex.com/u/kisshere", "tagline": "", "twitter": null, "created": 1403956444, "avatar_large": "https://cdn.v2ex.com/avatar/6157/5077/66454_mini.png?m=1404827302", "avatar_mini": "https://cdn.v2ex.com/avatar/6157/5077/66454_mini.png?m=1404827302", "location": "", "btc": null, "id": 66454}, "last_reply_by": "xx6412223", "last_touched": 1610333822, "title": "离婚后孩子给对方，我有探视权，以后儿子长大了会亲我吗？", "url": "https://www.v2ex.com/t/743674", "created": 1610326028, "content": "我给抚养费，孩子才两岁，归女方，有探视权利，以后我到底在他的眼中是他的亲人还是客人还是陌生人？", "content_rendered": "<p>我给抚养费，孩子才两岁，归女方，有探视权利，以后我到底在他的眼中是他的亲人还是客人还是陌生人？</p>\n", "last_modified": 1610326028, "replies": 64, "id": 743674}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/b789/2fb3/937_large.png?m=1584298330", "name": "zhihu", "avatar_normal": "https://cdn.v2ex.com/navatar/b789/2fb3/937_normal.png?m=1584298330", "title": "知乎", "url": "https://www.v2ex.com/go/zhihu", "topics": 211, "footer": "", "header": "知乎创建于 2010 年，是一个用户产生内容的问答社区", "title_alternative": "Zhihu", "avatar_mini": "https://cdn.v2ex.com/navatar/b789/2fb3/937_mini.png?m=1584298330", "stars": 70, "aliases": [], "root": false, "id": 937, "parent_node_name": "internet"}, "member": {"username": "yunsszhao", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/38dba175de01b4911391ce69e59a0fec?s=24&d=retro", "bio": null, "url": "https://www.v2ex.com/u/yunsszhao", "tagline": null, "twitter": null, "created": 1609761364, "avatar_large": "https://cdn.v2ex.com/gravatar/38dba175de01b4911391ce69e59a0fec?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/38dba175de01b4911391ce69e59a0fec?s=24&d=retro", "location": null, "btc": null, "id": 526828}, "last_reply_by": "xutao881", "last_touched": 1610333108, "title": "怎么才能学会去爱别人?", "url": "https://www.v2ex.com/t/743517", "created": 1610255700, "content": "小时候，莫名其妙挨了很多打，这种情况一直持续到高中毕业，可能是读大学慢慢远离了家吧，之后总觉得自己的对感情方面的东西很抵触，对自己的家庭近几年才慢慢缓和过来，但是人一旦到了一定的年纪，就觉得很多东西不会改变，导致了我对其他人就感觉怪怪的，不喜欢和别人接触，别人和我接触我也不喜欢过多的去交流，对于家庭，亲戚朋友也是，不知道怎么去关心他们，可能是很多事情我觉得亲戚之间好虚伪，很多时候就是他们不给我打电话，我就不会给他们打电话，所以我想问问怎么才能改变我这种情况。怎么才能去关心爱别人。", "content_rendered": "小时候，莫名其妙挨了很多打，这种情况一直持续到高中毕业，可能是读大学慢慢远离了家吧，之后总觉得自己的对感情方面的东西很抵触，对自己的家庭近几年才慢慢缓和过来，但是人一旦到了一定的年纪，就觉得很多东西不会改变，导致了我对其他人就感觉怪怪的，不喜欢和别人接触，别人和我接触我也不喜欢过多的去交流，对于家庭，亲戚朋友也是，不知道怎么去关心他们，可能是很多事情我觉得亲戚之间好虚伪，很多时候就是他们不给我打电话，我就不会给他们打电话，所以我想问问怎么才能改变我这种情况。怎么才能去关心爱别人。", "last_modified": 1610265773, "replies": 56, "id": 743517}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/d3d9/4468/10_large.png?m=1608685909", "name": "mbp", "avatar_normal": "https://cdn.v2ex.com/navatar/d3d9/4468/10_normal.png?m=1608685909", "title": "MacBook Pro", "url": "https://www.v2ex.com/go/mbp", "topics": 6736, "footer": "", "header": "State-of-the-art processors. All-new graphics. Breakthrough high-speed I/O. Three very big leaps forward.", "title_alternative": "MacBook Pro", "avatar_mini": "https://cdn.v2ex.com/navatar/d3d9/4468/10_mini.png?m=1608685909", "stars": 2801, "aliases": [], "root": false, "id": 10, "parent_node_name": "apple"}, "member": {"username": "otakustay", "website": "http://otakustay.com", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/1bdb/e1fb/38153_mini.png?m=1479356013", "bio": "", "url": "https://www.v2ex.com/u/otakustay", "tagline": "", "twitter": "", "created": 1366971251, "avatar_large": "https://cdn.v2ex.com/avatar/1bdb/e1fb/38153_mini.png?m=1479356013", "avatar_mini": "https://cdn.v2ex.com/avatar/1bdb/e1fb/38153_mini.png?m=1479356013", "location": "上海", "btc": "", "id": 38153}, "last_reply_by": "aibangjuxin", "last_touched": 1610332762, "title": "M1 到手了，感觉非常惊喜", "url": "https://www.v2ex.com/t/743507", "created": 1610253319, "content": "我要瞎 JB 吹一顿\r\n\r\n因为京东有 16G 的现货，就下手要了一台，到手后 brew 安装命令行的基本能用，cask 没敢让 brew 管理都去官网下了个版本用，除了 docker 不太好用以外，其它需要的工具都很正常，vscode 暂时用 intel 版本，稍微有些慢但懒得切换到预览版了\r\n\r\nM1 最让我惊喜的是几个传闻已久的特性，实际体验比看评测更意外。\r\n\r\n### 续航\r\n\r\n设想这样的一个情况，现在电脑显示有 75%的电量，半小时后要出门，这半小时需要继续使用电脑，而电源在 5 米外的另一个房间，应该怎么办？\r\n\r\n这种情况对我来说几乎就是日常，工位在 4 楼，刚在 2 楼开完一个会，一小时后要去 1 楼参加另一个会。可以选择走 2 层楼回到工位去充电，也可以选择在阳光更明媚还有一堆饮料的休息区度过 1 小时\r\n\r\n然而之前的 16 寸顶配 MBP 我是万万不敢不回工位的，因为我非常清晰地知道这货顶不过第二场会议。而现在的 M1，当我看到还有 75%的电量的时候，可以毫无顾忌地在休息区安心地呆着\r\n\r\n这让我的工作状态变得更加持续，会议上正好在调某段代码，可以走不到 10 米到休息区坐下立刻继续\r\n\r\n### 开屏速度\r\n\r\n秒开屏的体验带来的是体验上的完全不同\r\n\r\n放在以前的 MBP 上，过程大概是这样的：走到工位前 - 开盖 - 坐下 - 手放到键盘上 - 这时屏幕刚点亮 - 等 1-2 秒 Apple Watch 解锁 - 开始工作\r\n\r\n而在秒开屏的加持下，这个流程变成了：走到工位前 - 开盖 - 坐下 （过程中屏幕点亮，Apple Watch 完成解锁） - 开始工作\r\n\r\n重要的不是那 1-2 秒的解锁等待，而是整个动作的连续性带来的感观上的顺畅性，似乎我的动作完全不会被外力打断，按着正常人的思路持续行动就行\r\n\r\n我认为这才是一个工具应该做到的本份，它是工具就不应该让人去适应它\r\n\r\n### 外接屏幕速度\r\n\r\n在 Intel 时代的 Mac，如果外接一个 5K 的显示器，然后过了一夜后从合盖状态打开，这个时间基本上是够离开座位去接一杯水的。但 M1 不同，它基本也可以做到站着开盖，坐到位子上的时候进入桌面\r\n\r\n而且对于频繁有会议和讨论的场景，做到即拔即走，即插即用的状态，会让人觉得外接的显示器也是 Mac 屏幕的一部分，不会再有之前“我就 15 分钟时间不如不接显示器了”这样的想法\r\n\r\n------\r\n\r\n于是我发现，M1 带给我的最大的感受就是体验的连续性和流畅性，我的工作流不会再被一个工具打断，不用再去改变自己的动作习性去适应工具了\r\n\r\n而且我发现，苹果在用户体验上，往往做的就是一些细微的工作来让工具更好地配合人\r\n\r\n比如 MagSafe 充电器，被大部分人骂得不如一块废铁，但对我来说，它就是一个让人不被打断的好工具\r\n\r\n在没有 MagSafe 的情况下，我的流程无非下面 3 种之一：\r\n\r\n1. 回到座位上 - 坐下 - 拿起充电线 - 找准接口 - 插入 - 放下手机 - 干活\r\n2. 回到座位上 - 看准无线充电器 - 放到充电器上 - 过 1 秒确认已经开始充电 - 干活\r\n3. 回到座位上 - 不充电 - 到一定时候看下电量 - 判断是否需要充电来支持后续外出 - 插充电线充电 - 干活\r\n\r\n无论哪一种形式，“干活”这件事都会在某一时刻被打断，视线必须聚集在手机和充电器（线）之间，做完某一个流程后再回到代码里去\r\n\r\n而有了 MagSafe，我的流程就是这样的：座下 - 盯着代码 - 手拿着手机往 MagSafe 的大致位置试探一下 - 听到 MagSafe 吸住的声音 - 放放开回到键盘\r\n\r\n经过短暂几天的训练，我发现自己可以做到拿手机去试探 MagSafe 的同时脑子在阅读代码并思考后面怎么写，在手机放下后可以直接进入编码创作的阶段\r\n\r\n很经常地，从会议室之类的地方出来，大脑里是带着某一段代码的思考的，MagSafe 这种运作方式支持了我全过程都保持思考着代码，注意力不被分散。传统的充电方式虽然可能只有 10 秒不到的打断时间，但这种注意力的打断、分散，如同进程切换一般产生不可预期的损耗，给人的感觉是非常的不愉悦的\r\n\r\n再如同 Mac 上能收到验证码短信、Apple Watch 可以解锁 1Password，这一系列的功能其实都在做一件事，让人的注意力不用转移到另一件事务上去，因此我确实很喜欢苹果生态带来的这种体验", "content_rendered": "<p>我要瞎 JB 吹一顿</p>\n<p>因为京东有 16G 的现货，就下手要了一台，到手后 brew 安装命令行的基本能用，cask 没敢让 brew 管理都去官网下了个版本用，除了 docker 不太好用以外，其它需要的工具都很正常，vscode 暂时用 intel 版本，稍微有些慢但懒得切换到预览版了</p>\n<p>M1 最让我惊喜的是几个传闻已久的特性，实际体验比看评测更意外。</p>\n<h3>续航</h3>\n<p>设想这样的一个情况，现在电脑显示有 75%的电量，半小时后要出门，这半小时需要继续使用电脑，而电源在 5 米外的另一个房间，应该怎么办？</p>\n<p>这种情况对我来说几乎就是日常，工位在 4 楼，刚在 2 楼开完一个会，一小时后要去 1 楼参加另一个会。可以选择走 2 层楼回到工位去充电，也可以选择在阳光更明媚还有一堆饮料的休息区度过 1 小时</p>\n<p>然而之前的 16 寸顶配 MBP 我是万万不敢不回工位的，因为我非常清晰地知道这货顶不过第二场会议。而现在的 M1，当我看到还有 75%的电量的时候，可以毫无顾忌地在休息区安心地呆着</p>\n<p>这让我的工作状态变得更加持续，会议上正好在调某段代码，可以走不到 10 米到休息区坐下立刻继续</p>\n<h3>开屏速度</h3>\n<p>秒开屏的体验带来的是体验上的完全不同</p>\n<p>放在以前的 MBP 上，过程大概是这样的：走到工位前 - 开盖 - 坐下 - 手放到键盘上 - 这时屏幕刚点亮 - 等 1-2 秒 Apple Watch 解锁 - 开始工作</p>\n<p>而在秒开屏的加持下，这个流程变成了：走到工位前 - 开盖 - 坐下 （过程中屏幕点亮，Apple Watch 完成解锁） - 开始工作</p>\n<p>重要的不是那 1-2 秒的解锁等待，而是整个动作的连续性带来的感观上的顺畅性，似乎我的动作完全不会被外力打断，按着正常人的思路持续行动就行</p>\n<p>我认为这才是一个工具应该做到的本份，它是工具就不应该让人去适应它</p>\n<h3>外接屏幕速度</h3>\n<p>在 Intel 时代的 Mac，如果外接一个 5K 的显示器，然后过了一夜后从合盖状态打开，这个时间基本上是够离开座位去接一杯水的。但 M1 不同，它基本也可以做到站着开盖，坐到位子上的时候进入桌面</p>\n<p>而且对于频繁有会议和讨论的场景，做到即拔即走，即插即用的状态，会让人觉得外接的显示器也是 Mac 屏幕的一部分，不会再有之前“我就 15 分钟时间不如不接显示器了”这样的想法</p>\n<hr/>\n<p>于是我发现，M1 带给我的最大的感受就是体验的连续性和流畅性，我的工作流不会再被一个工具打断，不用再去改变自己的动作习性去适应工具了</p>\n<p>而且我发现，苹果在用户体验上，往往做的就是一些细微的工作来让工具更好地配合人</p>\n<p>比如 MagSafe 充电器，被大部分人骂得不如一块废铁，但对我来说，它就是一个让人不被打断的好工具</p>\n<p>在没有 MagSafe 的情况下，我的流程无非下面 3 种之一：</p>\n<ol>\n<li>回到座位上 - 坐下 - 拿起充电线 - 找准接口 - 插入 - 放下手机 - 干活</li>\n<li>回到座位上 - 看准无线充电器 - 放到充电器上 - 过 1 秒确认已经开始充电 - 干活</li>\n<li>回到座位上 - 不充电 - 到一定时候看下电量 - 判断是否需要充电来支持后续外出 - 插充电线充电 - 干活</li>\n</ol>\n<p>无论哪一种形式，“干活”这件事都会在某一时刻被打断，视线必须聚集在手机和充电器（线）之间，做完某一个流程后再回到代码里去</p>\n<p>而有了 MagSafe，我的流程就是这样的：座下 - 盯着代码 - 手拿着手机往 MagSafe 的大致位置试探一下 - 听到 MagSafe 吸住的声音 - 放放开回到键盘</p>\n<p>经过短暂几天的训练，我发现自己可以做到拿手机去试探 MagSafe 的同时脑子在阅读代码并思考后面怎么写，在手机放下后可以直接进入编码创作的阶段</p>\n<p>很经常地，从会议室之类的地方出来，大脑里是带着某一段代码的思考的，MagSafe 这种运作方式支持了我全过程都保持思考着代码，注意力不被分散。传统的充电方式虽然可能只有 10 秒不到的打断时间，但这种注意力的打断、分散，如同进程切换一般产生不可预期的损耗，给人的感觉是非常的不愉悦的</p>\n<p>再如同 Mac 上能收到验证码短信、Apple Watch 可以解锁 1Password，这一系列的功能其实都在做一件事，让人的注意力不用转移到另一件事务上去，因此我确实很喜欢苹果生态带来的这种体验</p>\n", "last_modified": 1610253319, "replies": 51, "id": 743507}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1610122510", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1610122510", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 42665, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1610122510", "stars": 7185, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"username": "frostcity", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/6f23/153f/77797_mini.png?m=1414399581", "bio": "", "url": "https://www.v2ex.com/u/frostcity", "tagline": "", "twitter": "", "created": 1413775453, "avatar_large": "https://cdn.v2ex.com/avatar/6f23/153f/77797_mini.png?m=1414399581", "avatar_mini": "https://cdn.v2ex.com/avatar/6f23/153f/77797_mini.png?m=1414399581", "location": "", "btc": "", "id": 77797}, "last_reply_by": "xuanbg", "last_touched": 1610333846, "title": "“因为其他行业普遍 996，所以互联网行业骂 996 就是矫情？”", "url": "https://www.v2ex.com/t/743705", "created": 1610330292, "content": "几乎每个相关帖子都会出现这种 nt 论点。\r\n你怎么不去类比黑砖窑？", "content_rendered": "<p>几乎每个相关帖子都会出现这种 nt 论点。\n你怎么不去类比黑砖窑？</p>\n", "last_modified": 1610330360, "replies": 47, "id": 743705}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/03af/dbd6/63_large.png?m=1596211530", "name": "java", "avatar_normal": "https://cdn.v2ex.com/navatar/03af/dbd6/63_normal.png?m=1596211530", "title": "Java", "url": "https://www.v2ex.com/go/java", "topics": 4123, "footer": "", "header": "The most popular programming language.", "title_alternative": "Java", "avatar_mini": "https://cdn.v2ex.com/navatar/03af/dbd6/63_mini.png?m=1596211530", "stars": 4284, "aliases": [], "root": false, "id": 63, "parent_node_name": "programming"}, "member": {"username": "CandyMuj", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/ee5d/b475/341731_mini.png?m=1557550656", "bio": null, "url": "https://www.v2ex.com/u/CandyMuj", "tagline": null, "twitter": null, "created": 1534401578, "avatar_large": "https://cdn.v2ex.com/avatar/ee5d/b475/341731_mini.png?m=1557550656", "avatar_mini": "https://cdn.v2ex.com/avatar/ee5d/b475/341731_mini.png?m=1557550656", "location": null, "btc": null, "id": 341731}, "last_reply_by": "qingluo", "last_touched": 1610332745, "title": "使用 Java +mysql+redis 实现一个简易的类似随机的数据获取算法，有哪些比较好的方案？目前我都有点怀疑需求是不是有问题了。", "url": "https://www.v2ex.com/t/743584", "created": 1610273113, "content": "# 说明\r\n\r\n&emsp;&emsp;公司的小项目，没有打算使用搜索引擎或大数据相关的技术。\r\n\r\n\r\n\r\n# 首先说一下产品的需求：\r\n\r\n&emsp;&emsp;目前有个视频列表查询，需实现每次启动 app 获取的第一页数据不同即可（如果不做处理，使用 mysql 每次获取数据的顺序都是一定的，则每个用户每次启动 app 获取的第一页数据都是一样的）；还需要保证在用户没有获取完所有的视频前不再获取之前已经获取过的视频。即以每个用户为单位，看过的视频不能再被查出来，除非数据库的数据都被这个用户获取过一遍。产品不允许有重复的视频在用户没有看完所有视频前再被查询出来，无论数据量是大还是小。\r\n\r\n\r\n\r\n\r\n# 举例说明\r\n## 假设\r\n​\t数据库总数据：10 条<br/>\r\n​\tid 为自增：1-10<br/>\r\n​\t每页查询：4 条<br/>\r\n​\t默认排序为 id 顺序自增\r\n\r\n## 当前方案\r\n\r\n* 启动 app 查询第一页数据的 id：1 2 3 4\r\n* redis 记录当前用户查询的最后一条数据的 id：userId:4 （最后一条记录 id ）\r\n* 重启 app 查询第一页数据的 id: 此时就限制数据 id > 4  即 5,6,7,8\r\n* redis 记录当前用户查询的最后一条数据的 id：userId:8\r\n* 重启 app 查询第一页数据的 id: 此时就限制数据 id > 8  即 8,9,10  还差一条才满足一页，因此从 1 开始取，最终返回的数据为 8,9,10,1\r\n* redis 记录当前用户查询的最后一条数据的 id：userId:1\r\n* ...\r\n\r\n\r\n\r\n> 如果保证每次返回的数据 id 是顺序自增的那么是没问题的，如果是倒序自增，也没问题，每次重启 app 取数据的时候 id>? 变为 id<? 即可。\r\n\r\n\r\n\r\n## 遇到的问题\r\n\r\n> 有一个特殊情况，管理员可以设置精选视频，可以把一些视频进行置顶，那么获取的数据就不是顺序或倒序自增的了，顺序就会乱。\r\n>\r\n> 而且还存在增删操作。\r\n\r\n* 顺序 id 为：1 2 3 4 5 6 7 8 9 10\r\n* 后台设置精选后的顺序变为：7 1 9 2 3 5 4 10 6 8\r\n* 如果再按照当前方案，就会出现问题：\r\n  * \t启动 app 查询第一页数据的 id：7 1 9 2\r\n  * \tredis 记录当前用户查询的最后一条数据的 id：userId:2\r\n  * 重启 app 查询第一页数据的 id：此时就限制数据 id > 4\r\n    * \t\t那么数据库的筛选后的排序及数据结果为：7 9 5 10 6 8\r\n    * \t\t返回的数据就变成了：7 9 5 10\r\n  * \tredis 记录当前用户查询的最后一条数据的 id：userId：10\r\n  * 重启 app 查询第一页数据 id：此时就限制数据 id > 10\r\n    * \t\t那么数据库的筛选后的排序及数据结果为：7 1 9 2 （因为>10 的数据没有，就从头开始取）\r\n  * \tredis 记录当前用户查询的最后一条数据的 id：userId:2\r\n  * ...\r\n\r\n> 问题也就出现了，第二次启动 app 查询的第一页数据 id7 和 9 这两条数据就和上一次启动 app 查询的数据重复了；并且 3 4 6 8 这些数据永远不会被查询出来。问题就是这样，未实现产品需求。 （数据没有全部查询过一遍，距上一次查询就出现了重复数据）\r\n>\r\n> 这种情况和数据量的大小没有较大关系（如果把自增的最大的一个 id 推荐到了第一页的最后一条，那么就永远只能查到前四条数据）。\r\n>\r\n> **还需要考虑管理员设置精选或者进行增删后的数据的实时性问题。设置精选和增删操作如果频繁有哪些影响。**\r\n\r\n\r\n\r\n## 产品提供的一个方案\r\n\r\n> 将每个用户看过的视频进行记录，然后在查询的时候进行剔除，如果数据不够一页就从头开始获取一次；这种方式就必不会出现未看完就重复的问题，但是有严重的性能问题。\r\n\r\n* 顺序 id 为：1 2 3 4 5 6 7 8 9 10\r\n* 第一次数据 id：1 2 3 4\r\n* redis 记录当前用户已看数据 id：userid:1,2,3,4\r\n* 第二次数据 id: not in(1,2,3,4)   查出 5,6,7,8\r\n* redis 记录当前用户已看数据 id：userid:1,2,3,4，5,6,7,8\r\n* 第三次数据 id：not in(1,2,3,4，5,6,7,8) 查出 9 10 1 2 （数据不够从头开始获取）\r\n* ...\r\n\r\n> 逻辑是没问题的，但是数据量少还好，如果数据量很大那么性能影响很严重。\r\n>\r\n> **小声 bb，产品告诉我，同时满足需求和性能不就是开发应该干的事嘛，我很想说想要性能和需求同时满足也得看需求是否合理吧。**\r\n>\r\n> 如果有 10w 用户并且有 10w 数据，在最极端的情况下，假设这 10w 用户有 99999 条数据都看过了，那么 redis 就会存储 10w\\*99999 的数据量，并且在查询 mysql 的时候语句就变成 not in(99999 个 id)，想想就恐怖，如果数据量更大呢？\r\n>\r\n> 但产品认为不要考虑这么多我们系统最多只有几千条数据，用户量可能会很多，但即使这样数据量也比较大 10w\\*几千 ，并且也没有这样设计系统的，不合理。\r\n\r\n\r\n<br/>\r\n\r\n&emsp;&emsp;不局限于目前已有的这些方案或技术栈（使用除 java+mysql+redis 以外的技术也可），只要能实现这个需求的目的就可以：以用户为单位，数据在没有全部查询过一次的情况下，不能出现重复数据。期间需考虑管理员可以在任意时刻，或很频繁的进行精选和增删操作。\r\n\r\n&emsp;&emsp;各位有没有什么好的想法，以及使用 java+mysql+redis 的技术栈能否实现，若不能实现，是否有其他实现方式？\r\n\r\n&emsp;&emsp;再提一句，这个产品实际上是个 Android 开发。\r\n\r\n&emsp;&emsp;帮忙出出主意吧，先谢谢各位了，最近已经被折磨的焦头烂额了！", "content_rendered": "<h1>说明</h1>\n<p>  公司的小项目，没有打算使用搜索引擎或大数据相关的技术。</p>\n<h1>首先说一下产品的需求：</h1>\n<p>  目前有个视频列表查询，需实现每次启动 app 获取的第一页数据不同即可（如果不做处理，使用 mysql 每次获取数据的顺序都是一定的，则每个用户每次启动 app 获取的第一页数据都是一样的）；还需要保证在用户没有获取完所有的视频前不再获取之前已经获取过的视频。即以每个用户为单位，看过的视频不能再被查出来，除非数据库的数据都被这个用户获取过一遍。产品不允许有重复的视频在用户没有看完所有视频前再被查询出来，无论数据量是大还是小。</p>\n<h1>举例说明</h1>\n<h2>假设</h2>\n<p>​\t数据库总数据：10 条<br/>\n​\tid 为自增：1-10<br/>\n​\t每页查询：4 条<br/>\n​\t默认排序为 id 顺序自增</p>\n<h2>当前方案</h2>\n<ul>\n<li>启动 app 查询第一页数据的 id：1 2 3 4</li>\n<li>redis 记录当前用户查询的最后一条数据的 id：userId:4 （最后一条记录 id ）</li>\n<li>重启 app 查询第一页数据的 id: 此时就限制数据 id &gt; 4  即 5,6,7,8</li>\n<li>redis 记录当前用户查询的最后一条数据的 id：userId:8</li>\n<li>重启 app 查询第一页数据的 id: 此时就限制数据 id &gt; 8  即 8,9,10  还差一条才满足一页，因此从 1 开始取，最终返回的数据为 8,9,10,1</li>\n<li>redis 记录当前用户查询的最后一条数据的 id：userId:1</li>\n<li>...</li>\n</ul>\n<blockquote>\n<p>如果保证每次返回的数据 id 是顺序自增的那么是没问题的，如果是倒序自增，也没问题，每次重启 app 取数据的时候 id&gt;? 变为 id&lt;? 即可。</p>\n</blockquote>\n<h2>遇到的问题</h2>\n<blockquote>\n<p>有一个特殊情况，管理员可以设置精选视频，可以把一些视频进行置顶，那么获取的数据就不是顺序或倒序自增的了，顺序就会乱。</p>\n<p>而且还存在增删操作。</p>\n</blockquote>\n<ul>\n<li>顺序 id 为：1 2 3 4 5 6 7 8 9 10</li>\n<li>后台设置精选后的顺序变为：7 1 9 2 3 5 4 10 6 8</li>\n<li>\n如果再按照当前方案，就会出现问题：<ul>\n<li>启动 app 查询第一页数据的 id：7 1 9 2</li>\n<li>redis 记录当前用户查询的最后一条数据的 id：userId:2</li>\n<li>\n重启 app 查询第一页数据的 id：此时就限制数据 id &gt; 4<ul>\n<li>\n<pre><code>  那么数据库的筛选后的排序及数据结果为：7 9 5 10 6 8\n</code></pre>\n</li>\n<li>\n<pre><code>  返回的数据就变成了：7 9 5 10\n</code></pre>\n</li>\n</ul>\n</li>\n<li>redis 记录当前用户查询的最后一条数据的 id：userId：10</li>\n<li>\n重启 app 查询第一页数据 id：此时就限制数据 id &gt; 10<ul>\n<li>\n<pre><code>  那么数据库的筛选后的排序及数据结果为：7 1 9 2 （因为&gt;10 的数据没有，就从头开始取）\n</code></pre>\n</li>\n</ul>\n</li>\n<li>redis 记录当前用户查询的最后一条数据的 id：userId:2</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>问题也就出现了，第二次启动 app 查询的第一页数据 id7 和 9 这两条数据就和上一次启动 app 查询的数据重复了；并且 3 4 6 8 这些数据永远不会被查询出来。问题就是这样，未实现产品需求。 （数据没有全部查询过一遍，距上一次查询就出现了重复数据）</p>\n<p>这种情况和数据量的大小没有较大关系（如果把自增的最大的一个 id 推荐到了第一页的最后一条，那么就永远只能查到前四条数据）。</p>\n<p><strong>还需要考虑管理员设置精选或者进行增删后的数据的实时性问题。设置精选和增删操作如果频繁有哪些影响。</strong></p>\n</blockquote>\n<h2>产品提供的一个方案</h2>\n<blockquote>\n<p>将每个用户看过的视频进行记录，然后在查询的时候进行剔除，如果数据不够一页就从头开始获取一次；这种方式就必不会出现未看完就重复的问题，但是有严重的性能问题。</p>\n</blockquote>\n<ul>\n<li>顺序 id 为：1 2 3 4 5 6 7 8 9 10</li>\n<li>第一次数据 id：1 2 3 4</li>\n<li>redis 记录当前用户已看数据 id：userid:1,2,3,4</li>\n<li>第二次数据 id: not in(1,2,3,4)   查出 5,6,7,8</li>\n<li>redis 记录当前用户已看数据 id：userid:1,2,3,4，5,6,7,8</li>\n<li>第三次数据 id：not in(1,2,3,4，5,6,7,8) 查出 9 10 1 2 （数据不够从头开始获取）</li>\n<li>...</li>\n</ul>\n<blockquote>\n<p>逻辑是没问题的，但是数据量少还好，如果数据量很大那么性能影响很严重。</p>\n<p><strong>小声 bb，产品告诉我，同时满足需求和性能不就是开发应该干的事嘛，我很想说想要性能和需求同时满足也得看需求是否合理吧。</strong></p>\n<p>如果有 10w 用户并且有 10w 数据，在最极端的情况下，假设这 10w 用户有 99999 条数据都看过了，那么 redis 就会存储 10w*99999 的数据量，并且在查询 mysql 的时候语句就变成 not in(99999 个 id)，想想就恐怖，如果数据量更大呢？</p>\n<p>但产品认为不要考虑这么多我们系统最多只有几千条数据，用户量可能会很多，但即使这样数据量也比较大 10w*几千 ，并且也没有这样设计系统的，不合理。</p>\n</blockquote>\n<br/>\n<p>  不局限于目前已有的这些方案或技术栈（使用除 java+mysql+redis 以外的技术也可），只要能实现这个需求的目的就可以：以用户为单位，数据在没有全部查询过一次的情况下，不能出现重复数据。期间需考虑管理员可以在任意时刻，或很频繁的进行精选和增删操作。</p>\n<p>  各位有没有什么好的想法，以及使用 java+mysql+redis 的技术栈能否实现，若不能实现，是否有其他实现方式？</p>\n<p>  再提一句，这个产品实际上是个 Android 开发。</p>\n<p>  帮忙出出主意吧，先谢谢各位了，最近已经被折磨的焦头烂额了！</p>\n", "last_modified": 1610273294, "replies": 41, "id": 743584}]