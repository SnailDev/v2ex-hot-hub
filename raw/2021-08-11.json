[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1622572533", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1622572533", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 175330, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1622572533", "stars": 3291, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"username": "shaozhuang0820", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/b0d4c88baf0ebdf9b724fcd6694082de?s=24&d=retro", "bio": null, "url": "https://www.v2ex.com/u/shaozhuang0820", "tagline": null, "twitter": null, "created": 1616743628, "avatar_large": "https://cdn.v2ex.com/gravatar/b0d4c88baf0ebdf9b724fcd6694082de?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/b0d4c88baf0ebdf9b724fcd6694082de?s=24&d=retro", "location": null, "btc": null, "id": 539815}, "last_reply_by": "tunzao", "last_touched": 1628646819, "title": "想做个专门给开发者用的搜索引擎，取个啥名好呢🤔", "url": "https://www.v2ex.com/t/794816", "created": 1628566098, "content": "如题，三大难题之一——命名，难倒了我。。。。。。", "content_rendered": "<p>如题，三大难题之一——命名，难倒了我。。。。。。</p>\n", "last_modified": 1628567381, "replies": 111, "id": 794816}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6512/bd43/11_large.png?m=1620106980", "name": "linux", "avatar_normal": "https://cdn.v2ex.com/navatar/6512/bd43/11_normal.png?m=1620106980", "title": "Linux", "url": "https://www.v2ex.com/go/linux", "topics": 6271, "footer": "", "header": "Linux is a Unix-like computer operating system assembled under the model of free and open source software development and distribution.", "title_alternative": "Linux", "avatar_mini": "https://cdn.v2ex.com/navatar/6512/bd43/11_mini.png?m=1620106980", "stars": 5579, "aliases": [], "root": false, "id": 11, "parent_node_name": "os"}, "member": {"username": "huangmingyou", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/8cca/c911/31517_mini.png?m=1612235130", "bio": null, "url": "https://www.v2ex.com/u/huangmingyou", "tagline": null, "twitter": null, "created": 1356850806, "avatar_large": "https://cdn.v2ex.com/avatar/8cca/c911/31517_mini.png?m=1612235130", "avatar_mini": "https://cdn.v2ex.com/avatar/8cca/c911/31517_mini.png?m=1612235130", "location": null, "btc": null, "id": 31517}, "last_reply_by": "huangmingyou", "last_touched": 1628629779, "title": "两次从 Linux 逃离到 os x 又逃回来的感受", "url": "https://www.v2ex.com/t/794788", "created": 1628562118, "content": "逃离到 os x 的主要原因是觉得苹果笔记本的屏幕细腻，次要原因是可以方便使用企业微信。\r\n\r\n硬件方面：\r\nmac book pro 的屏幕没的说，但是屏幕过于光滑反光很难受。键盘的按键反馈还是很清晰，就是键程过短，有点难受。再有就是没有实体的 F1-F2,ESC,对于 vim 用户来说，过于难受。后来把大小写切换映射成了 esc,但是又和 tab 键容易弄混。反正就是很别扭。\r\n\r\n软件方面：\r\n一些常用命令行工具的版本和 linux 系统不一样，使用上有点不习惯，例如 cp 命令的参数必须紧跟在 cp 命令后面。而不能放到一行的后面。\r\n\r\n终端软件用的系统默认的,也用过 terminal2 啥的，大概是这么一个名字。 但是因为要使用 tmux,没有 alt 键做快捷键，也是很麻烦。\r\n\r\n说到终端，linux 下，选中内容，然后鼠标中键或者 Ctrl+ins 键就能粘贴的功能，在 os x 上没有，只有终端勉强支持。\r\n\r\n窗口管理虽然可以方便的用触控版切换，但是步骤繁琐，没有在 linux 上直接用功能键切换窗口方便,例如按 F1 切换到终端，F2 切换到浏览器。在 os x 上当然也可以定义快捷键，但是正如前面说的。没有实体 F 功能键，只能绑定到奇怪的组合上面。终归还是繁琐了一点。\r\n\r\n加上 os x 的窗口切换，即便关闭了动画。窗口直接的切换还是有点迟滞的感觉。\r\n\r\n以上就是使用 os x 比较不爽的点，所以还是回到了更低分辨率但是更流畅的 linux.", "content_rendered": "逃离到 os x 的主要原因是觉得苹果笔记本的屏幕细腻，次要原因是可以方便使用企业微信。<br /><br />硬件方面：<br />mac book pro 的屏幕没的说，但是屏幕过于光滑反光很难受。键盘的按键反馈还是很清晰，就是键程过短，有点难受。再有就是没有实体的 F1-F2,ESC,对于 vim 用户来说，过于难受。后来把大小写切换映射成了 esc,但是又和 tab 键容易弄混。反正就是很别扭。<br /><br />软件方面：<br />一些常用命令行工具的版本和 linux 系统不一样，使用上有点不习惯，例如 cp 命令的参数必须紧跟在 cp 命令后面。而不能放到一行的后面。<br /><br />终端软件用的系统默认的,也用过 terminal2 啥的，大概是这么一个名字。 但是因为要使用 tmux,没有 alt 键做快捷键，也是很麻烦。<br /><br />说到终端，linux 下，选中内容，然后鼠标中键或者 Ctrl+ins 键就能粘贴的功能，在 os x 上没有，只有终端勉强支持。<br /><br />窗口管理虽然可以方便的用触控版切换，但是步骤繁琐，没有在 linux 上直接用功能键切换窗口方便,例如按 F1 切换到终端，F2 切换到浏览器。在 os x 上当然也可以定义快捷键，但是正如前面说的。没有实体 F 功能键，只能绑定到奇怪的组合上面。终归还是繁琐了一点。<br /><br />加上 os x 的窗口切换，即便关闭了动画。窗口直接的切换还是有点迟滞的感觉。<br /><br />以上就是使用 os x 比较不爽的点，所以还是回到了更低分辨率但是更流畅的 linux.", "last_modified": 1628562118, "replies": 80, "id": 794788}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1615111825", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1615111825", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 15549, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1615111825", "stars": 1890, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"username": "minsheng", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/6d44/d555/137981_mini.png?m=1563335226", "bio": null, "url": "https://www.v2ex.com/u/minsheng", "tagline": null, "twitter": null, "created": 1442031905, "avatar_large": "https://cdn.v2ex.com/avatar/6d44/d555/137981_mini.png?m=1563335226", "avatar_mini": "https://cdn.v2ex.com/avatar/6d44/d555/137981_mini.png?m=1563335226", "location": null, "btc": null, "id": 137981}, "last_reply_by": "datoo", "last_touched": 1628648028, "title": "关于 Apple 扫描儿童色情照片的技术讨论", "url": "https://www.v2ex.com/t/794903", "created": 1628591670, "content": "这两天看了无数人讨论 Apple 的 CSAM，感觉大家说的话都互相冲突，也没有人讨论 Apple 所谓的本地扫描的具体实现，有点难受。于是我自己相对认真的读了一下 Apple 发布的[技术总结]( https://www.apple.com/child-safety/pdf/CSAM_Detection_Technical_Summary.pdf)。这里简单分享一下我的理解，欢迎做纯技术讨论。\r\n\r\n首先，Apple 非常明确，它做的是**图片匹配**，不是图片识别。图片的来源是第三方 NGO 机构，但它们仅提供图片，不存在提供神经网络模型的地方。Apple 希望自己的系统实现以下几点：\r\n\r\n* 不匹配的用户图片，Apple 的系统完全无法接触；\r\n* 匹配的用户图片，只有等匹配数达到一定阈值，Apple 才可以接触；\r\n* 用户无法访问 CSAM 图片数据库（要不然就不用自己找了）；\r\n* 用户无法了解自己的哪张图片被标记为潜在的儿童色情照片。\r\n\r\n我个人把系统理解成三个部分：\r\n\r\n* 一套 Apple 称之为 NeuralHash 的系统，用来回答两张图片是否匹配；\r\n* 本地的图片 voucher 生成系统；\r\n* iCloud 服务器上的 voucher 处理系统。\r\n\r\n本地的 voucher 生成系统确保了用户既无法访问 CSAM 图片数据库，也不知道自己的哪张图片被标记了。后者则从数学上确保了 Apple 无法访问不匹配的用户图片。更重要的是，即使误伤了，也需要误伤足够多的次数，Apple 才可以解开**匹配的图片**。这里分别用了「 private set intersection 」和「 threshold secret sharing 」这两项技术。\r\n\r\n# NeuralHash\r\n\r\nNeuralHash 是 neural + hash 两个部分组成。Apple 训练了一个 CNN 网络，输入图像，输出一个图像的向量表示。这个 CNN 的目的是，让相近的图片映射到相近的表示上去。紧接着，Apple 使用称之为 hyperplane locality-sensitive hashing (LSH) 的技术对生成的向量表示进行处理。\r\n\r\n我完全没听过 LSH 这个概念，根据维基百科的描述，LSH 把近似的输入放到同一个 bucket 里面；与软件开发日常接触的 hash 相比，普通的 hash 尽可能避免碰撞，而 LSH 从某种意义上最大化了碰撞。感觉这是一种对数据集做聚类的办法。\r\n\r\nApple 用 NeuralHash 想解决的一个问题是优化空间。把几十万张色情图片存到每个人的手机里显然是不可能的；即使通过 CNN 提取特征向量，结果也很大，但是得到的特征向量再进一步 hash，Apple 实现了可以给每一部设备上放下完整的 CSAM 数据集。\r\n\r\nApple 还简单描述了一下 CNN 的训练，是一个很简单的无监督学习，即给网络一对图片，输出两张图片的差。一方面，Apple 会从一张图片生成一个篡改过但视觉相等的图片，让网络输出的差尽可能小；另一方面，将两张不同的图片放在一起，让网络输出的差尽可能大。后者很有必要，不然网络可能会给任何一对图片都输出零，这样就没有意义了。\r\n\r\nHyperplane LSH 跟图片没啥关系，它的任务就是对图片的特征向量做压缩，并满足让相近的两个向量输出的结果**相同**。\r\n\r\n\r\n# Private Set Intersection\r\n\r\n但其实 NeuralHash 只是解决了图片匹配的问题。真正体系 Apple 这套系统对隐私的保护的是 Private Set Intersection (PSI) 和 Threshold Secret Share 。没有人关心，但非常有趣，所以我就简单说一下。\r\n\r\n首先，Apple 需要对每张图片生成一定的额外信息（ payload ），这些信息的具体设计会在后面提及，而它们的目的，则是在发现某个用户匹配足够多的图片的时候，帮助 Apple 读取相应的图片，人工审核。PSI 的设计是，当且仅当某张用户的图片 NeuralHash 等于 CSAM 数据库里的某张图片的 NeuralHash 时，对应的 payload 才会被解开。因此，这个问题也就变成了根据 NeuralHash，构造一个密钥，用来加密 payload 。如果这个密钥能成功解密 payload，那么这个 payload 所属的图片，必然匹配该 NeuralHash 对应的图片。若解密失败，则该 payload 的原始图片不是我们想要的图片，且因为 payload 无法被解开，用户信息也不会被泄漏。\r\n\r\n这里的点主要在于：\r\n\r\n* 用户图片的 NeuralHash 不能发给 Apple，不然 Apple 可以解开任何照片；\r\n* CSAM 数据库里的原始图片的 NeuralHash 不能发到用户设备上，不然用户设备就可以提前得知图片匹配结果，而 Apple 的设计原则明确不希望这一点。\r\n\r\nApple 的实现思路是这样的：\r\n\r\n* 对 NeuralHash 本身进行传统 hash，相当于每个 NeuralHash 赋予一个 ID 。这个 hash 函数本身，iCloud 和用户设备都知道，因此用户可以在本地执行相同的 hash 。\r\n* 对 CSAM 数据库里的 NeuralHash 进行加密（ blinding ）。将 ID 以及 blinding 过的 NeuralHash 作为数据库发到用户设备上。\r\n* 上传图片的时候，会先计算该图片的 NeuralHash 、NeuralHash 的 ID （通过 hash ）、图片的 payload，然后按照用户数据库里的 blinded NeuralHash 和图片的 NeuralHash，计算一个加密密钥，加密 payload，并将 ID 和 payload 上传给 iCloud 。\r\n* 注意，该图片的 ID 匹配用户数据库里的条目有两种情况，正确匹配和 hash 碰撞。\r\n\r\n在 iCloud 服务器上，服务器可以重做这一步。首先，根据用户上传的 ID 和 payload，拿到图片的 NeuralHash 。然后，用 blinded NeuralHash 和该图片的 NeuralHash 计算密钥，并解密 payload 。如果用户的图片确实对应了 CSAM 数据库里的图片，那么 payload 可以正确解密；若只是 hash 碰撞，解密会失败，匹配失败，用户的 payload 隐私得到了保护。\r\n\r\nApple 并没有讨论如果用户的图片的 NeuralHash 的 ID 不匹配数据库里的任意条目的情况。这种情况说明该图片肯定不在 CSAM 中，但是这会提前暴露用户匹配结果。我估计 Apple 的做法是通过调整 hash，是 ID 空间变小，并对不存在的条目，生成假的 blinded NeuralHash，一并发给用户。在服务器上只需要检测 ID，如果来自假的条目，则直接匹配失败，且用户设备不知道这一点。\r\n\r\n# Threshold Secret Sharing\r\n\r\n这个系统的具体算法 Apple 一笔带过。我问了了解相关领域的同学，发现其实是一个非常基本的技术。其解决的问题 Apple 也大概描述了一下：\r\n\r\n* 我们把秘密分成一千份，并设置一个阈值为十。\r\n* 从这一千份里任意掏出十份数据，都无法还原原始秘密。\r\n* 但拿到了十一份数据，就可以知道原始秘密了。\r\n\r\n举个例子，比如说你有一个一元二次多项式 P(x) = ax^2 + bx + s，s 就是你要保守的秘密，有四个人，你可以告诉每个人 P(1)、P(2)、P(3)、P(4) 分别是多少。每个人都可以化简自己的等式：\r\n\r\n* P(1) = a + b + s\r\n* P(2) = 4a + 2b + s\r\n* P(3) = 9a + 3b + s\r\n* P(4) = 16a + 3b + s\r\n\r\n当我们只知道一个或者两个人的数字的时候，是无法解密的，但比如说我们知道 P(1)、P(2)、P(3) 均是 0 的时候，就很容易解出 s = 0 。\r\n\r\n简单来说，Apple 做了一个双重加密系统。首先，Apple 给每个账号生成一个密钥，只存在用户设备里。然后，Apple 用这个密钥加密每张图片的 payload，并且将加密的结果和这个密钥的一部分（ secret share ），一起用 NeuralHash 导出的密钥进行加密。\r\n\r\n首先，如果一张图片压根没有匹配 CSAM 数据集，那么 Apple 将无法获得用户密钥的任何 share 。只有等匹配了之后，Apple 才能拿到一个 share 。当拿到的 share 数目超过一个阈值之后，Apple 才能用这些信息构建出用户密钥，解密图片的 payload 。即使在这个时候，也只有匹配的图片的 payload 可以被解开，因为其它图片的数据被 NeuralHash 衍生的密钥保护着。\r\n\r\nApple 还提到用户设备会随机生成假的 voucher 。这些 voucher 在 iCloud 中会通过第一层匹配，但是其 payload 并不会包含任何有意义的信息，无法解开第二层的密钥。通过调参，这些生成的 voucher 的数目会和匹配的图片的数目处于同一数量级，这样，在解开第二层密钥之前，Apple 就无法准确判断一个用户究竟有多少图片已经匹配，最大程度保护用户隐私。不过这一段的具体思路我没有特别看懂。\r\n\r\n欢迎大家讨论。", "content_rendered": "<p>这两天看了无数人讨论 Apple 的 CSAM，感觉大家说的话都互相冲突，也没有人讨论 Apple 所谓的本地扫描的具体实现，有点难受。于是我自己相对认真的读了一下 Apple 发布的<a href=\"https://www.apple.com/child-safety/pdf/CSAM_Detection_Technical_Summary.pdf\" rel=\"nofollow\">技术总结</a>。这里简单分享一下我的理解，欢迎做纯技术讨论。</p>\n<p>首先，Apple 非常明确，它做的是<strong>图片匹配</strong>，不是图片识别。图片的来源是第三方 NGO 机构，但它们仅提供图片，不存在提供神经网络模型的地方。Apple 希望自己的系统实现以下几点：</p>\n<ul>\n<li>不匹配的用户图片，Apple 的系统完全无法接触；</li>\n<li>匹配的用户图片，只有等匹配数达到一定阈值，Apple 才可以接触；</li>\n<li>用户无法访问 CSAM 图片数据库（要不然就不用自己找了）；</li>\n<li>用户无法了解自己的哪张图片被标记为潜在的儿童色情照片。</li>\n</ul>\n<p>我个人把系统理解成三个部分：</p>\n<ul>\n<li>一套 Apple 称之为 NeuralHash 的系统，用来回答两张图片是否匹配；</li>\n<li>本地的图片 voucher 生成系统；</li>\n<li>iCloud 服务器上的 voucher 处理系统。</li>\n</ul>\n<p>本地的 voucher 生成系统确保了用户既无法访问 CSAM 图片数据库，也不知道自己的哪张图片被标记了。后者则从数学上确保了 Apple 无法访问不匹配的用户图片。更重要的是，即使误伤了，也需要误伤足够多的次数，Apple 才可以解开<strong>匹配的图片</strong>。这里分别用了「 private set intersection 」和「 threshold secret sharing 」这两项技术。</p>\n<h1>NeuralHash</h1>\n<p>NeuralHash 是 neural + hash 两个部分组成。Apple 训练了一个 CNN 网络，输入图像，输出一个图像的向量表示。这个 CNN 的目的是，让相近的图片映射到相近的表示上去。紧接着，Apple 使用称之为 hyperplane locality-sensitive hashing (LSH) 的技术对生成的向量表示进行处理。</p>\n<p>我完全没听过 LSH 这个概念，根据维基百科的描述，LSH 把近似的输入放到同一个 bucket 里面；与软件开发日常接触的 hash 相比，普通的 hash 尽可能避免碰撞，而 LSH 从某种意义上最大化了碰撞。感觉这是一种对数据集做聚类的办法。</p>\n<p>Apple 用 NeuralHash 想解决的一个问题是优化空间。把几十万张色情图片存到每个人的手机里显然是不可能的；即使通过 CNN 提取特征向量，结果也很大，但是得到的特征向量再进一步 hash，Apple 实现了可以给每一部设备上放下完整的 CSAM 数据集。</p>\n<p>Apple 还简单描述了一下 CNN 的训练，是一个很简单的无监督学习，即给网络一对图片，输出两张图片的差。一方面，Apple 会从一张图片生成一个篡改过但视觉相等的图片，让网络输出的差尽可能小；另一方面，将两张不同的图片放在一起，让网络输出的差尽可能大。后者很有必要，不然网络可能会给任何一对图片都输出零，这样就没有意义了。</p>\n<p>Hyperplane LSH 跟图片没啥关系，它的任务就是对图片的特征向量做压缩，并满足让相近的两个向量输出的结果<strong>相同</strong>。</p>\n<h1>Private Set Intersection</h1>\n<p>但其实 NeuralHash 只是解决了图片匹配的问题。真正体系 Apple 这套系统对隐私的保护的是 Private Set Intersection (PSI) 和 Threshold Secret Share 。没有人关心，但非常有趣，所以我就简单说一下。</p>\n<p>首先，Apple 需要对每张图片生成一定的额外信息（ payload ），这些信息的具体设计会在后面提及，而它们的目的，则是在发现某个用户匹配足够多的图片的时候，帮助 Apple 读取相应的图片，人工审核。PSI 的设计是，当且仅当某张用户的图片 NeuralHash 等于 CSAM 数据库里的某张图片的 NeuralHash 时，对应的 payload 才会被解开。因此，这个问题也就变成了根据 NeuralHash，构造一个密钥，用来加密 payload 。如果这个密钥能成功解密 payload，那么这个 payload 所属的图片，必然匹配该 NeuralHash 对应的图片。若解密失败，则该 payload 的原始图片不是我们想要的图片，且因为 payload 无法被解开，用户信息也不会被泄漏。</p>\n<p>这里的点主要在于：</p>\n<ul>\n<li>用户图片的 NeuralHash 不能发给 Apple，不然 Apple 可以解开任何照片；</li>\n<li>CSAM 数据库里的原始图片的 NeuralHash 不能发到用户设备上，不然用户设备就可以提前得知图片匹配结果，而 Apple 的设计原则明确不希望这一点。</li>\n</ul>\n<p>Apple 的实现思路是这样的：</p>\n<ul>\n<li>对 NeuralHash 本身进行传统 hash，相当于每个 NeuralHash 赋予一个 ID 。这个 hash 函数本身，iCloud 和用户设备都知道，因此用户可以在本地执行相同的 hash 。</li>\n<li>对 CSAM 数据库里的 NeuralHash 进行加密（ blinding ）。将 ID 以及 blinding 过的 NeuralHash 作为数据库发到用户设备上。</li>\n<li>上传图片的时候，会先计算该图片的 NeuralHash 、NeuralHash 的 ID （通过 hash ）、图片的 payload，然后按照用户数据库里的 blinded NeuralHash 和图片的 NeuralHash，计算一个加密密钥，加密 payload，并将 ID 和 payload 上传给 iCloud 。</li>\n<li>注意，该图片的 ID 匹配用户数据库里的条目有两种情况，正确匹配和 hash 碰撞。</li>\n</ul>\n<p>在 iCloud 服务器上，服务器可以重做这一步。首先，根据用户上传的 ID 和 payload，拿到图片的 NeuralHash 。然后，用 blinded NeuralHash 和该图片的 NeuralHash 计算密钥，并解密 payload 。如果用户的图片确实对应了 CSAM 数据库里的图片，那么 payload 可以正确解密；若只是 hash 碰撞，解密会失败，匹配失败，用户的 payload 隐私得到了保护。</p>\n<p>Apple 并没有讨论如果用户的图片的 NeuralHash 的 ID 不匹配数据库里的任意条目的情况。这种情况说明该图片肯定不在 CSAM 中，但是这会提前暴露用户匹配结果。我估计 Apple 的做法是通过调整 hash，是 ID 空间变小，并对不存在的条目，生成假的 blinded NeuralHash，一并发给用户。在服务器上只需要检测 ID，如果来自假的条目，则直接匹配失败，且用户设备不知道这一点。</p>\n<h1>Threshold Secret Sharing</h1>\n<p>这个系统的具体算法 Apple 一笔带过。我问了了解相关领域的同学，发现其实是一个非常基本的技术。其解决的问题 Apple 也大概描述了一下：</p>\n<ul>\n<li>我们把秘密分成一千份，并设置一个阈值为十。</li>\n<li>从这一千份里任意掏出十份数据，都无法还原原始秘密。</li>\n<li>但拿到了十一份数据，就可以知道原始秘密了。</li>\n</ul>\n<p>举个例子，比如说你有一个一元二次多项式 P(x) = ax^2 + bx + s，s 就是你要保守的秘密，有四个人，你可以告诉每个人 P(1)、P(2)、P(3)、P(4) 分别是多少。每个人都可以化简自己的等式：</p>\n<ul>\n<li>P(1) = a + b + s</li>\n<li>P(2) = 4a + 2b + s</li>\n<li>P(3) = 9a + 3b + s</li>\n<li>P(4) = 16a + 3b + s</li>\n</ul>\n<p>当我们只知道一个或者两个人的数字的时候，是无法解密的，但比如说我们知道 P(1)、P(2)、P(3) 均是 0 的时候，就很容易解出 s = 0 。</p>\n<p>简单来说，Apple 做了一个双重加密系统。首先，Apple 给每个账号生成一个密钥，只存在用户设备里。然后，Apple 用这个密钥加密每张图片的 payload，并且将加密的结果和这个密钥的一部分（ secret share ），一起用 NeuralHash 导出的密钥进行加密。</p>\n<p>首先，如果一张图片压根没有匹配 CSAM 数据集，那么 Apple 将无法获得用户密钥的任何 share 。只有等匹配了之后，Apple 才能拿到一个 share 。当拿到的 share 数目超过一个阈值之后，Apple 才能用这些信息构建出用户密钥，解密图片的 payload 。即使在这个时候，也只有匹配的图片的 payload 可以被解开，因为其它图片的数据被 NeuralHash 衍生的密钥保护着。</p>\n<p>Apple 还提到用户设备会随机生成假的 voucher 。这些 voucher 在 iCloud 中会通过第一层匹配，但是其 payload 并不会包含任何有意义的信息，无法解开第二层的密钥。通过调参，这些生成的 voucher 的数目会和匹配的图片的数目处于同一数量级，这样，在解开第二层密钥之前，Apple 就无法准确判断一个用户究竟有多少图片已经匹配，最大程度保护用户隐私。不过这一段的具体思路我没有特别看懂。</p>\n<p>欢迎大家讨论。</p>\n", "last_modified": 1628591682, "replies": 74, "id": 794903}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/1fc2/1400/864_large.png?m=1497247521", "name": "promotions", "avatar_normal": "https://cdn.v2ex.com/navatar/1fc2/1400/864_normal.png?m=1497247521", "title": "推广", "url": "https://www.v2ex.com/go/promotions", "topics": 5817, "footer": "", "header": "来自厂商的推广活动类主题，会被归类到这个节点。希望有情怀的产商们在发布推广内容时，主动选择发布到本节点下。", "title_alternative": "Promotions", "avatar_mini": "https://cdn.v2ex.com/navatar/1fc2/1400/864_mini.png?m=1497247521", "stars": 613, "aliases": [], "root": false, "id": 864, "parent_node_name": ""}, "member": {"username": "DaisyParallels", "website": "https://prf.hn/l/rdklekZ", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/acbd/5c9b/435618_mini.png?m=1565671903", "bio": "", "url": "https://www.v2ex.com/u/DaisyParallels", "tagline": "", "twitter": null, "created": 1565671678, "avatar_large": "https://cdn.v2ex.com/avatar/acbd/5c9b/435618_mini.png?m=1565671903", "avatar_mini": "https://cdn.v2ex.com/avatar/acbd/5c9b/435618_mini.png?m=1565671903", "location": "", "btc": null, "id": 435618}, "last_reply_by": "yazinnnn", "last_touched": 1628629929, "title": "Parallels Desktop 17 发布啦！速来围观新增功能", "url": "https://www.v2ex.com/t/794845", "created": 1628578173, "content": "Parallels Desktop for Mac 版本 17 已经全面上线，包含必备性能更新，支持 macOS Monterey，并面向 Intel 和 Apple M1 芯片进行了优化。\r\n快如闪电 - Windows 恢复时间最多可缩短 38%，因此可以快速进入应用程序。\r\n更好的显卡性能 - 二维图形速度提升高达 25%，DirectX 11 速度提升高达 28%。\r\n流畅的 Windows UI 和视频播放，更高的游戏帧速率，以及更多。\r\n去官网了解更多： https://prf.hn/l/rdklekZ", "content_rendered": "<p>Parallels Desktop for Mac 版本 17 已经全面上线，包含必备性能更新，支持 macOS Monterey，并面向 Intel 和 Apple M1 芯片进行了优化。\n快如闪电 - Windows 恢复时间最多可缩短 38%，因此可以快速进入应用程序。\n更好的显卡性能 - 二维图形速度提升高达 25%，DirectX 11 速度提升高达 28%。\n流畅的 Windows UI 和视频播放，更高的游戏帧速率，以及更多。\n去官网了解更多： <a href=\"https://prf.hn/l/rdklekZ\" rel=\"nofollow\">https://prf.hn/l/rdklekZ</a></p>\n", "last_modified": 1628587654, "replies": 45, "id": 794845}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1622572533", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1622572533", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 175330, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1622572533", "stars": 3291, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"username": "anticipated", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/0e62/1a74/343311_mini.png?m=1582937653", "bio": null, "url": "https://www.v2ex.com/u/anticipated", "tagline": null, "twitter": null, "created": 1534846099, "avatar_large": "https://cdn.v2ex.com/avatar/0e62/1a74/343311_mini.png?m=1582937653", "avatar_mini": "https://cdn.v2ex.com/avatar/0e62/1a74/343311_mini.png?m=1582937653", "location": null, "btc": null, "id": 343311}, "last_reply_by": "xz410236056", "last_touched": 1628645095, "title": "讨论下，未来几年硬盘速度会超过内存速度吗？", "url": "https://www.v2ex.com/t/794868", "created": 1628582840, "content": "目前民用的固态硬盘速度可以达到 7GB/s 了,\r\n比如：\r\n浦科特 7.0 GB/s： https://item.jd.com/100022343216.html\r\nSeagate 7.3GB/s    https://item.jd.com/100024621730.html\r\n\r\n使用的是 4.0 的接口。SSD 固态硬盘 M.2 接口(NVMe 协议 PCIe 4.0 x4) \r\n\r\n参考知乎（ 3 年前的回答）：\r\n连续读取\r\nL1CACHE 大概是 100~500GB/s 的水平\r\nL3CACHE 大概是 10~50G/s 的水平\r\nDDR4 内存大概是 3GB/s 的水平\r\nnvme ssd 大概是 2000MB/s 的水平\r\nSATA ssd 大概是 450MB/s 的水平\r\n机械硬盘大概是 100 ～ 150MB/s 的水平\r\n随机读写不清楚，总之也是差 n 个数量级，只会比连续读写差距更大。\r\nhttps://www.zhihu.com/question/266375329/answer/307169479\r\n\r\n那么，就读写而言，未来的主机的速度的瓶颈不再是硬盘速度而是内存速度？ 有可能吗？\r\n\r\nPS： 因为对实际的内存原理完全不懂，欢迎指正和讨论", "content_rendered": "目前民用的固态硬盘速度可以达到 7GB/s 了,<br />比如：<br />浦科特 7.0 GB/s： <a target=\"_blank\" href=\"https://item.jd.com/100022343216.html\" rel=\"nofollow noopener\">https://item.jd.com/100022343216.html</a><br />Seagate 7.3GB/s    <a target=\"_blank\" href=\"https://item.jd.com/100024621730.html\" rel=\"nofollow noopener\">https://item.jd.com/100024621730.html</a><br /><br />使用的是 4.0 的接口。SSD 固态硬盘 M.2 接口(NVMe 协议 PCIe 4.0 x4) <br /><br />参考知乎（ 3 年前的回答）：<br />连续读取<br />L1CACHE 大概是 100~500GB/s 的水平<br />L3CACHE 大概是 10~50G/s 的水平<br />DDR4 内存大概是 3GB/s 的水平<br />nvme ssd 大概是 2000MB/s 的水平<br />SATA ssd 大概是 450MB/s 的水平<br />机械硬盘大概是 100 ～ 150MB/s 的水平<br />随机读写不清楚，总之也是差 n 个数量级，只会比连续读写差距更大。<br /><a target=\"_blank\" href=\"https://www.zhihu.com/question/266375329/answer/307169479\" rel=\"nofollow noopener\">https://www.zhihu.com/question/266375329/answer/307169479</a><br /><br />那么，就读写而言，未来的主机的速度的瓶颈不再是硬盘速度而是内存速度？ 有可能吗？<br /><br />PS： 因为对实际的内存原理完全不懂，欢迎指正和讨论", "last_modified": 1628582840, "replies": 44, "id": 794868}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/70ef/df2e/17_large.png?m=1626270019", "name": "create", "avatar_normal": "https://cdn.v2ex.com/navatar/70ef/df2e/17_normal.png?m=1626270019", "title": "分享创造", "url": "https://www.v2ex.com/go/create", "topics": 16538, "footer": "", "header": "欢迎你在这里发布自己的最新作品！", "title_alternative": "Create", "avatar_mini": "https://cdn.v2ex.com/navatar/70ef/df2e/17_mini.png?m=1626270019", "stars": 4008, "aliases": [], "root": false, "id": 17, "parent_node_name": "geek"}, "member": {"username": "Leooe1", "website": "https://github.com/netless-io/flat", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/34bf/1727/511958_mini.png?m=1628146382", "bio": "", "url": "https://www.v2ex.com/u/Leooe1", "tagline": "年少无为", "twitter": null, "created": 1602319579, "avatar_large": "https://cdn.v2ex.com/avatar/34bf/1727/511958_mini.png?m=1628146382", "avatar_mini": "https://cdn.v2ex.com/avatar/34bf/1727/511958_mini.png?m=1628146382", "location": "", "btc": null, "id": 511958}, "last_reply_by": "xixi10111011", "last_touched": 1628647986, "title": "临近下班意外发现开源项目上了 GitHub 热门", "url": "https://www.v2ex.com/t/794954", "created": 1628606832, "content": "准备下班的时候，随手看了下 GitHub Trending，意外的发现我们项目（ flat ）上了 TypeScript 热门，并且排第一。。。\r\n\r\n近期的疲惫一下烟消云散。。。 感谢各位 V 站大佬的捧场 🙏\r\n\r\n在线体验：[https://flat-web.whiteboard.agora.io]( https://flat-web.whiteboard.agora.io/)\r\n\r\nGitHub： [https://github.com/netless-io/flat]( https://github.com/netless-io/flat)\r\n\r\n![]( https://i.imgur.com/503jCpd.png)\r\n\r\n![]( https://i.imgur.com/SrRsYrw.png)", "content_rendered": "<p>准备下班的时候，随手看了下 GitHub Trending，意外的发现我们项目（ flat ）上了 TypeScript 热门，并且排第一。。。</p>\n<p>近期的疲惫一下烟消云散。。。 感谢各位 V 站大佬的捧场 🙏</p>\n<p>在线体验：<a href=\"https://flat-web.whiteboard.agora.io/\" rel=\"nofollow\">https://flat-web.whiteboard.agora.io</a></p>\n<p>GitHub： <a href=\"https://github.com/netless-io/flat\" rel=\"nofollow\">https://github.com/netless-io/flat</a></p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/503jCpd.png\"/></p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/SrRsYrw.png\"/></p>\n", "last_modified": 1628606832, "replies": 43, "id": 794954}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1622572533", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1622572533", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 175330, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1622572533", "stars": 3291, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"username": "qping", "website": "blog.qping.me", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/cd05/aa1c/70333_mini.png?m=1549073959", "bio": "", "url": "https://www.v2ex.com/u/qping", "tagline": "", "twitter": "", "created": 1407517655, "avatar_large": "https://cdn.v2ex.com/avatar/cd05/aa1c/70333_mini.png?m=1549073959", "avatar_mini": "https://cdn.v2ex.com/avatar/cd05/aa1c/70333_mini.png?m=1549073959", "location": "", "btc": "", "id": 70333}, "last_reply_by": "lancelock", "last_touched": 1628647813, "title": "看了一上午的笔记本的, 选了 3 款,有几个疑惑求大佬帮忙参谋下", "url": "https://www.v2ex.com/t/794835", "created": 1628573589, "content": "需求:\r\n\r\n\t15 寸屏幕\r\n    1w 左右\r\n    主要是 java 开发,使用 docker,cpu 要好,架构问题放弃了 m1\r\n    \r\n\r\n现在的备用选项有:\r\n\r\n\tROG 魔霸新锐 2021\r\n    ROG 幻 16 \r\n    联想 R9000P\r\n \r\n问题:\r\n\t\r\n    1 、看 ROG 是 6 热管 4 出风口液金散热, 联想没有详细说看起来是 4 热管,是不是 ROG 的散热更好\r\n    2 、屏幕 16:9 和 16:10 差的多吗, 之前是用的 mbp,有点纠结是不是影响很大、\r\n    3 、15 寸的 1080p 的屏幕在 windows 下 会不会不够清晰\r\n    4 、R9000P 结不结实? 上上台电脑是联想 Y580,经常背着出差,一侧塑料壳全部断了,至今心有余悸\r\n    5 、幻 16 看是只有一个内存插槽, 能自己加内存吗\r\n    \r\n\r\n![对比图]( https://i.imgur.com/dtJEWw6.png)", "content_rendered": "<p>需求:</p>\n<pre><code>15 寸屏幕\n1w 左右\n主要是 java 开发,使用 docker,cpu 要好,架构问题放弃了 m1\n</code></pre>\n<p>现在的备用选项有:</p>\n<pre><code>ROG 魔霸新锐 2021\nROG 幻 16 \n联想 R9000P\n</code></pre>\n<p>问题:</p>\n<pre><code>1 、看 ROG 是 6 热管 4 出风口液金散热, 联想没有详细说看起来是 4 热管,是不是 ROG 的散热更好\n2 、屏幕 16:9 和 16:10 差的多吗, 之前是用的 mbp,有点纠结是不是影响很大、\n3 、15 寸的 1080p 的屏幕在 windows 下 会不会不够清晰\n4 、R9000P 结不结实? 上上台电脑是联想 Y580,经常背着出差,一侧塑料壳全部断了,至今心有余悸\n5 、幻 16 看是只有一个内存插槽, 能自己加内存吗\n</code></pre>\n<p><img alt=\"对比图\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/dtJEWw6.png\"/></p>\n", "last_modified": 1628573834, "replies": 43, "id": 794835}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/d67d/8ab4/39_large.png?m=1626622970", "name": "android", "avatar_normal": "https://cdn.v2ex.com/navatar/d67d/8ab4/39_normal.png?m=1626622970", "title": "Android", "url": "https://www.v2ex.com/go/android", "topics": 8910, "footer": "", "header": "来自 <a href=\"/go/google\">Google</a> 的开放源代码智能手机平台。", "title_alternative": "Android", "avatar_mini": "https://cdn.v2ex.com/navatar/d67d/8ab4/39_mini.png?m=1626622970", "stars": 4858, "aliases": [], "root": false, "id": 39, "parent_node_name": "hardware"}, "member": {"username": "gainsurier", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/7f9d/d067/156062_mini.png?m=1481548285", "bio": "", "url": "https://www.v2ex.com/u/gainsurier", "tagline": "", "twitter": "", "created": 1453192704, "avatar_large": "https://cdn.v2ex.com/avatar/7f9d/d067/156062_mini.png?m=1481548285", "avatar_mini": "https://cdn.v2ex.com/avatar/7f9d/d067/156062_mini.png?m=1481548285", "location": "", "btc": "", "id": 156062}, "last_reply_by": "stoneabc", "last_touched": 1628647791, "title": "小米 mix 4 屏下效果实拍", "url": "https://www.v2ex.com/t/794969", "created": 1628613396, "content": "贴膜留个个洞无视。从各个角度基本不可见了，前置拍照效果略微朦胧。\r\nhttps://i.v2ex.co/7j0U6007.jpeg\r\nhttps://i.v2ex.co/tuM18z24.jpeg", "content_rendered": "贴膜留个个洞无视。从各个角度基本不可见了，前置拍照效果略微朦胧。<br /><a target=\"_blank\" href=\"/i/7j0U6007.jpeg\" rel=\"nofollow noopener\" target=\"_blank\" title=\"在新窗口打开图片 7j0U6007.jpeg\"><img src=\"//i.v2ex.co/7j0U6007.jpeg\" class=\"embedded_image\"></a><br /><a target=\"_blank\" href=\"/i/tuM18z24.jpeg\" rel=\"nofollow noopener\" target=\"_blank\" title=\"在新窗口打开图片 tuM18z24.jpeg\"><img src=\"//i.v2ex.co/tuM18z24.jpeg\" class=\"embedded_image\"></a>", "last_modified": 1628613743, "replies": 38, "id": 794969}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/8d31/7bdc/747_large.png?m=1523201604", "name": "deals", "avatar_normal": "https://cdn.v2ex.com/navatar/8d31/7bdc/747_normal.png?m=1523201604", "title": "优惠信息", "url": "https://www.v2ex.com/go/deals", "topics": 1766, "footer": "", "header": "这里分享和发布来自互联网上的最新优惠信息", "title_alternative": "Deals", "avatar_mini": "https://cdn.v2ex.com/navatar/8d31/7bdc/747_mini.png?m=1523201604", "stars": 2576, "aliases": [], "root": false, "id": 747, "parent_node_name": "life"}, "member": {"username": "moon7wimd", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/249b/e7e6/286984_mini.png?m=1518924249", "bio": null, "url": "https://www.v2ex.com/u/moon7wimd", "tagline": null, "twitter": null, "created": 1516978023, "avatar_large": "https://cdn.v2ex.com/avatar/249b/e7e6/286984_mini.png?m=1518924249", "avatar_mini": "https://cdn.v2ex.com/avatar/249b/e7e6/286984_mini.png?m=1518924249", "location": null, "btc": null, "id": 286984}, "last_reply_by": "toxicant", "last_touched": 1628601891, "title": "QQ 音乐免费送一个月会员", "url": "https://www.v2ex.com/t/794861", "created": 1628582020, "content": "QQ 音乐 app，首页底部栏，扑通发个贴带话题#好运许愿池# ，一个月会员秒到，亲测可用", "content_rendered": "QQ 音乐 app，首页底部栏，扑通发个贴带话题#好运许愿池# ，一个月会员秒到，亲测可用", "last_modified": 1628582020, "replies": 38, "id": 794861}]