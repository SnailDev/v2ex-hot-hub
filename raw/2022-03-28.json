[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1648461058", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1648461058", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 47985, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1648461058", "stars": 7760, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 436372, "username": "huajieyu", "url": "https://www.v2ex.com/u/huajieyu", "website": "huajieyu.top", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/67e21b70f696a9b2171722bda0f7f031?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/67e21b70f696a9b2171722bda0f7f031?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/67e21b70f696a9b2171722bda0f7f031?s=73&d=retro", "created": 1565945917, "last_modified": 1565945917}, "last_reply_by": "HanMeiM", "last_touched": 1648467957, "title": "Git clone 国内下载慢问题，大家是如何解决的 2022-03-28", "url": "https://www.v2ex.com/t/843313", "created": 1648435474, "deleted": 0, "content": "最近家里的电脑 neovim 插件版本升级，发现 clone 失败，搜了网上解决方案，修改 vim-plug 插件 github.com 为镜像地址，但是网上提供的镜像地址都不能用了，大家有什么好的解决方案吗，求救", "content_rendered": "<p>最近家里的电脑 neovim 插件版本升级，发现 clone 失败，搜了网上解决方案，修改 vim-plug 插件 <a href=\"http://github.com\" rel=\"nofollow\">github.com</a> 为镜像地址，但是网上提供的镜像地址都不能用了，大家有什么好的解决方案吗，求救</p>\n", "last_modified": 1648435474, "replies": 83, "id": 843313}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/9a11/5815/52_large.png?m=1630576655", "name": "hardware", "avatar_normal": "https://cdn.v2ex.com/navatar/9a11/5815/52_normal.png?m=1630576655", "title": "硬件", "url": "https://www.v2ex.com/go/hardware", "topics": 4343, "footer": "", "header": "硬件发烧友的讨论节点", "title_alternative": "Hardware", "avatar_mini": "https://cdn.v2ex.com/navatar/9a11/5815/52_mini.png?m=1630576655", "stars": 1927, "aliases": [], "root": false, "id": 52, "parent_node_name": "computer"}, "member": {"id": 349451, "username": "justd", "url": "https://www.v2ex.com/u/justd", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/cf33/1222/349451_mini.png?m=1582965270", "avatar_normal": "https://cdn.v2ex.com/avatar/cf33/1222/349451_normal.png?m=1582965270", "avatar_large": "https://cdn.v2ex.com/avatar/cf33/1222/349451_large.png?m=1582965270", "created": 1536858134, "last_modified": 1582965270}, "last_reply_by": "carlmasayoshi", "last_touched": 1648469274, "title": "游戏本还是 switch", "url": "https://www.v2ex.com/t/843300", "created": 1648432967, "deleted": 0, "content": "目前手里有一个 mbp2020 日常使用，最近超级想玩游戏，正常快到生日，女朋友想给我买个 switch ，但是我很纠结要 switch 还是要一个游戏本。\n\n\n\n目前最想玩的游戏是使命召唤，不联机，只想从二战开始从头玩一遍剧情，除此之外目前想不起来有了游戏本还打算什么游戏，使用场景比较单一，不过这个游戏 switch 上没有...\n\n女朋友觉得买游戏本只为了打这一个游戏没必要，倾向于买 switch\n\n\n\n各位有什么建议么？ switch 上有类似的射击游戏么", "content_rendered": "目前手里有一个 mbp2020 日常使用，最近超级想玩游戏，正常快到生日，女朋友想给我买个 switch ，但是我很纠结要 switch 还是要一个游戏本。<br /><br /><br /><br />目前最想玩的游戏是使命召唤，不联机，只想从二战开始从头玩一遍剧情，除此之外目前想不起来有了游戏本还打算什么游戏，使用场景比较单一，不过这个游戏 switch 上没有...<br /><br />女朋友觉得买游戏本只为了打这一个游戏没必要，倾向于买 switch<br /><br /><br /><br />各位有什么建议么？ switch 上有类似的射击游戏么", "last_modified": 1648432967, "replies": 78, "id": 843300}, {"node": {"avatar_large": "/static/img/node_default_large.png", "name": "crypto", "avatar_normal": "/static/img/node_default_normal.png", "title": "加密货币", "url": "https://www.v2ex.com/go/crypto", "topics": 13, "footer": "", "header": "", "title_alternative": "Crypto", "avatar_mini": "/static/img/node_default_mini.png", "stars": 65, "aliases": [], "root": false, "id": 1113, "parent_node_name": "blockchain"}, "member": {"id": 570514, "username": "iGuChin", "url": "https://www.v2ex.com/u/iGuChin", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/e8634e41ceb1fd340b6bc8f7c4b14b7c?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/e8634e41ceb1fd340b6bc8f7c4b14b7c?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/e8634e41ceb1fd340b6bc8f7c4b14b7c?s=73&d=retro", "created": 1643376778, "last_modified": 1643376778}, "last_reply_by": "davidqw", "last_touched": 1648460420, "title": "最近显卡价格大降，买点来挖 ETC，会不会 49 年入国军？", "url": "https://www.v2ex.com/t/843248", "created": 1648391363, "deleted": 0, "content": "6 月份 ETH2.0 大概率没问题，那么问题来了，我买点在家里挖 ETC 是否可行？", "content_rendered": "<p>6 月份 ETH2.0 大概率没问题，那么问题来了，我买点在家里挖 ETC 是否可行？</p>\n", "last_modified": 1648457888, "replies": 71, "id": 843248}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c9f0/f895/8_large.png?m=1630643991", "name": "iphone", "avatar_normal": "https://cdn.v2ex.com/navatar/c9f0/f895/8_normal.png?m=1630643991", "title": "iPhone", "url": "https://www.v2ex.com/go/iphone", "topics": 9279, "footer": "这里绝不讨论如何获得 iPhone 盗版软件、iTunes 黑卡之类。", "header": "Say hello to the future.", "title_alternative": "iPhone", "avatar_mini": "https://cdn.v2ex.com/navatar/c9f0/f895/8_mini.png?m=1630643991", "stars": 2842, "aliases": [], "root": false, "id": 8, "parent_node_name": "apple"}, "member": {"id": 495791, "username": "Apple2023", "url": "https://www.v2ex.com/u/Apple2023", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/54c4/8265/495791_mini.png?m=1616120202", "avatar_normal": "https://cdn.v2ex.com/avatar/54c4/8265/495791_normal.png?m=1616120202", "avatar_large": "https://cdn.v2ex.com/avatar/54c4/8265/495791_large.png?m=1616120202", "created": 1592789519, "last_modified": 1616120202}, "last_reply_by": "sgiyy", "last_touched": 1648467086, "title": "从技术安全角度讲，你喜欢哪个？支付宝还是微信支付？", "url": "https://www.v2ex.com/t/843251", "created": 1648391643, "deleted": 0, "content": "个人主要用支付宝居多，微信偶尔小额付款\r\n\r\n微信的风控做的很一般（个人见解）", "content_rendered": "<p>个人主要用支付宝居多，微信偶尔小额付款</p>\n<p>微信的风控做的很一般（个人见解）</p>\n", "last_modified": 1648391643, "replies": 59, "id": 843251}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_large.png?m=1648291943", "name": "career", "avatar_normal": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_normal.png?m=1648291943", "title": "职场话题", "url": "https://www.v2ex.com/go/career", "topics": 12887, "footer": "", "header": "这里，我们聊聊那些工作中遇到的开心和不开心的事。", "title_alternative": "Career", "avatar_mini": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_mini.png?m=1648291943", "stars": 2301, "aliases": [], "root": false, "id": 770, "parent_node_name": "work"}, "member": {"id": 346240, "username": "supuwoerc", "url": "https://www.v2ex.com/u/supuwoerc", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "北京", "tagline": "", "bio": "beijingbeijing", "avatar_mini": "https://cdn.v2ex.com/avatar/3da5/e050/346240_mini.png?m=1636336558", "avatar_normal": "https://cdn.v2ex.com/avatar/3da5/e050/346240_normal.png?m=1636336558", "avatar_large": "https://cdn.v2ex.com/avatar/3da5/e050/346240_large.png?m=1636336558", "created": 1535763740, "last_modified": 1636336558}, "last_reply_by": "coeru", "last_touched": 1648466946, "title": "如何感谢 HR", "url": "https://www.v2ex.com/t/843295", "created": 1648432478, "deleted": 0, "content": "事情是这样的，本人刚刚入职一家中厂，然后最后一面 HR 面试问我期望薪资，我说了我的期望，隔了两个小时 HR 回复说她帮我多争取了 2K ，然后还说了她是我老乡，虽然不是一个市，但是是一个省的~\r\n\r\n还推荐我以后怎么落户买房啥的，聊的很家常~\r\n\r\n今天入职，虽然在家远程，想着疫情过去，到公司办公的时候如何感谢下她帮助我的这件事...", "content_rendered": "事情是这样的，本人刚刚入职一家中厂，然后最后一面 HR 面试问我期望薪资，我说了我的期望，隔了两个小时 HR 回复说她帮我多争取了 2K ，然后还说了她是我老乡，虽然不是一个市，但是是一个省的~<br /><br />还推荐我以后怎么落户买房啥的，聊的很家常~<br /><br />今天入职，虽然在家远程，想着疫情过去，到公司办公的时候如何感谢下她帮助我的这件事...", "last_modified": 1648457922, "replies": 58, "id": 843295}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/0f84/0be9/959_large.png?m=1599117046", "name": "switch", "avatar_normal": "https://cdn.v2ex.com/navatar/0f84/0be9/959_normal.png?m=1599117046", "title": "Nintendo Switch", "url": "https://www.v2ex.com/go/switch", "topics": 383, "footer": "", "header": "任天堂 Switch（日语：ニンテンドースイッチ，英语：Nintendo Switch）是日本任天堂公司出品的电子游戏机，于 2017 年 3 月 3 日开始发售。", "title_alternative": "Nintendo Switch", "avatar_mini": "https://cdn.v2ex.com/navatar/0f84/0be9/959_mini.png?m=1599117046", "stars": 1189, "aliases": [], "root": false, "id": 959, "parent_node_name": "consoles"}, "member": {"id": 399249, "username": "byasm32", "url": "https://www.v2ex.com/u/byasm32", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/4a24/ace2/399249_mini.png?m=1645664412", "avatar_normal": "https://cdn.v2ex.com/avatar/4a24/ace2/399249_normal.png?m=1645664412", "avatar_large": "https://cdn.v2ex.com/avatar/4a24/ace2/399249_large.png?m=1645664412", "avatar_xlarge": "https://cdn.v2ex.com/avatar/4a24/ace2/399249_xlarge.png?m=1645664412", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/4a24/ace2/399249_xlarge.png?m=1645664412", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/4a24/ace2/399249_xlarge.png?m=1645664412", "created": 1554631026, "last_modified": 1645664412}, "last_reply_by": "seaswalker", "last_touched": 1648466721, "title": "想入坑塞尔达", "url": "https://www.v2ex.com/t/843317", "created": 1648435809, "deleted": 0, "content": "新手，以前从来没玩过塞尔达\r\n前阵子搞了个 switch ，请问什么姿势入坑比较合适？\r\n或者说先玩哪个版本？直接上旷野之息？\r\n\r\n谢谢各位彦祖", "content_rendered": "<p>新手，以前从来没玩过塞尔达\n前阵子搞了个 switch ，请问什么姿势入坑比较合适？\n或者说先玩哪个版本？直接上旷野之息？</p>\n<p>谢谢各位彦祖</p>\n", "last_modified": 1648435809, "replies": 53, "id": 843317}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c9f0/f895/8_large.png?m=1630643991", "name": "iphone", "avatar_normal": "https://cdn.v2ex.com/navatar/c9f0/f895/8_normal.png?m=1630643991", "title": "iPhone", "url": "https://www.v2ex.com/go/iphone", "topics": 9279, "footer": "这里绝不讨论如何获得 iPhone 盗版软件、iTunes 黑卡之类。", "header": "Say hello to the future.", "title_alternative": "iPhone", "avatar_mini": "https://cdn.v2ex.com/navatar/c9f0/f895/8_mini.png?m=1630643991", "stars": 2842, "aliases": [], "root": false, "id": 8, "parent_node_name": "apple"}, "member": {"id": 382760, "username": "rophie123", "url": "https://www.v2ex.com/u/rophie123", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/5c8d369b073fddd235c018d1235eae31?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/5c8d369b073fddd235c018d1235eae31?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/5c8d369b073fddd235c018d1235eae31?s=73&d=retro", "created": 1549801485, "last_modified": 1640050487}, "last_reply_by": "eokrnmk", "last_touched": 1648468009, "title": "se3 价格如瀑布", "url": "https://www.v2ex.com/t/843297", "created": 1648432553, "deleted": 0, "content": "原价入的，现在 pdd 已经补贴 800 了，不能看 :joy:", "content_rendered": "<p>原价入的，现在 pdd 已经补贴 800 了，不能看 :joy:</p>\n", "last_modified": 1648432568, "replies": 52, "id": 843297}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/ede7/e2b6/867_large.png?m=1646717416", "name": "vscode", "avatar_normal": "https://cdn.v2ex.com/navatar/ede7/e2b6/867_normal.png?m=1646717416", "title": "Visual Studio Code", "url": "https://www.v2ex.com/go/vscode", "topics": 499, "footer": "", "header": "来自 <a href=\"/go/microsoft\">Microsoft</a> 的全新代码编辑器", "title_alternative": "Visual Studio Code", "avatar_mini": "https://cdn.v2ex.com/navatar/ede7/e2b6/867_mini.png?m=1646717416", "stars": 566, "aliases": [], "root": false, "id": 867, "parent_node_name": "editors"}, "member": {"id": 376391, "username": "YuTengjing", "url": "https://www.v2ex.com/u/YuTengjing", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/7773/ca99/376391_mini.png?m=1648388851", "avatar_normal": "https://cdn.v2ex.com/avatar/7773/ca99/376391_normal.png?m=1648388851", "avatar_large": "https://cdn.v2ex.com/avatar/7773/ca99/376391_large.png?m=1648388851", "created": 1547031538, "last_modified": 1648388851}, "last_reply_by": "hldnpqzzy", "last_touched": 1648468335, "title": "VSCode 又酷又实用的多光标编辑", "url": "https://www.v2ex.com/t/843239", "created": 1648389270, "deleted": 0, "content": "如果要说 VSCode 哪个特性极大的提高了编码效率，多光标编辑绝对是其中之一。多光标编辑让我们避免重复进行相同的文本操作，VSCode 内建的和第三方扩展提供的文本处理命令更是能极大的增强多光标编辑的灵活性。希望通过阅读这篇文章，能够教会读者如何在日常编辑中灵活运用多光标编辑。\r\n\r\n内容大纲：\r\n\r\n- 如何添加多光标\r\n- 移动光标\r\n- 选中文本\r\n- 删除文本\r\n- 文本处理命令\r\n- 多光标实战示例\r\n- 多光标编辑外更好的选择\r\n\r\n## 如何添加多光标\r\n\r\n### 通用的方法\r\n\r\n按住 ⌥ 键不放，再将光标移动到任何你想添加光标的地方直接点击就会增加一个光标。\r\n\r\n![通用的方法]( https://s2.loli.net/2022/03/26/e5Bybvk9nurJqSc.gif)\r\n\r\n### 添加光标的快捷键\r\n\r\n> VSCode 中和光标相关的快捷键中都有 ⌥ 键\r\n\r\n我们可以通过 ⌘+K, ⌘+S 快捷键组合打开 VSCode 快捷键表，搜索 `cursor` 会列出所有和光标有关的快捷键，搜索 `add cursor` 就可以查看和 `添加光标` 相关的快捷键：\r\n\r\n![VSCode 添加多光标快捷键.png]( https://s2.loli.net/2022/03/27/oUiHwexWBvOy8RP.png)\r\n\r\n同一列添加光标：\r\n\r\n- ⌘+⌥+↓: 在下一行同一列添加光标\r\n- ⌘+⌥+↑: 在上一行同一列添加光标\r\n\r\n![同一列添加光标演示]( https://s1.ax1x.com/2022/03/27/qB3ynS.gif)\r\n\r\n### 添加选区\r\n\r\nVSCode 编辑器中可以同时存在多个光标，也可以同时存在多个选区。在 VSCode 中大多数添加选区的命令，添加选区的同时也会添加一个光标。因此我们可以利用添加选区的快捷键来添加多光标。\r\n\r\n常用的有：\r\n\r\n- ⌘+D：添加选区到下一个查找到的匹配，如果匹配到多个，每触发一次就多添加一个\r\n- ⌘+⇧+L: 添加选区到所有查找到的匹配\r\n\r\n![添加选区]( https://s1.ax1x.com/2022/03/27/qB3c7Q.gif)\r\n\r\n上面两个快捷键虽然是说查到到的匹配，实际上使用的时候并不会展开搜索框。\r\n\r\nVSCode 提供的命令很多时候是满足对称性的，例如 ⌘+D 是添加选区到下一个查找到匹配，那么大概率就会有一个命令用于添加选区到前一个查到到的匹配。\r\n\r\n![添加选区快捷键]( https://s2.loli.net/2022/03/26/tpfR7xWMGKO8cmD.png)\r\n\r\n如过要查找的文本比较复杂，我们可以直接先打开搜索，利用搜索框提供的 `大小写忽略`，`匹配整个单词`，`正则` 功能来查找复杂的文本，再使用 ⌘+⇧+L 来选中所有。\r\n\r\n![通过搜索来添加选区]( https://s2.loli.net/2022/03/26/sIfcbknyrYqHu7j.gif)\r\n\r\n**如果已经有一个选区**，我们可以使用快捷键 ⌥+⇧+I 来在选区的所有行尾添加光标。如果这个时候你想将光标移动到行首，直接输入 `Home` 键即可。\r\n\r\n下面的例子就是先选中多行，再将光标添加到所有行的行尾，将 TypeScript 的 interface 改成使用逗号来分隔属性：\r\n\r\n![添加光标到选区行尾]( https://s1.ax1x.com/2022/03/27/qB3mTJ.gif)\r\n\r\n## 光标移动\r\n\r\n多光标编辑的时候显然是不能使用鼠标定位的，这就要求我们使用按键去移动。最基本的上下左右四个箭头，Home, End 键就不用多说了。除此之外，常用的还有每次移动一个单词，或者单词的一部分。\r\n\r\n通过搜索 `cursor right`，`cursor end` 之类的可以查看和移动光标相关的快捷键：\r\n\r\n![cursor right]( https://s2.loli.net/2022/03/26/Cu3JZXQE5kPdTpt.png)\r\n\r\n单词级别的移动是非常常用的：\r\n\r\n- ⌥+→：向右移动光标到下一个词尾\r\n- ^+⌥+→：向右移动光标到单词的下一部分，驼峰，词首和词尾都是停留点\r\n\r\n![移动一个单词]( https://s2.loli.net/2022/03/27/H8a1CgQyIMo96PX.gif)\r\n\r\n之前说过 VSCode 命令的对称式设计，⌥+→ 是向右移动到下一个词尾，那么 ⌥ + ← 就是向左移动上一个词首。\r\n\r\n而且这里也验证了之前我们说的，和光标相关的快捷键都有 ⌥。所以我们自定义快捷键时，和光标相关的快捷键最好也带上 ⌥。例如可以定义 ⌥+J 为移动到上一个 git change 处，再对称式设计 ⌥+K 移动到下一个 git change 处。方便记忆，也方便搜索。\r\n\r\n有些 Mac 用户可能会觉得光标移动太慢，这个可以在 `设置` -> `键盘`中调节，让光标移动的更丝滑：\r\n\r\n![按键重复]( https://s2.loli.net/2022/03/27/VIFTDUeOj3xhWub.png)\r\n\r\n- 拖移 `重复前延迟` 滑块以设置字符开始重复前的等待时间。\r\n- 拖移 `按键重复` 滑块以设置字符重复的速率。\r\n\r\n建议把 `按键重复` 速度**调快**，这样光标移动就会更快更丝滑。\r\n\r\n## 选中文本\r\n\r\n在多光标编辑时，最常见操作便是移动，选中，删除，插入等。\r\n\r\n> 移动光标的快捷键加上 ⇧ 就是选中**移动区域**的快捷键\r\n\r\n稍微列举几个例子验证这个规律：\r\n\r\n- → 是向右移动一个字符，⇧+→ 可以向右选中下一个字符\r\n- ↑ 是向上移动一行，⇧+↑ 就是向上选中一行\r\n- ⌥+→ 是向右移动到词尾, ⇧+⌥+→ 就是选中光标当前位置到下一个词尾\r\n- ^+⌥+→ 是向右移动到单词的下一部分, ⇧+^+⌥+→ 就是向右选中单词的一部分\r\n\r\n![向右选中一个单词]( https://s1.ax1x.com/2022/03/27/qB89BD.gif)\r\n\r\n有个需要单独介绍的选中命令是 `smart select`。我们知道快捷键 `cmd + D` 可以选中一个单词，但如果想选中一个字符串它就不行了，这个时候可以就可以用智能选中来实现。\r\n\r\n- ^+⇧+→：扩大选中范围\r\n- ^+⇧+←：减小选中范围\r\n\r\n![smart select]( https://s2.loli.net/2022/03/27/ZrVjpihockGnUsq.gif)\r\n\r\n最近 antfu 有写一个用双击来智能选中文本的扩展，虽然和多光标编辑没啥关系，不过感兴趣的读者可以体验一下：**[vscode-smart-clicks]( https://github.com/antfu/vscode-smart-clicks)**。\r\n\r\n## 删除文本\r\n\r\n> 移动光标的快捷键加上 ⌫ 键就是**向左**删除光标移动区域的快捷键，加上 fn + ⌫ 就是**向右**删除光标移动区域的快捷键\r\n\r\nMac 上 ⌘+→ 表示 `End` 键，⌘+← 表示 `Home` 键，fn + ⌫ 表示 `Delete` 键这个规则应该是所有应用都通用的。\r\n\r\n- ⌥+⌫: 向左删除到词首\r\n- ^ + ⌥+⌫: 向左删除词的一部分\r\n\r\n因为 Backspace 本身就带有方向性，因此快捷键里面不需要搭配方向键。\r\n\r\n## 文本处理命令\r\n\r\n在多光标编辑时我们可以借助 VSCode 自带的或者第三方扩展提供的命令来快捷插入特定文本或者将选中文本转换成特定文本。\r\n\r\nVSCode 内置的有下面几个，以单词 `letterCase` 举例，转换结果分别为：\r\n\r\n- Transform to Uppercase：`LETTERCASE`\r\n- Transform to Lowercase：`lettercase`\r\n- Transform to Title Case：`LetterCase`\r\n- Transform to Snake Case：`letter_case`\r\n\r\n搜索 `transform to` 就可以找到所有文本转换命令了\r\n\r\n![VSCode 内置文本命令]( https://s2.loli.net/2022/03/27/oZq4289Ehf5tyBu.png)\r\n\r\n举个实际的使用例子，例如我们要把一堆原本是小驼峰的常量改成全大写：\r\n\r\n![转换常量为全大写]( https://s2.loli.net/2022/03/27/kixECvjdOuzI8sn.gif)\r\n\r\n除了 VSCode 内置的文本处理命令，还可以借助第三方插件，这里推荐：[Text Power Tools]( https://github.com/qcz/vscode-text-power-tools)。推荐理由：维护积极，功能丰富。\r\n\r\n功能非常多，读者可以查看扩展主页自行了解。我觉得如果你没有探索精神和折腾的能力估计也看不到文章这里了。我这里只演示一下插入数字的功能：\r\n\r\n![插入数字]( https://s2.loli.net/2022/03/27/xVEdyK8uoGqQbOj.gif)\r\n\r\n有能力的读者也可以自己编写 VSCode 扩展去实现更多的插入，转换，甚至删除等文本处理命令。需要注意的是实现的时候要处理所有选中，例如笔者的 VSCode 扩展 [VSCode FE Helper]( https://github.com/tjx666/vscode-fe-helper) 实现的将选中单词变复数的扩展是下面这样实现的。代码很简单。可以注意到里面遍历了所有选区，所以在多光标编辑时调用这个命令时能够处理所有选中：\r\n\r\n```typescript\r\nimport { TextEditor } from 'vscode';\r\n\r\nexport default async function plur(editor: TextEditor): Promise<void> {\r\n  const { default: pluralize } = await import('pluralize');\r\n  editor.edit((editorBuilder) => {\r\n    const { document, selections } = editor;\r\n    for (const selection of selections) {\r\n      const word = document.getText(selection);\r\n      const pluralizedWord = pluralize(word);\r\n      editorBuilder.replace(selection, pluralizedWord);\r\n    }\r\n  });\r\n}\r\n```\r\n\r\n![pluralize]( https://s2.loli.net/2022/03/27/Uo5AYIL6t9gr4Gx.gif)\r\n\r\n## 多光标实战示例\r\n\r\n接下来我会演示几个我平时用到多光标的几个例子。对于不熟悉多光标编辑的朋友可能看着会有点复杂，不过自己实操一遍多练练应该就没问题。我平时开发的时候经常会用到多光标编辑，但没有文中演示的那么丝滑，可能步骤也不是最少的，但还是比重复编辑效率高多了。也会经常输错，但是没关系反正可以撤回嘛。\r\n\r\n### 替换 var\r\n\r\n众所周知，当你学会了 ctrl + c, ctrl + v ，你已经是个初级程序员了。当你不但能够抄代码还能够改别人的代码，那么你已经是个成熟的程序员了。学会了多光标编辑，可以大大提高那我们修改代码的效率。\r\n\r\n当我们从 stackoverflow 抄了一段 JS 代码下来，可能里面有很多 var ，我们可以利用多光标编辑来将所有 var 替换成 let 。\r\n\r\nSteps:\r\n\r\n1. 将光标定到 var 上\r\n2. ⌘+⇧+L ，来选中所有 var\r\n3. 输入 let\r\n\r\n![替换 var]( https://s2.loli.net/2022/03/27/z9DTBNwlXCMojYJ.gif)\r\n\r\n### 安装多个 node package\r\n\r\n有时新开了一个项目，我会需要安装很多 eslint 插件。最开始我的做法是是到之前项目的 package.json 中把包名一个一个抄过来，那太麻烦了。有人说，你咋不直接把包名和版本号一块复制到新项目的 package.json 就好了，不那样做主要是之前项目的包版本号不一定是最新的，新项目需要安装最新的版本。\r\n\r\nSteps:\r\n\r\n1. 打开 package.json ，把光标定到第一个包名\r\n2. ⌘+Alt+↓ 添加多个光标到多个包名\r\n3. ^+⇧+→，利用 `smart select` 选中包名并 ⌘+C 复制\r\n4. ⌘+N ，新建一个临时文件，⌘+V 粘贴过去\r\n5. 把光标定到第二行的行首，⌘+Alt+↓ 往下面同一列添加多光标\r\n6. 先 ⌫，再敲一个空格就可以把整个文本复制到 terminal 了\r\n\r\n![安装多个 node package]( https://s2.loli.net/2022/03/27/fLGTtunjhi6pmd9.gif)\r\n\r\n### 重构 react router path 为枚举\r\n\r\n原代码：\r\n\r\n```typescript\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <Routes>\r\n        <Route index element={<Home />} />\r\n        <Route path=\"/settings\" element={<Settings />} />\r\n        <Route path=\"/collection\" element={<Collection />} />\r\n        <Route path=\"/notFound\" element={<NotFound />} />\r\n      </Routes>\r\n    </HashRouter>\r\n  );\r\n}\r\n```\r\n\r\n将原本字符串形式的路由重构为枚举类型：\r\n\r\n```typescript\r\nexport function App() {\r\n  return (\r\n    <HashRouter>\r\n      <Routes>\r\n        <Route index element={<Home />} />\r\n        <Route path={RoutePath.Settings} element={<Settings />} />\r\n        <Route path={RoutePath.Collection} element={<Collection />} />\r\n        <Route path={RoutePath.NotFound} element={<NotFound />} />\r\n      </Routes>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nenum RoutePath {\r\n  Settings = '/settings',\r\n  Collection = '/collection',\r\n  NotFound = '/notFound',\r\n}\r\n```\r\n\r\n挑选这个例子主要是因为操作过程中用到了文本处理命令来处理大小写问题，由于步骤太多，大家就直接看动图演示吧：\r\n\r\n![重构 react route path]( https://s2.loli.net/2022/03/27/Ri9qLBJkE8bf63A.gif)\r\n\r\n### 实现 LetterMapper 类型\r\n\r\n在我 [TypeScript 类型体操实例解析]( https://github.com/tjx666/blog/blob/main/src/TS%20%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%E5%AE%9E%E4%BE%8B%E8%A7%A3%E6%9E%90.md) 这篇文章中有实现过一个将字符串字面量类型中所有字符转换成大写的类型：\r\n\r\n```typescript\r\ntype LetterMapper = {\r\n  a: 'A';\r\n  b: 'B';\r\n  c: 'C';\r\n  d: 'D';\r\n  e: 'E';\r\n  f: 'F';\r\n  g: 'G';\r\n  h: 'H';\r\n  i: 'I';\r\n  j: 'J';\r\n  k: 'K';\r\n  l: 'L';\r\n  m: 'M';\r\n  n: 'N';\r\n  o: 'O';\r\n  p: 'P';\r\n  q: 'Q';\r\n  r: 'R';\r\n  s: 'S';\r\n  t: 'T';\r\n  u: 'U';\r\n  v: 'V';\r\n  w: 'W';\r\n  x: 'X';\r\n  y: 'Y';\r\n  z: 'Z';\r\n};\r\n\r\ntype CapitalFirstLetter<S extends string> = S extends `${infer First}${infer Rest}`\r\n  ? First extends keyof LetterMapper\r\n    ? `${LetterMapper[First]}${Rest}`\r\n    : S\r\n  : S;\r\n```\r\n\r\n这个 `LetterMapper` 类型手敲会觉得很浪费光阴，让我们用多光标编辑酷炫的实现它：\r\n\r\n![Letter Mapper]( https://s2.loli.net/2022/03/27/pA8dDa7h3zcKYIJ.gif)\r\n\r\n## 多光标编辑之外的选择\r\n\r\nVSCode 作为编辑器界的新生代王者，集百家之众长，除了多光标编辑还有很多可以提高编码和重构效率的特性。例如：\r\n\r\n- F2 重命名符号，批量替换变量名可以的话就不要用多光标编辑\r\n- Snippets ，曾经在 twitter 看到有人发帖说写了一下午的 react 组件，结果人家一个 snippet 就整完了\r\n- Code Actions On Save ，在保存文件的时候自动添加缺失的 imports ，格式化，lint 的 auto fix 等\r\n- Auto fix 和 fix all ，如果你用了自动保存就不能用 Code Actions On Save 了，不过你可以手动调用自动修复和修复所有\r\n- 各种格式化扩展，例如使用 prettier 格式化代码风格，[JS/TS Import/Export Sorter]( https://marketplace.visualstudio.com/items?itemName=dozerg.tsimportsorter) 格式化 imports\r\n\r\n等等。作为一个 VSCode 老玩家，我都觉得 VSCode 还有很多使用的功能特性地方我没探索到。众所周知，折腾编辑器，折腾 shell ，折腾系统，是程序员的三大乐趣。充满未知才会有趣，才能让我们热此不疲，让我们每一次发现新大陆的时候感叹自己以前的无知。\r\n\r\n## 总结\r\n\r\n多光标编辑是 VSCode 一个非常实用的特性，熟练掌握光标的移动，选中，删除和一些常用的文本处理命令可以让我们使用多光标编辑时更加得心应手。VSCode 的快捷键设计有它的一套自己的设计哲学，理解它不但有助于我们记忆快捷键，也便于在快捷键表中搜索。在我们自定义快捷键或者编写扩展的提供默认快捷键的时候也应该要参考这套哲学。当你觉得对下前编码重构的效率不满意时，不妨折腾下编辑器，也许能够带给你意外的惊喜。\r\n\r\n本文完。\r\n\r\n首发于我的 [blog 仓库]( https://github.com/tjx666/blog)，未经本人允许，禁止转载。", "content_rendered": "<p>如果要说 VSCode 哪个特性极大的提高了编码效率，多光标编辑绝对是其中之一。多光标编辑让我们避免重复进行相同的文本操作，VSCode 内建的和第三方扩展提供的文本处理命令更是能极大的增强多光标编辑的灵活性。希望通过阅读这篇文章，能够教会读者如何在日常编辑中灵活运用多光标编辑。</p>\n<p>内容大纲：</p>\n<ul>\n<li>如何添加多光标</li>\n<li>移动光标</li>\n<li>选中文本</li>\n<li>删除文本</li>\n<li>文本处理命令</li>\n<li>多光标实战示例</li>\n<li>多光标编辑外更好的选择</li>\n</ul>\n<h2>如何添加多光标</h2>\n<h3>通用的方法</h3>\n<p>按住 ⌥ 键不放，再将光标移动到任何你想添加光标的地方直接点击就会增加一个光标。</p>\n<p><img alt=\"通用的方法\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/26/e5Bybvk9nurJqSc.gif\"/></p>\n<h3>添加光标的快捷键</h3>\n<blockquote>\n<p>VSCode 中和光标相关的快捷键中都有 ⌥ 键</p>\n</blockquote>\n<p>我们可以通过 ⌘+K, ⌘+S 快捷键组合打开 VSCode 快捷键表，搜索 <code>cursor</code> 会列出所有和光标有关的快捷键，搜索 <code>add cursor</code> 就可以查看和 <code>添加光标</code> 相关的快捷键：</p>\n<p><img alt=\"VSCode 添加多光标快捷键.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/oUiHwexWBvOy8RP.png\"/></p>\n<p>同一列添加光标：</p>\n<ul>\n<li>⌘+⌥+↓: 在下一行同一列添加光标</li>\n<li>⌘+⌥+↑: 在上一行同一列添加光标</li>\n</ul>\n<p><img alt=\"同一列添加光标演示\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s1.ax1x.com/2022/03/27/qB3ynS.gif\"/></p>\n<h3>添加选区</h3>\n<p>VSCode 编辑器中可以同时存在多个光标，也可以同时存在多个选区。在 VSCode 中大多数添加选区的命令，添加选区的同时也会添加一个光标。因此我们可以利用添加选区的快捷键来添加多光标。</p>\n<p>常用的有：</p>\n<ul>\n<li>⌘+D：添加选区到下一个查找到的匹配，如果匹配到多个，每触发一次就多添加一个</li>\n<li>⌘+⇧+L: 添加选区到所有查找到的匹配</li>\n</ul>\n<p><img alt=\"添加选区\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s1.ax1x.com/2022/03/27/qB3c7Q.gif\"/></p>\n<p>上面两个快捷键虽然是说查到到的匹配，实际上使用的时候并不会展开搜索框。</p>\n<p>VSCode 提供的命令很多时候是满足对称性的，例如 ⌘+D 是添加选区到下一个查找到匹配，那么大概率就会有一个命令用于添加选区到前一个查到到的匹配。</p>\n<p><img alt=\"添加选区快捷键\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/26/tpfR7xWMGKO8cmD.png\"/></p>\n<p>如过要查找的文本比较复杂，我们可以直接先打开搜索，利用搜索框提供的 <code>大小写忽略</code>，<code>匹配整个单词</code>，<code>正则</code> 功能来查找复杂的文本，再使用 ⌘+⇧+L 来选中所有。</p>\n<p><img alt=\"通过搜索来添加选区\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/26/sIfcbknyrYqHu7j.gif\"/></p>\n<p><strong>如果已经有一个选区</strong>，我们可以使用快捷键 ⌥+⇧+I 来在选区的所有行尾添加光标。如果这个时候你想将光标移动到行首，直接输入 <code>Home</code> 键即可。</p>\n<p>下面的例子就是先选中多行，再将光标添加到所有行的行尾，将 TypeScript 的 interface 改成使用逗号来分隔属性：</p>\n<p><img alt=\"添加光标到选区行尾\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s1.ax1x.com/2022/03/27/qB3mTJ.gif\"/></p>\n<h2>光标移动</h2>\n<p>多光标编辑的时候显然是不能使用鼠标定位的，这就要求我们使用按键去移动。最基本的上下左右四个箭头，Home, End 键就不用多说了。除此之外，常用的还有每次移动一个单词，或者单词的一部分。</p>\n<p>通过搜索 <code>cursor right</code>，<code>cursor end</code> 之类的可以查看和移动光标相关的快捷键：</p>\n<p><img alt=\"cursor right\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/26/Cu3JZXQE5kPdTpt.png\"/></p>\n<p>单词级别的移动是非常常用的：</p>\n<ul>\n<li>⌥+→：向右移动光标到下一个词尾</li>\n<li>^+⌥+→：向右移动光标到单词的下一部分，驼峰，词首和词尾都是停留点</li>\n</ul>\n<p><img alt=\"移动一个单词\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/H8a1CgQyIMo96PX.gif\"/></p>\n<p>之前说过 VSCode 命令的对称式设计，⌥+→ 是向右移动到下一个词尾，那么 ⌥ + ← 就是向左移动上一个词首。</p>\n<p>而且这里也验证了之前我们说的，和光标相关的快捷键都有 ⌥。所以我们自定义快捷键时，和光标相关的快捷键最好也带上 ⌥。例如可以定义 ⌥+J 为移动到上一个 git change 处，再对称式设计 ⌥+K 移动到下一个 git change 处。方便记忆，也方便搜索。</p>\n<p>有些 Mac 用户可能会觉得光标移动太慢，这个可以在 <code>设置</code> -&gt; <code>键盘</code>中调节，让光标移动的更丝滑：</p>\n<p><img alt=\"按键重复\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/VIFTDUeOj3xhWub.png\"/></p>\n<ul>\n<li>拖移 <code>重复前延迟</code> 滑块以设置字符开始重复前的等待时间。</li>\n<li>拖移 <code>按键重复</code> 滑块以设置字符重复的速率。</li>\n</ul>\n<p>建议把 <code>按键重复</code> 速度<strong>调快</strong>，这样光标移动就会更快更丝滑。</p>\n<h2>选中文本</h2>\n<p>在多光标编辑时，最常见操作便是移动，选中，删除，插入等。</p>\n<blockquote>\n<p>移动光标的快捷键加上 ⇧ 就是选中<strong>移动区域</strong>的快捷键</p>\n</blockquote>\n<p>稍微列举几个例子验证这个规律：</p>\n<ul>\n<li>→ 是向右移动一个字符，⇧+→ 可以向右选中下一个字符</li>\n<li>↑ 是向上移动一行，⇧+↑ 就是向上选中一行</li>\n<li>⌥+→ 是向右移动到词尾, ⇧+⌥+→ 就是选中光标当前位置到下一个词尾</li>\n<li>^+⌥+→ 是向右移动到单词的下一部分, ⇧+^+⌥+→ 就是向右选中单词的一部分</li>\n</ul>\n<p><img alt=\"向右选中一个单词\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s1.ax1x.com/2022/03/27/qB89BD.gif\"/></p>\n<p>有个需要单独介绍的选中命令是 <code>smart select</code>。我们知道快捷键 <code>cmd + D</code> 可以选中一个单词，但如果想选中一个字符串它就不行了，这个时候可以就可以用智能选中来实现。</p>\n<ul>\n<li>^+⇧+→：扩大选中范围</li>\n<li>^+⇧+←：减小选中范围</li>\n</ul>\n<p><img alt=\"smart select\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/ZrVjpihockGnUsq.gif\"/></p>\n<p>最近 antfu 有写一个用双击来智能选中文本的扩展，虽然和多光标编辑没啥关系，不过感兴趣的读者可以体验一下：**<a href=\"https://github.com/antfu/vscode-smart-clicks\" rel=\"nofollow\">vscode-smart-clicks</a>**。</p>\n<h2>删除文本</h2>\n<blockquote>\n<p>移动光标的快捷键加上 ⌫ 键就是<strong>向左</strong>删除光标移动区域的快捷键，加上 fn + ⌫ 就是<strong>向右</strong>删除光标移动区域的快捷键</p>\n</blockquote>\n<p>Mac 上 ⌘+→ 表示 <code>End</code> 键，⌘+← 表示 <code>Home</code> 键，fn + ⌫ 表示 <code>Delete</code> 键这个规则应该是所有应用都通用的。</p>\n<ul>\n<li>⌥+⌫: 向左删除到词首</li>\n<li>^ + ⌥+⌫: 向左删除词的一部分</li>\n</ul>\n<p>因为 Backspace 本身就带有方向性，因此快捷键里面不需要搭配方向键。</p>\n<h2>文本处理命令</h2>\n<p>在多光标编辑时我们可以借助 VSCode 自带的或者第三方扩展提供的命令来快捷插入特定文本或者将选中文本转换成特定文本。</p>\n<p>VSCode 内置的有下面几个，以单词 <code>letterCase</code> 举例，转换结果分别为：</p>\n<ul>\n<li>Transform to Uppercase：<code>LETTERCASE</code></li>\n<li>Transform to Lowercase：<code>lettercase</code></li>\n<li>Transform to Title Case：<code>LetterCase</code></li>\n<li>Transform to Snake Case：<code>letter_case</code></li>\n</ul>\n<p>搜索 <code>transform to</code> 就可以找到所有文本转换命令了</p>\n<p><img alt=\"VSCode 内置文本命令\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/oZq4289Ehf5tyBu.png\"/></p>\n<p>举个实际的使用例子，例如我们要把一堆原本是小驼峰的常量改成全大写：</p>\n<p><img alt=\"转换常量为全大写\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/kixECvjdOuzI8sn.gif\"/></p>\n<p>除了 VSCode 内置的文本处理命令，还可以借助第三方插件，这里推荐：<a href=\"https://github.com/qcz/vscode-text-power-tools\" rel=\"nofollow\">Text Power Tools</a>。推荐理由：维护积极，功能丰富。</p>\n<p>功能非常多，读者可以查看扩展主页自行了解。我觉得如果你没有探索精神和折腾的能力估计也看不到文章这里了。我这里只演示一下插入数字的功能：</p>\n<p><img alt=\"插入数字\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/xVEdyK8uoGqQbOj.gif\"/></p>\n<p>有能力的读者也可以自己编写 VSCode 扩展去实现更多的插入，转换，甚至删除等文本处理命令。需要注意的是实现的时候要处理所有选中，例如笔者的 VSCode 扩展 <a href=\"https://github.com/tjx666/vscode-fe-helper\" rel=\"nofollow\">VSCode FE Helper</a> 实现的将选中单词变复数的扩展是下面这样实现的。代码很简单。可以注意到里面遍历了所有选区，所以在多光标编辑时调用这个命令时能够处理所有选中：</p>\n<pre><code class=\"language-typescript\">import { TextEditor } from 'vscode';\n\nexport default async function plur(editor: TextEditor): Promise&lt;void&gt; {\n  const { default: pluralize } = await import('pluralize');\n  editor.edit((editorBuilder) =&gt; {\n    const { document, selections } = editor;\n    for (const selection of selections) {\n      const word = document.getText(selection);\n      const pluralizedWord = pluralize(word);\n      editorBuilder.replace(selection, pluralizedWord);\n    }\n  });\n}\n</code></pre>\n<p><img alt=\"pluralize\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/Uo5AYIL6t9gr4Gx.gif\"/></p>\n<h2>多光标实战示例</h2>\n<p>接下来我会演示几个我平时用到多光标的几个例子。对于不熟悉多光标编辑的朋友可能看着会有点复杂，不过自己实操一遍多练练应该就没问题。我平时开发的时候经常会用到多光标编辑，但没有文中演示的那么丝滑，可能步骤也不是最少的，但还是比重复编辑效率高多了。也会经常输错，但是没关系反正可以撤回嘛。</p>\n<h3>替换 var</h3>\n<p>众所周知，当你学会了 ctrl + c, ctrl + v ，你已经是个初级程序员了。当你不但能够抄代码还能够改别人的代码，那么你已经是个成熟的程序员了。学会了多光标编辑，可以大大提高那我们修改代码的效率。</p>\n<p>当我们从 stackoverflow 抄了一段 JS 代码下来，可能里面有很多 var ，我们可以利用多光标编辑来将所有 var 替换成 let 。</p>\n<p>Steps:</p>\n<ol>\n<li>将光标定到 var 上</li>\n<li>⌘+⇧+L ，来选中所有 var</li>\n<li>输入 let</li>\n</ol>\n<p><img alt=\"替换 var\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/z9DTBNwlXCMojYJ.gif\"/></p>\n<h3>安装多个 node package</h3>\n<p>有时新开了一个项目，我会需要安装很多 eslint 插件。最开始我的做法是是到之前项目的 package.json 中把包名一个一个抄过来，那太麻烦了。有人说，你咋不直接把包名和版本号一块复制到新项目的 package.json 就好了，不那样做主要是之前项目的包版本号不一定是最新的，新项目需要安装最新的版本。</p>\n<p>Steps:</p>\n<ol>\n<li>打开 package.json ，把光标定到第一个包名</li>\n<li>⌘+Alt+↓ 添加多个光标到多个包名</li>\n<li>^+⇧+→，利用 <code>smart select</code> 选中包名并 ⌘+C 复制</li>\n<li>⌘+N ，新建一个临时文件，⌘+V 粘贴过去</li>\n<li>把光标定到第二行的行首，⌘+Alt+↓ 往下面同一列添加多光标</li>\n<li>先 ⌫，再敲一个空格就可以把整个文本复制到 terminal 了</li>\n</ol>\n<p><img alt=\"安装多个 node package\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/fLGTtunjhi6pmd9.gif\"/></p>\n<h3>重构 react router path 为枚举</h3>\n<p>原代码：</p>\n<pre><code class=\"language-typescript\">function App() {\n  return (\n    &lt;HashRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route index element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"/settings\" element={&lt;Settings /&gt;} /&gt;\n        &lt;Route path=\"/collection\" element={&lt;Collection /&gt;} /&gt;\n        &lt;Route path=\"/notFound\" element={&lt;NotFound /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/HashRouter&gt;\n  );\n}\n</code></pre>\n<p>将原本字符串形式的路由重构为枚举类型：</p>\n<pre><code class=\"language-typescript\">export function App() {\n  return (\n    &lt;HashRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route index element={&lt;Home /&gt;} /&gt;\n        &lt;Route path={RoutePath.Settings} element={&lt;Settings /&gt;} /&gt;\n        &lt;Route path={RoutePath.Collection} element={&lt;Collection /&gt;} /&gt;\n        &lt;Route path={RoutePath.NotFound} element={&lt;NotFound /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/HashRouter&gt;\n  );\n}\n\nenum RoutePath {\n  Settings = '/settings',\n  Collection = '/collection',\n  NotFound = '/notFound',\n}\n</code></pre>\n<p>挑选这个例子主要是因为操作过程中用到了文本处理命令来处理大小写问题，由于步骤太多，大家就直接看动图演示吧：</p>\n<p><img alt=\"重构 react route path\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/Ri9qLBJkE8bf63A.gif\"/></p>\n<h3>实现 LetterMapper 类型</h3>\n<p>在我 <a href=\"https://github.com/tjx666/blog/blob/main/src/TS%20%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%E5%AE%9E%E4%BE%8B%E8%A7%A3%E6%9E%90.md\" rel=\"nofollow\">TypeScript 类型体操实例解析</a> 这篇文章中有实现过一个将字符串字面量类型中所有字符转换成大写的类型：</p>\n<pre><code class=\"language-typescript\">type LetterMapper = {\n  a: 'A';\n  b: 'B';\n  c: 'C';\n  d: 'D';\n  e: 'E';\n  f: 'F';\n  g: 'G';\n  h: 'H';\n  i: 'I';\n  j: 'J';\n  k: 'K';\n  l: 'L';\n  m: 'M';\n  n: 'N';\n  o: 'O';\n  p: 'P';\n  q: 'Q';\n  r: 'R';\n  s: 'S';\n  t: 'T';\n  u: 'U';\n  v: 'V';\n  w: 'W';\n  x: 'X';\n  y: 'Y';\n  z: 'Z';\n};\n\ntype CapitalFirstLetter&lt;S extends string&gt; = S extends `${infer First}${infer Rest}`\n  ? First extends keyof LetterMapper\n    ? `${LetterMapper[First]}${Rest}`\n    : S\n  : S;\n</code></pre>\n<p>这个 <code>LetterMapper</code> 类型手敲会觉得很浪费光阴，让我们用多光标编辑酷炫的实现它：</p>\n<p><img alt=\"Letter Mapper\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://s2.loli.net/2022/03/27/pA8dDa7h3zcKYIJ.gif\"/></p>\n<h2>多光标编辑之外的选择</h2>\n<p>VSCode 作为编辑器界的新生代王者，集百家之众长，除了多光标编辑还有很多可以提高编码和重构效率的特性。例如：</p>\n<ul>\n<li>F2 重命名符号，批量替换变量名可以的话就不要用多光标编辑</li>\n<li>Snippets ，曾经在 twitter 看到有人发帖说写了一下午的 react 组件，结果人家一个 snippet 就整完了</li>\n<li>Code Actions On Save ，在保存文件的时候自动添加缺失的 imports ，格式化，lint 的 auto fix 等</li>\n<li>Auto fix 和 fix all ，如果你用了自动保存就不能用 Code Actions On Save 了，不过你可以手动调用自动修复和修复所有</li>\n<li>各种格式化扩展，例如使用 prettier 格式化代码风格，<a href=\"https://marketplace.visualstudio.com/items?itemName=dozerg.tsimportsorter\" rel=\"nofollow\">JS/TS Import/Export Sorter</a> 格式化 imports</li>\n</ul>\n<p>等等。作为一个 VSCode 老玩家，我都觉得 VSCode 还有很多使用的功能特性地方我没探索到。众所周知，折腾编辑器，折腾 shell ，折腾系统，是程序员的三大乐趣。充满未知才会有趣，才能让我们热此不疲，让我们每一次发现新大陆的时候感叹自己以前的无知。</p>\n<h2>总结</h2>\n<p>多光标编辑是 VSCode 一个非常实用的特性，熟练掌握光标的移动，选中，删除和一些常用的文本处理命令可以让我们使用多光标编辑时更加得心应手。VSCode 的快捷键设计有它的一套自己的设计哲学，理解它不但有助于我们记忆快捷键，也便于在快捷键表中搜索。在我们自定义快捷键或者编写扩展的提供默认快捷键的时候也应该要参考这套哲学。当你觉得对下前编码重构的效率不满意时，不妨折腾下编辑器，也许能够带给你意外的惊喜。</p>\n<p>本文完。</p>\n<p>首发于我的 <a href=\"https://github.com/tjx666/blog\" rel=\"nofollow\">blog 仓库</a>，未经本人允许，禁止转载。</p>\n", "last_modified": 1648389270, "replies": 52, "id": 843239}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 17979, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913", "stars": 2112, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"id": 251120, "username": "LxExExl", "url": "https://www.v2ex.com/u/LxExExl", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/3f95/618f/251120_mini.png?m=1643838644", "avatar_normal": "https://cdn.v2ex.com/avatar/3f95/618f/251120_normal.png?m=1643838644", "avatar_large": "https://cdn.v2ex.com/avatar/3f95/618f/251120_large.png?m=1643838644", "created": 1503883524, "last_modified": 1643838644}, "last_reply_by": "camillo", "last_touched": 1648468141, "title": "苹果店归来，试用了 display studio，买了 iPad Air", "url": "https://www.v2ex.com/t/843382", "created": 1648449847, "deleted": 0, "content": "这趟深度体验各种产品，因为店里实在人太多了，买个东西都要排队签到。\r\n\r\niPhone 13 vs iPhone 13 pro：给老婆选的。老婆试用了两者，我说重点体会刷新率，尤其是快速上下滑动网页。老婆说为啥要快速滑动，正常用不行吗？ 你说的这个 120hz 对我没什么用。选了 iPhone 13 。\r\n\r\nipad air vs ipad pro：还是提示了 x 刷新率和扬声器，老婆表示没区别没区别，能用笔画画就行。选了 ipad air 。期间看到了 ipad pro 12 寸的，老婆有点心动大尺寸。一看价格翻倍，瞬间劝退。\r\n\r\n\r\n我自己看 display studio ，店里正好有雾面和镜面两种：\r\n- 雾面的说实话和我的 27 寸 4K 相比，有肉眼可见的提升，我很动心。\r\n- 然而我发现旁边还有个镜面的！比雾面的相比有肉眼可见的提升。实在是太亮眼太清晰太晶莹了。\r\n\r\n我只能感慨苹果刀法精准。我下定决心买 1599 的，以为够用了。结果现在纠结要不要一步到位 1899 买镜面的。\r\n\r\n好在镜面雾面都没货。还能继续纠结一个月。我现在开始怀疑如果买雾面的，会不会和 27 寸 4k 也没大区别。因为左右对比的时候，雾面明显出现了模糊和混沌的感觉，就像我在家用 4k 27 寸感受到的模糊和混沌。 而镜面的一如 iMac 一样晶莹剔透。\r\n\r\n然而 iMac 外观太丑，下面那个大下巴接受不能。也没法当外界显示器。我再次感慨苹果真是刀法精准。", "content_rendered": "<p>这趟深度体验各种产品，因为店里实在人太多了，买个东西都要排队签到。</p>\n<p>iPhone 13 vs iPhone 13 pro：给老婆选的。老婆试用了两者，我说重点体会刷新率，尤其是快速上下滑动网页。老婆说为啥要快速滑动，正常用不行吗？ 你说的这个 120hz 对我没什么用。选了 iPhone 13 。</p>\n<p>ipad air vs ipad pro：还是提示了 x 刷新率和扬声器，老婆表示没区别没区别，能用笔画画就行。选了 ipad air 。期间看到了 ipad pro 12 寸的，老婆有点心动大尺寸。一看价格翻倍，瞬间劝退。</p>\n<p>我自己看 display studio ，店里正好有雾面和镜面两种：</p>\n<ul>\n<li>雾面的说实话和我的 27 寸 4K 相比，有肉眼可见的提升，我很动心。</li>\n<li>然而我发现旁边还有个镜面的！比雾面的相比有肉眼可见的提升。实在是太亮眼太清晰太晶莹了。</li>\n</ul>\n<p>我只能感慨苹果刀法精准。我下定决心买 1599 的，以为够用了。结果现在纠结要不要一步到位 1899 买镜面的。</p>\n<p>好在镜面雾面都没货。还能继续纠结一个月。我现在开始怀疑如果买雾面的，会不会和 27 寸 4k 也没大区别。因为左右对比的时候，雾面明显出现了模糊和混沌的感觉，就像我在家用 4k 27 寸感受到的模糊和混沌。 而镜面的一如 iMac 一样晶莹剔透。</p>\n<p>然而 iMac 外观太丑，下面那个大下巴接受不能。也没法当外界显示器。我再次感慨苹果真是刀法精准。</p>\n", "last_modified": 1648450073, "replies": 45, "id": 843382}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1647188067", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1647188067", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 182916, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1647188067", "stars": 3444, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 487715, "username": "goodhellonice", "url": "https://www.v2ex.com/u/goodhellonice", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/a66b/6c3e/487715_mini.png?m=1615460716", "avatar_normal": "https://cdn.v2ex.com/avatar/a66b/6c3e/487715_normal.png?m=1615460716", "avatar_large": "https://cdn.v2ex.com/avatar/a66b/6c3e/487715_large.png?m=1615460716", "created": 1588595775, "last_modified": 1615460716}, "last_reply_by": "wonderfulcxm", "last_touched": 1648468587, "title": "2022 年 3 月，想办一张信用卡，大家有什么银行的什么卡推荐么？谢谢", "url": "https://www.v2ex.com/t/843353", "created": 1648443369, "deleted": 0, "content": "", "content_rendered": "", "last_modified": 1648443369, "replies": 41, "id": 843353}]