[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/b53b/3a3d/55_large.png?m=1611920927", "name": "games", "avatar_normal": "https://cdn.v2ex.com/navatar/b53b/3a3d/55_normal.png?m=1611920927", "title": "游戏", "url": "https://www.v2ex.com/go/games", "topics": 2403, "footer": "", "header": "Life is short, have more fun.", "title_alternative": "Games", "avatar_mini": "https://cdn.v2ex.com/navatar/b53b/3a3d/55_mini.png?m=1611920927", "stars": 2187, "aliases": [], "root": false, "id": 55, "parent_node_name": "computer"}, "member": {"id": 595541, "username": "shuimitao", "url": "https://www.v2ex.com/u/shuimitao", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/69caaa8072e6e201de12922554deb1d8?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/69caaa8072e6e201de12922554deb1d8?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/69caaa8072e6e201de12922554deb1d8?s=73&d=retro", "created": 1664315828, "last_modified": 1690336013}, "last_reply_by": "SeaTac", "last_touched": 1690396910, "title": "90 后是不是玩不动游戏了？", "url": "https://www.v2ex.com/t/959778", "created": 1690336865, "deleted": 0, "content": "按照这个标准 https://youtu.be/wdW4NYUPJIc  4090+i9 13900ks 搞一套，安装完系统 就后悔了,今天正在退货呢 \r\n\r\n日常工作 MaMacBook Apple M2 Max\r\n大约 2018 年买的外星人 R7 日常 Windows 挂机 \r\n前几天通过 steam 下载了战神 4 卡的不行 \r\n索性就组个好点的机器吧\r\n\r\n退款原因 玩了一次战神 4 特效全开没有现象中好 ，突然就有了个想法 为什么不买个 ps5 才$500 ！\r\n买完 ps5 玩一次就退货了\r\n玩不动了 不想玩了\r\n是不是这一代人 都是有我这样想法吗", "content_rendered": "按照这个标准 <div class=\"embedded_video_wrapper\"><iframe src=\"https://www.youtube.com/embed/wdW4NYUPJIc\" class=\"embedded_video\" allowfullscreen=\"\" type=\"text/html\" id=\"ytplayer\" frameborder=\"0\"></iframe></div>  4090+i9 13900ks 搞一套，安装完系统 就后悔了,今天正在退货呢 <br /><br />日常工作 MaMacBook Apple M2 Max<br />大约 2018 年买的外星人 R7 日常 Windows 挂机 <br />前几天通过 steam 下载了战神 4 卡的不行 <br />索性就组个好点的机器吧<br /><br />退款原因 玩了一次战神 4 特效全开没有现象中好 ，突然就有了个想法 为什么不买个 ps5 才$500 ！<br />买完 ps5 玩一次就退货了<br />玩不动了 不想玩了<br />是不是这一代人 都是有我这样想法吗", "last_modified": 1690404371, "replies": 171, "id": 959778}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6e27/13a6/557_large.png?m=1608969785", "name": "life", "avatar_normal": "https://cdn.v2ex.com/navatar/6e27/13a6/557_normal.png?m=1608969785", "title": "生活", "url": "https://www.v2ex.com/go/life", "topics": 4663, "footer": "", "header": "生活中的技术讨论", "title_alternative": "Life", "avatar_mini": "https://cdn.v2ex.com/navatar/6e27/13a6/557_mini.png?m=1608969785", "stars": 1164, "aliases": [], "root": false, "id": 557, "parent_node_name": ""}, "member": {"id": 615696, "username": "bigai2023", "url": "https://www.v2ex.com/u/bigai2023", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/89169b68e8b90d07028da8f121b3d167?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/89169b68e8b90d07028da8f121b3d167?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/89169b68e8b90d07028da8f121b3d167?s=73&d=retro", "created": 1677138198, "last_modified": 1677138198}, "last_reply_by": "Huelse", "last_touched": 1690379830, "title": "新房 2 月份装修好，散了五个月甲醛了，现在可以入住了么？", "url": "https://www.v2ex.com/t/959773", "created": 1690336733, "deleted": 0, "content": "原计划 9 月底搬新家，但是手头拮据，提前 2 个月搬的话可以省出 7000rmb\r\n\r\n主要家里有三岁小孩，放置这么长时间也是处于此考虑。\r\n\r\n--------\r\n主要异味来源是木工打的衣柜、书柜、餐边柜，柜体兔宝宝生态板，柜门千年舟，\r\n\r\n是那种带着芬香气味的味道，现在虽然没有一开始浓重但是还是能闻出来。", "content_rendered": "<p>原计划 9 月底搬新家，但是手头拮据，提前 2 个月搬的话可以省出 7000rmb</p>\n<p>主要家里有三岁小孩，放置这么长时间也是处于此考虑。</p>\n<hr/>\n<p>主要异味来源是木工打的衣柜、书柜、餐边柜，柜体兔宝宝生态板，柜门千年舟，</p>\n<p>是那种带着芬香气味的味道，现在虽然没有一开始浓重但是还是能闻出来。</p>\n", "last_modified": 1690336733, "replies": 96, "id": 959773}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1689070442", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1689070442", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 57590, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1689070442", "stars": 8499, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 526626, "username": "idlewater", "url": "https://www.v2ex.com/u/idlewater", "website": "rxdrag.com", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/e0c9/adea/526626_mini.png?m=1690349819", "avatar_normal": "https://cdn.v2ex.com/avatar/e0c9/adea/526626_normal.png?m=1690349819", "avatar_large": "https://cdn.v2ex.com/avatar/e0c9/adea/526626_large.png?m=1690349819", "created": 1609679076, "last_modified": 1690349819}, "last_reply_by": "lishei", "last_touched": 1690383536, "title": "一个人做低代码平台，还有机会吗？", "url": "https://www.v2ex.com/t/959868", "created": 1690350189, "deleted": 0, "content": "是的，你没看错，是一个人做一个低代码平台。  \r\n一人肝了好几年了，基本思路：  \r\n1 、前端可视化拖拽，逻辑编排+脚本支持，react 实现  \r\n   该部分前端已发布一个开源项目： https://github.com/codebdy/rxdrag  \r\n2 、后端基于微内核（或者微服务），UML 类图转 Grahpql 接口。  \r\n  通过微服务扩展复杂逻辑或者基础设施，通过脚本跟逻辑编排扩展业务逻辑。  \r\n  该部分基本流程已经跑通，代码开源（ golang+mysql ）  \r\n  \r\n相关文章：  \r\n[实践，制作一个高扩展、可视化低代码前端，详实、完整（掘金）]( https://juejin.cn/post/7205361008272326716)  \r\n[实践，制作一个高扩展、可视化低代码前端，详实、完整（知乎）]( https://zhuanlan.zhihu.com/p/610182592)  \r\n[挑战零代码：可视化逻辑编排（知乎）]( https://zhuanlan.zhihu.com/p/644873396)  \r\n[挑战零代码：可视化逻辑编排（掘金）]( https://juejin.cn/post/7257814347463671863) \r\n\r\n目标：  \r\n做一个低代码平台，取名乐搭（ Leda ）。\r\n\r\n目前整个项目组，只有一个人，有机会吗？", "content_rendered": "<p>是的，你没看错，是一个人做一个低代码平台。<br/>\n一人肝了好几年了，基本思路：<br/>\n1 、前端可视化拖拽，逻辑编排+脚本支持，react 实现<br/>\n该部分前端已发布一个开源项目： <a href=\"https://github.com/codebdy/rxdrag\" rel=\"nofollow\">https://github.com/codebdy/rxdrag</a><br/>\n2 、后端基于微内核（或者微服务），UML 类图转 Grahpql 接口。<br/>\n通过微服务扩展复杂逻辑或者基础设施，通过脚本跟逻辑编排扩展业务逻辑。<br/>\n该部分基本流程已经跑通，代码开源（ golang+mysql ）  </p>\n<p>相关文章：<br/>\n<a href=\"https://juejin.cn/post/7205361008272326716\" rel=\"nofollow\">实践，制作一个高扩展、可视化低代码前端，详实、完整（掘金）</a><br/>\n<a href=\"https://zhuanlan.zhihu.com/p/610182592\" rel=\"nofollow\">实践，制作一个高扩展、可视化低代码前端，详实、完整（知乎）</a><br/>\n<a href=\"https://zhuanlan.zhihu.com/p/644873396\" rel=\"nofollow\">挑战零代码：可视化逻辑编排（知乎）</a><br/>\n<a href=\"https://juejin.cn/post/7257814347463671863\" rel=\"nofollow\">挑战零代码：可视化逻辑编排（掘金）</a> </p>\n<p>目标：<br/>\n做一个低代码平台，取名乐搭（ Leda ）。</p>\n<p>目前整个项目组，只有一个人，有机会吗？</p>\n", "last_modified": 1690350528, "replies": 92, "id": 959868}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6e27/13a6/557_large.png?m=1608969785", "name": "life", "avatar_normal": "https://cdn.v2ex.com/navatar/6e27/13a6/557_normal.png?m=1608969785", "title": "生活", "url": "https://www.v2ex.com/go/life", "topics": 4663, "footer": "", "header": "生活中的技术讨论", "title_alternative": "Life", "avatar_mini": "https://cdn.v2ex.com/navatar/6e27/13a6/557_mini.png?m=1608969785", "stars": 1164, "aliases": [], "root": false, "id": 557, "parent_node_name": ""}, "member": {"id": 65036, "username": "tmplinshi", "url": "https://www.v2ex.com/u/tmplinshi", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/2da71147826467e60871461b7d1dda14?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/2da71147826467e60871461b7d1dda14?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/2da71147826467e60871461b7d1dda14?s=73&d=retro", "created": 1402689953, "last_modified": 1402689953}, "last_reply_by": "mertas", "last_touched": 1690382419, "title": "你不止活一世", "url": "https://www.v2ex.com/t/959747", "created": 1690333248, "deleted": 0, "content": "不谈灵性，也不谈科学。\r\n\r\n简单的问问你自己：此刻的你正在思考，你能意识到自己的存在。死是什么意思？为什么你会意识不到自己的存在？", "content_rendered": "<p>不谈灵性，也不谈科学。</p>\n<p>简单的问问你自己：此刻的你正在思考，你能意识到自己的存在。死是什么意思？为什么你会意识不到自己的存在？</p>\n", "last_modified": 1690333248, "replies": 87, "id": 959747}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/ab88/b157/836_large.png?m=1450649879", "name": "telegram", "avatar_normal": "https://cdn.v2ex.com/navatar/ab88/b157/836_normal.png?m=1450649879", "title": "Telegram", "url": "https://www.v2ex.com/go/telegram", "topics": 737, "footer": "", "header": "一个全新的主打安全和隐私的通讯平台——Telegram Messenger，来自俄罗斯最大的社交网站 VK 的创建人 Nikolai Durov 和 Pavel Durov 兄弟", "title_alternative": "Telegram", "avatar_mini": "https://cdn.v2ex.com/navatar/ab88/b157/836_mini.png?m=1450649879", "stars": 986, "aliases": [], "root": false, "id": 836, "parent_node_name": "internet"}, "member": {"id": 576704, "username": "airbotgo", "url": "https://www.v2ex.com/u/airbotgo", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/2d8f9a5b4fbddc9e8307b207222e9938?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/2d8f9a5b4fbddc9e8307b207222e9938?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/2d8f9a5b4fbddc9e8307b207222e9938?s=73&d=retro", "created": 1648272585, "last_modified": 1651624471}, "last_reply_by": "icaolei", "last_touched": 1690387886, "title": "Telegram 是如何做到十几个万人群还是如此流畅的？", "url": "https://www.v2ex.com/t/959739", "created": 1690331356, "deleted": 0, "content": "1 、Android 、iOS 都非常流畅，除了 Web 网页版有时候略卡\r\n十几个万人群，要做到这种流畅程度，有哪些值得学习的？\r\n\r\n2 、本地缓存极少\r\n设置本地缓存仅保存 1 周，所有内容存储云端。目前本地缓存总共占 300M 。\r\n\r\n3 、多端同步\r\nAndroid 、iOS 、Web 三端都在使用，同步做得非常好。它还包括 Windows 、Linux 、macOS 等客户端，如此多的平台支持，同步功能能做到如此程度，简直奇迹。\r\n\r\n我的日常使用：\r\n1 ）聊天沟通；\r\n2 ）听歌（自己上传的音频）；看 MV （ B 站收集的音乐视频）；\r\n3 ）文件备份（中文搜索很烂，目前加标签、主动加分隔符号将就用）；\r\n4 ）树洞（建个私有频道，写些乱七八糟的东西）；\r\n5 ）结合 Tasker + 脚本，进行指定图片、短信的备份；\r\n\r\n有没有大佬就 1 、2 个点分析下自己的见解，Telegram 有哪些值得学习的地方？", "content_rendered": "1 、Android 、iOS 都非常流畅，除了 Web 网页版有时候略卡<br />十几个万人群，要做到这种流畅程度，有哪些值得学习的？<br /><br />2 、本地缓存极少<br />设置本地缓存仅保存 1 周，所有内容存储云端。目前本地缓存总共占 300M 。<br /><br />3 、多端同步<br />Android 、iOS 、Web 三端都在使用，同步做得非常好。它还包括 Windows 、Linux 、macOS 等客户端，如此多的平台支持，同步功能能做到如此程度，简直奇迹。<br /><br />我的日常使用：<br />1 ）聊天沟通；<br />2 ）听歌（自己上传的音频）；看 MV （ B 站收集的音乐视频）；<br />3 ）文件备份（中文搜索很烂，目前加标签、主动加分隔符号将就用）；<br />4 ）树洞（建个私有频道，写些乱七八糟的东西）；<br />5 ）结合 Tasker + 脚本，进行指定图片、短信的备份；<br /><br />有没有大佬就 1 、2 个点分析下自己的见解，Telegram 有哪些值得学习的地方？", "last_modified": 1690331356, "replies": 85, "id": 959739}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1689070442", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1689070442", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 57590, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1689070442", "stars": 8499, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 600788, "username": "johnlanni", "url": "https://www.v2ex.com/u/johnlanni", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/0a06/c2f1/600788_mini.png?m=1680062003", "avatar_normal": "https://cdn.v2ex.com/avatar/0a06/c2f1/600788_normal.png?m=1680062003", "avatar_large": "https://cdn.v2ex.com/avatar/0a06/c2f1/600788_large.png?m=1680062003", "avatar_xlarge": "https://cdn.v2ex.com/avatar/0a06/c2f1/600788_xlarge.png?m=1680062003", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/0a06/c2f1/600788_xlarge.png?m=1680062003", "created": 1667705670, "last_modified": 1680062003}, "last_reply_by": "danhahaha", "last_touched": 1689625986, "title": "2023 年了，你还在学 Nginx 吗", "url": "https://www.v2ex.com/t/959994", "created": 1690370799, "deleted": 0, "content": "## Higress 介绍\r\n\r\n[Higress]( https://github.com/alibaba/higress) 是基于阿里巴巴内部两年多的 Envoy Gateway 实践沉淀，以开源 Istio 与 Envoy 为核心构建的下一代云原生网关。Higress 实现了安全防护网关、流量网关、微服务网关三层网关合一，可以显著降低网关的部署和运维成本。\r\n\r\n官网地址： https://higress.cn\r\n\r\nGitHub 地址： https://github.com/alibaba/higress\r\n\r\n\r\nHigress 作为云原生网关的核心优势如下：\r\n\r\n### 易用性\r\n\r\n“云原生”已经不再是一个新鲜词，但企业对云原生技术的学习使用成本仍有许多顾虑，对云原生新标准的追赶又有很多焦虑；\r\n\r\nHigress 同时提供了本地安装/生产部署的 quickstart ，可以一键部署，并通过控制台操作快速上手；基于简单易用的控制台，Higress 可以封装 Ingress/Gateway API 的标准细节，根治技术追赶焦虑。\r\n\r\n### 标准化\r\n\r\nK8s 带来了云原生的路由标准 Ingress/Gateway API ，如同 POSIX 定义 Unix 可移植操作系统标准，历时 35 年经久不衰，云原生的路由标准的生命周期一定会远超过 K8s 本身；\r\n\r\nHigress 结合阿里内部实践以及阿里云产品沉淀，积累了基于 Ingress API 的丰富的路由策略扩展能力，同时还兼容大部分 Nginx Ingress 能力，这些能力后续也将在 Gateway API 上支持。\r\n\r\n### 高集成\r\n\r\n企业内有大量传统架构部署的服务，会成为向云原生架构演进的技术负担，要求云原生网关具备对接异构服务架构的能力；\r\n\r\n基于 Higress 提供的多种服务发现机制，网关路由不仅可以转发到 K8s 服务，也可以直接配置 IP 转发到到物理机上的服务；基于 Nacos/ZooKeeper 等注册中心对接，还可以轻松实现 Spring Cloud 和 Dubbo 微服务的路由，无论其是否部署在 K8s 内。\r\n\r\n### 易扩展\r\n\r\n基于扩展机制进行二次开发的能力，是云原生网关在不同业务场景下都能适配落地的关键；\r\n\r\nHigress 提供了灵活的插件扩展机制，目前插件市场已经推出多个官方插件，并支持用户通过控制台直接上传自己开发的插件，同时开源社区的插件市场生态也在不断建设中。\r\n\r\n### 热更新\r\n\r\n传统 Nginx 更新规则需要 reload 会导致链接抖动，导致流量损失，对实时通信、视频、IOT 无法容忍；\r\n\r\n对于路由规则，Wasm 插件逻辑更新，以及证书改动等等，Higress 全部支持热更新，不会造成任何连接抖动。\r\n\r\n\r\n## Higress 全局配置\r\n\r\n下文将介绍 Higress 全局配置控制面实现机制，Higress 数据面基于 Envoy 是 C++ 语言开发，控制面则是基于 Go 语言开发。控制面的开发上手门槛还是很低的，欢迎有更多同学参与贡献。社区也有多个学习兴趣小组，欢迎加入学习： https://github.com/alibaba/higress/issues?q=is%3Aopen+is%3Aissue+label%3A%22learning+to+share%22\r\n\r\n\r\nHigress 有个全局配置 ConfigMap 对象 higress-config ，参考配置如下：\r\n\r\n```yaml\r\napiVersion: v1\r\ndata:\r\n  higress: |-\r\n    tracing:\r\n      enable: true\r\n      sampling: 100\r\n      timeout: 500\r\n      skywalking:\r\n       service: skywalking-oap-server.op-system.svc.cluster.local\r\n       port: 11800\r\n...\r\n...\r\nkind: ConfigMap\r\nmetadata:\r\n  name: higress-config\r\n  namespace: higress-system\r\n```\r\n\r\n具体配置说明请参考 [Higress 全局配置说明文档]( https://higress.io/zh-cn/docs/user/configmap)，\r\n本文介绍以 Tracing 为例，详细说明 Tracing 全局配置是如何转成 EnvoyFilter 和如何同时实现实时下发到 Higress Gateway 过程。\r\n\r\n本文涉及整体架构流程、初始化过程和启动、higress-config 变更和处理流程、通知 XDSUpdater 、构建 EnvoyFilter 和下发以及如何扩展全局配置等内容。\r\n\r\n## 整体架构流程\r\n\r\n### 1. 整体架构\r\n\r\n![img.png]( https://higress.io/zh-cn/assets/images/configmap1-f2447fa1bd9826e78e29bcdf1f38a4ca.png)\r\n\r\n\r\n### 2. 核心组件\r\n\r\n- IngressConfig\r\n\r\nIngressConfig 是 Higress 一个核心结构体, 负责监控 Ingress ，McpBridge, Http2Rpc, WasmPlugin 等 k8s 资源， 同时集成 ConfigStore Interface ，通过 List 接口下发 VirtualService, DestinationRule, EnvoyFilter, ServiceEntry, WasmPlugin 等 CR 资源。\r\n\r\n- ConfigmapMgr\r\n\r\nConfigmapMgr 结构体负责整个核心流程，包括通过 Informer List/Watch 机制监控 higress-config 的变更，同时遍历 ItemControllers 下发变更通知，提供构建 EnvoyFilter 列表等功能。\r\n\r\n- TracingController\r\n\r\nTracingController 结构体负责具体的 Tracing 数据校验，构建 Tracing EnvoyFilter, 以及通过 ItemEventHandler 下发变更通知等。\r\n\r\n- HigressConfig\r\n \r\nHigressConfig 是 higress-config Configmap 所对应数据的结构体。\r\n\r\n\r\n### 3. 核心流程\r\n\r\n- 用 Informer List/Watch 机制监控 higress-config 变更，校验变更，同时保存变更后数据。\r\n- 用变更数据构建 EnvoyFilter 。\r\n- 通知 XDSUpdater ，EnvoyFilter 有变更，重新拉取新的 EnvoyFilter 列表。\r\n\r\n## 初始化过程\r\n\r\n### 1. 初始化入口\r\n\r\n初始化过程入口在 NewIngressConfig ， 初始化 IngressConfig 时同时构建 HigressConfigController 和 ConfigmapMgr 。\r\n\r\n```golang\r\n// pkg/ingress/config/ingress_config.go\r\nfunc NewIngressConfig(localKubeClient kube.Client, XDSUpdater model.XDSUpdater, namespace, clusterId string) *IngressConfig {\r\n\t// ...\r\n\t\r\n\t// 构建 controller 和 configmapMgr\r\n\thigressConfigController := configmap.NewController(localKubeClient, clusterId, namespace)\r\n\tconfig.configmapMgr = configmap.NewConfigmapMgr(XDSUpdater, namespace, higressConfigController, higressConfigController.Lister())\r\n\r\n\treturn config\r\n}\r\n```\r\n\r\n### 2. HigressConfigController 初始化\r\n\r\n通过 Higress 提供 NewCommonController 初始化 HigressConfigController 用于监听 higress-system 命名空间下 Configmap 的变化。\r\n\r\n```golang\r\n// pkg/ingress/kube/configmap/controller.go\r\ntype HigressConfigController controller.Controller[listersv1.ConfigMapNamespaceLister]\r\n\r\nfunc NewController(client kubeclient.Client, clusterId string, namespace string) HigressConfigController {\r\n\tinformer := client.KubeInformer().Core().V1().ConfigMaps().Informer()\r\n\treturn controller.NewCommonController(\"higressConfig\", client.KubeInformer().Core().V1().ConfigMaps().Lister().ConfigMaps(namespace),\r\n\t\tinformer, GetConfigmap, clusterId)\r\n}\r\n\r\nfunc GetConfigmap(lister listersv1.ConfigMapNamespaceLister, namespacedName types.NamespacedName) (controllers.Object, error) {\r\n\treturn lister.Get(namespacedName.Name)\r\n}\r\n```\r\n### 3. ConfigmapMgr 初始化\r\n\r\nConfigmapMgr 初始化具体步骤如下：\r\n- 构建 ConfigmapMgr\r\n- 设置 HigressConfigController configmap 新增或者更新回调函数为 configmapMgr.AddOrUpdateHigressConfig\r\n- 设置 HigressConfig 结构体默认值\r\n- 初始化 TracingController\r\n- 把 tracingController 添加到 configmapMgr itemControllers 数组里\r\n- 初始化 ItemEventHandler ， 同时遍历 itemControllers ，设置 ItemEventHandler\r\n\r\n```golang\r\n// pkg/ingress/kube/configmap/controller.go\r\nfunc NewConfigmapMgr(XDSUpdater model.XDSUpdater, namespace string, higressConfigController HigressConfigController, higressConfigLister listersv1.ConfigMapNamespaceLister) *ConfigmapMgr {\r\n    //  构建 ConfigmapMgr\r\n\tconfigmapMgr := &ConfigmapMgr{\r\n\t\tXDSUpdater:              XDSUpdater,\r\n\t\tNamespace:               namespace,\r\n\t\tHigressConfigController: higressConfigController,\r\n\t\tHigressConfigLister:     higressConfigLister,\r\n\t\thigressConfig:           atomic.Value{},\r\n\t}\r\n\t// 设置 HigressConfigController configmap 新增或者更新回调函数 configmapMgr.AddOrUpdateHigressConfig\r\n\tconfigmapMgr.HigressConfigController.AddEventHandler(configmapMgr.AddOrUpdateHigressConfig)\r\n\t// 设置 HigressConfig 结构体默认值\r\n\tconfigmapMgr.SetHigressConfig(NewDefaultHigressConfig())\r\n\r\n\t// 初始化 TracingController\r\n\ttracingController := NewTracingController(namespace)\r\n\t// 把 tracingController 添加到 configmapMgr itemControllers 里\r\n\tconfigmapMgr.AddItemControllers(tracingController)\r\n\t// 初始化 itemEventHandler ， 同时遍历 itemControllers ，设置 itemEventHandler\r\n\tconfigmapMgr.initEventHandlers()\r\n\r\n\t// 返回 configmapMgr\r\n\treturn configmapMgr\r\n}\r\n```\r\n\r\n## 启动\r\n\r\n在 IngressConfig 添加 HigressConfigController Run() 和 HasSynced() 控制流程。\r\n\r\n```golang\r\n// pkg/ingress/config/ingress_config.go\r\nfunc (m *IngressConfig) Run(stop <-chan struct{}) {\r\n\t// ...\r\n\t// 启动 HigressConfigController\r\n\tgo m.configmapMgr.HigressConfigController.Run(stop)\r\n}\r\n\r\nfunc (m *IngressConfig) HasSynced() bool {\r\n\t// ....\r\n\tif !m.configmapMgr.HigressConfigController.HasSynced() {\r\n\t\treturn false\r\n\t}\r\n}\r\n```\r\n\r\n## higress-config 变更和处理流程\r\n\r\n### 1. configmapMgr 变更处理\r\n\r\nConfigmapMgr 通过收到 HigressConfigController 通知来处理变更请求。\r\n\r\n具体变更流程如下：\r\n- 判断是否 higress-system 命名空间下 name 为 higress-config Configmap 发生了变化，如果不是就返回。\r\n- 获取 higress-config 内容。\r\n- 遍历 ItemControllers, 校验 higress-config 配置是否合法，如果有一个返回不合法，就返回。\r\n- 和上次保存在本地 higressConfig 比对, 检查这次数据是否有变化，如果没有变化就返回。\r\n- 如果数据有变化，就遍历 ItemControllers 通知每个 itemController 数据有变化，同时保存这次变化到本地 higressConfig 。\r\n\r\n```golang\r\n// pkg/ingress/kube/configmap/controller.go\r\nfunc (c *ConfigmapMgr) AddOrUpdateHigressConfig(name util.ClusterNamespacedName) {\r\n\t// 只监听 higress-system 命名空间下 name 为 higress-config Configmap 的变化\r\n\tif name.Namespace != c.Namespace || name.Name != HigressConfigMapName {\r\n\t\treturn\r\n\t}\r\n    // ...\r\n\t// 获取 higress-config 内容\r\n\thigressConfigmap, err := c.HigressConfigLister.Get(HigressConfigMapName)\r\n\t\r\n\t// 通过 yaml.Unmarshal 转成 HigressConfig\r\n\tnewHigressConfig := NewDefaultHigressConfig()\r\n\tif err = yaml.Unmarshal([]byte(higressConfigmap.Data[HigressConfigMapKey]), newHigressConfig); err != nil {\r\n\t\tIngressLog.Errorf(\"data:%s,  convert to higress config error, error: %+v\", higressConfigmap.Data[HigressConfigMapKey], err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// ...\r\n\t// 遍历 ItemControllers, 校验配置是否合法\r\n\tfor _, itemController := range c.ItemControllers {\r\n\t\tif itemErr := itemController.ValidHigressConfig(newHigressConfig); itemErr != nil {\r\n\t\t\tIngressLog.Errorf(\"configmap %s controller valid higress config error, error: %+v\", itemController.GetName(), itemErr)\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\t// 和上次比对这次数据是否有变更\r\n\toldHigressConfig := c.GetHigressConfig()\r\n\tresult, _ := c.CompareHigressConfig(oldHigressConfig, newHigressConfig)\r\n    // ...\r\n\t// 如果数据有变更，就遍历 ItemControllers 通知每个 itemController 数据有变更，同时保存这次变更到本地。\r\n\tif result == ResultReplace || result == ResultDelete {\r\n\t\tfor _, itemController := range c.ItemControllers {\r\n\t\t\tIngressLog.Infof(\"configmap %s controller AddOrUpdateHigressConfig\", itemController.GetName())\r\n\t\t\tif itemErr := itemController.AddOrUpdateHigressConfig(name, oldHigressConfig, newHigressConfig); itemErr != nil {\r\n\t\t\t\tIngressLog.Errorf(\"configmap %s controller AddOrUpdateHigressConfig error, error: %+v\", itemController.GetName(), itemErr)\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 保存这次变更\r\n\t\tc.SetHigressConfig(newHigressConfig)\r\n\t}\r\n}\r\n```\r\n\r\n### 2. TracingController 变更处理\r\n\r\nTracingController 变更处理就比较简单：\r\n- 检查 Tracing 这部分数据是否有变更。\r\n- 如果有变更，DeepCopy 一份 Tracing 数据保存到本地，同时通过 eventHandler 下发变更通知。\r\n\r\n```golang\r\n// pkg/ingress/kube/configmap/tracing.go\r\nfunc (t *TracingController) AddOrUpdateHigressConfig(name util.ClusterNamespacedName, old *HigressConfig, new *HigressConfig) error {\r\n\t// ...\r\n\t// 检查 Tracing 部分数据是否有变更\r\n\tresult, _ := compareTracing(old.Tracing, new.Tracing)\r\n\r\n\t// 如果有变更，DeepCopy 一份 Tracing 数据保存到本地，同时通过 eventHandler 下发变更通知\r\n\tswitch result {\r\n\tcase ResultReplace:\r\n\t\tif newTracing, err := deepCopyTracing(new.Tracing); err != nil {\r\n\t\t\tIngressLog.Infof(\"tracing deepcopy error:%v\", err)\r\n\t\t} else {\r\n\t\t\tt.SetTracing(newTracing)\r\n\t\t\tIngressLog.Infof(\"AddOrUpdate Higress config tracing\")\r\n\t\t\tt.eventHandler(higressTracingEnvoyFilterName)\r\n\t\t\tIngressLog.Infof(\"send event with filter name:%s\", higressTracingEnvoyFilterName)\r\n\t\t}\r\n\tcase ResultDelete:\r\n\t\tt.SetTracing(NewDefaultTracing())\r\n\t\tIngressLog.Infof(\"Delete Higress config tracing\")\r\n\t\tt.eventHandler(higressTracingEnvoyFilterName)\r\n\t\tIngressLog.Infof(\"send event with filter name:%s\", higressTracingEnvoyFilterName)\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n```\r\n\r\n## 通知 XDSUpdater\r\n\r\n在 ConfigmapMgr 初始化时候调用 configmapMgr.initEventHandlers()， 这个 func 会创建 ItemEventHandler, 同时遍历 ItemControllers 设置 ItemEventHandler 。\r\n\r\n```golang\r\n// pkg/ingress/kube/configmap/config.go\r\ntype ItemEventHandler = func(name string)\r\n\r\n// pkg/ingress/kube/configmap/controller.go\r\nfunc (c *ConfigmapMgr) initEventHandlers() error {\r\n    itemEventHandler := func(name string) {\r\n    c.XDSUpdater.ConfigUpdate(&model.PushRequest{\r\n        Full: true,\r\n        ConfigsUpdated: map[model.ConfigKey]struct{}{{\r\n            Kind:      gvk.EnvoyFilter,\r\n            Name:      name,\r\n            Namespace: c.Namespace,\r\n        }: {}},\r\n        Reason: []model.TriggerReason{ModelUpdatedReason},\r\n        })\r\n    }\r\n    \r\n    for _, itemController := range c.ItemControllers {\r\n\t\titemController.RegisterItemEventHandler(itemEventHandler)\r\n    }\r\n    \r\n    return nil\r\n}\r\n```\r\n\r\n这里 XDSUpdater 是从 IngressConfig 初始化传入，XDSUpdater.ConfigUpdate() 用于更新通知下发。\r\n\r\n进一步跟踪可以发现在 Higress controller server 启动时执行 s.initXdsServer 函数创建 s.xdsServer ，具体逻辑不在本文讨论范围, 有兴趣可以进一步阅读源码。\r\n\r\n\r\n```golang\r\n// pkg/bootstrap/server.go\r\nfunc NewServer(args *ServerArgs) (*Server, error) {\r\n\t// ...\r\n\ts := &Server{\r\n\t\tServerArgs:      args,\r\n\t\thttpMux:         http.NewServeMux(),\r\n\t\tenvironment:     e,\r\n\t\treadinessProbes: make(map[string]readinessProbe),\r\n\t\tserver:          server.New(),\r\n\t}\r\n\ts.environment.Watcher = mesh.NewFixedWatcher(&v1alpha1.MeshConfig{})\r\n\ts.environment.Init()\r\n\tinitFuncList := []func() error{\r\n\t\ts.initKubeClient,\r\n\t\ts.initXdsServer,\r\n\t\ts.initHttpServer,\r\n\t\ts.initConfigController,\r\n\t\ts.initRegistryEventHandlers,\r\n\t\ts.initAuthenticators,\r\n\t}\r\n\r\n\tfor _, f := range initFuncList {\r\n\t\tif err := f(); err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t}\r\n\r\n\t// ...\r\n\treturn s, nil\r\n}\r\n\r\n// pkg/bootstrap/server.go\r\nfunc (s *Server) initXdsServer() error {\r\n    log.Info(\"init xds server\")\r\n    s.xdsServer = xds.NewDiscoveryServer(s.environment, nil, PodName, PodNamespace, s.RegistryOptions.KubeOptions.ClusterAliases)\r\n    // ...\r\n    return s.initGrpcServer()\r\n}\r\n```\r\n\r\n## 构建和下发 EnvoyFilters\r\n\r\n### 1. IngressConfig List 下发 EnvoyFilters 列表\r\n\r\nIngressConfig List 用于 VirtualService, DestinationRule, EnvoyFilter, ServiceEntry, WasmPlugin 等 CR 资源下发， 这里主要关注 EnvoyFilter CR 资源下发。\r\n\r\n```golang\r\n// pkg/ingress/config/ingress_config.go\r\nfunc (m *IngressConfig) List(typ config.GroupVersionKind, namespace string) ([]config.Config, error) {\r\n\tif typ != gvk.Gateway &&\r\n\t\ttyp != gvk.VirtualService &&\r\n\t\ttyp != gvk.DestinationRule &&\r\n\t\ttyp != gvk.EnvoyFilter &&\r\n\t\ttyp != gvk.ServiceEntry &&\r\n\t\ttyp != gvk.WasmPlugin {\r\n\t\treturn nil, common.ErrUnsupportedOp\r\n\t}\r\n\t// ...\r\n\tif typ == gvk.EnvoyFilter {\r\n\t\tm.mutex.RLock()\r\n\t\tdefer m.mutex.RUnlock()\r\n\t\tvar envoyFilters []config.Config\r\n\t\t\r\n\t\t// 调用 ConfigmapMgr ConstructEnvoyFilters 获取需要下发 EnvoyFilter 列表\r\n\t\tconfigmapEnvoyFilters, err := m.configmapMgr.ConstructEnvoyFilters()\r\n\t\tif err != nil {\r\n\t\t\tIngressLog.Errorf(\"Construct configmap EnvoyFilters error %v\", err)\r\n\t\t} else {\r\n\t\t\tfor _, envoyFilter := range configmapEnvoyFilters {\r\n\t\t\t\tenvoyFilters = append(envoyFilters, *envoyFilter)\r\n\t\t\t}\r\n\t\t\tIngressLog.Infof(\"Append %d configmap EnvoyFilters\", len(configmapEnvoyFilters))\r\n\t\t}\r\n\t\tif len(envoyFilters) == 0 {\r\n\t\t\tIngressLog.Infof(\"resource type %s, configs number %d\", typ, len(m.cachedEnvoyFilters))\r\n\t\t\treturn m.cachedEnvoyFilters, nil\r\n\t\t}\r\n\t\t// 需要下发 configmap EnvoyFilter 列表 和 m.cachedEnvoyFilters 列表聚合一下下发\r\n\t\tenvoyFilters = append(envoyFilters, m.cachedEnvoyFilters...)\r\n\t\tIngressLog.Infof(\"resource type %s, configs number %d\", typ, len(envoyFilters))\r\n\t\treturn envoyFilters, nil\r\n\t}\r\n\t\r\n}\t\r\n```\r\n\r\n调用 ConfigmapMgr ConstructEnvoyFilters 获取需要下发 EnvoyFilter 列表， 同时和 m.cachedEnvoyFilters 列表聚合一下再下发。\r\n\r\n这里 m.cachedEnvoyFilters 是在构建 VirtualService 时生成，有兴趣可以进一步阅读 IngressConfig 源码。\r\n\r\n\r\n### 2. ConfigmapMgr 构建 EnvoyFilter 列表\r\n\r\n这里比较简单，遍历一下 ItemControllers ，聚合每个 itemController 返回的 EnvoyFilters.\r\n\r\n```golang\r\n// /pkg/ingress/kube/configmap/controller.go\r\nfunc (c *ConfigmapMgr) ConstructEnvoyFilters() ([]*config.Config, error) {\r\n\tconfigs := make([]*config.Config, 0)\r\n\tfor _, itemController := range c.ItemControllers {\r\n\t\tIngressLog.Infof(\"controller %s ConstructEnvoyFilters\", itemController.GetName())\r\n\t\tif itemConfigs, err := itemController.ConstructEnvoyFilters(); err != nil {\r\n\t\t\tIngressLog.Errorf(\"controller %s ConstructEnvoyFilters error, error: %+v\", itemController.GetName(), err)\r\n\t\t} else {\r\n\t\t\tconfigs = append(configs, itemConfigs...)\r\n\t\t}\r\n\t}\r\n\treturn configs, nil\r\n}\r\n```\r\n\r\n### 3. TracingController 构建 EnvoyFilters\r\n\r\n这里就比较简单，根据保存的 Tracing 数据构建对应的 EnvoyFilter\r\n\r\n```golang\r\n// pkg/ingress/kube/configmap/tracing.go\r\nfunc (t *TracingController) ConstructEnvoyFilters() ([]*config.Config, error) {\r\n\t// ...\r\n\ttracingConfig := t.constructTracingTracer(tracing, namespace)\r\n\tif len(tracingConfig) == 0 {\r\n\t\treturn configs, nil\r\n\t}\r\n\r\n\tconfig := &config.Config{\r\n\t\tMeta: config.Meta{\r\n\t\t\tGroupVersionKind: gvk.EnvoyFilter,\r\n\t\t\tName:             higressTracingEnvoyFilterName,\r\n\t\t\tNamespace:        namespace,\r\n\t\t},\r\n\t\tSpec: &networking.EnvoyFilter{\r\n\t\t\tConfigPatches: []*networking.EnvoyFilter_EnvoyConfigObjectPatch{\r\n\t\t\t\t{\r\n\t\t\t\t\tApplyTo: networking.EnvoyFilter_NETWORK_FILTER,\r\n\t\t\t\t\tMatch: &networking.EnvoyFilter_EnvoyConfigObjectMatch{\r\n\t\t\t\t\t\tContext: networking.EnvoyFilter_GATEWAY,\r\n\t\t\t\t\t\tObjectTypes: &networking.EnvoyFilter_EnvoyConfigObjectMatch_Listener{\r\n\t\t\t\t\t\t\tListener: &networking.EnvoyFilter_ListenerMatch{\r\n\t\t\t\t\t\t\t\tFilterChain: &networking.EnvoyFilter_ListenerMatch_FilterChainMatch{\r\n\t\t\t\t\t\t\t\t\tFilter: &networking.EnvoyFilter_ListenerMatch_FilterMatch{\r\n\t\t\t\t\t\t\t\t\t\tName: \"envoy.filters.network.http_connection_manager\",\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t\tPatch: &networking.EnvoyFilter_Patch{\r\n\t\t\t\t\t\tOperation: networking.EnvoyFilter_Patch_MERGE,\r\n\t\t\t\t\t\tValue:     util.BuildPatchStruct(tracingConfig),\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tApplyTo: networking.EnvoyFilter_HTTP_FILTER,\r\n\t\t\t\t\tMatch: &networking.EnvoyFilter_EnvoyConfigObjectMatch{\r\n\t\t\t\t\t\tContext: networking.EnvoyFilter_GATEWAY,\r\n\t\t\t\t\t\tObjectTypes: &networking.EnvoyFilter_EnvoyConfigObjectMatch_Listener{\r\n\t\t\t\t\t\t\tListener: &networking.EnvoyFilter_ListenerMatch{\r\n\t\t\t\t\t\t\t\tFilterChain: &networking.EnvoyFilter_ListenerMatch_FilterChainMatch{\r\n\t\t\t\t\t\t\t\t\tFilter: &networking.EnvoyFilter_ListenerMatch_FilterMatch{\r\n\t\t\t\t\t\t\t\t\t\tName: \"envoy.filters.network.http_connection_manager\",\r\n\t\t\t\t\t\t\t\t\t\tSubFilter: &networking.EnvoyFilter_ListenerMatch_SubFilterMatch{\r\n\t\t\t\t\t\t\t\t\t\t\tName: \"envoy.filters.http.router\",\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t\tPatch: &networking.EnvoyFilter_Patch{\r\n\t\t\t\t\t\tOperation: networking.EnvoyFilter_Patch_MERGE,\r\n\t\t\t\t\t\tValue: util.BuildPatchStruct(`{\r\n\t\t\t\t\t\t\t\"name\":\"envoy.filters.http.router\",\r\n\t\t\t\t\t\t\t\"typed_config\":{\r\n\t\t\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\",\r\n\t\t\t\t\t\t\t\t\"start_child_span\": true\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}`),\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t}\r\n\r\n\tconfigs = append(configs, config)\r\n\treturn configs, nil\r\n}\r\n```\r\n\r\n\r\n## 如何扩展全局配置\r\n\r\n### 1. HigressConfig 结构体添加对应的扩展配置\r\n\r\n```golang\r\ntype HigressConfig struct {\r\n\tTracing *Tracing `json:\"tracing,omitempty\"`\r\n\t// 在这里添加对应的数据结构来扩展配置\r\n}\r\n```\r\n\r\n### 2. 增加扩展配置默认值\r\n\r\n```golang\r\n// pkg/ingress/kube/configmap/config.go\r\nfunc NewDefaultHigressConfig() *HigressConfig {\r\n\thigressConfig := &HigressConfig{\r\n\t\tTracing: NewDefaultTracing(),\r\n\t\t// 在这里增加扩展配置默认值\r\n\t}\r\n\treturn higressConfig\r\n}\r\n```\r\n\r\n### 3. 实现 ItemController interface\r\n\r\n```golang\r\ntype ItemController interface {\r\n\tGetName() string\r\n\tAddOrUpdateHigressConfig(name util.ClusterNamespacedName, old *HigressConfig, new *HigressConfig) error\r\n\tValidHigressConfig(higressConfig *HigressConfig) error\r\n\tConstructEnvoyFilters() ([]*config.Config, error)\r\n\tRegisterItemEventHandler(eventHandler ItemEventHandler)\r\n}\r\n```\r\n\r\n### 4. 初始化扩展配置，同时添加到 ItemControllers\r\n\r\n```golang\r\nfunc NewConfigmapMgr(XDSUpdater model.XDSUpdater, namespace string, higressConfigController HigressConfigController, higressConfigLister listersv1.ConfigMapNamespaceLister) *ConfigmapMgr {\r\n\t// ...\r\n\ttracingController := NewTracingController(namespace)\r\n\tconfigmapMgr.AddItemControllers(tracingController)\r\n\t// ...\r\n\t// 在这里初始化扩展配置，同时添加到 ItemControllers\r\n\tconfigmapMgr.initEventHandlers()\r\n\r\n\treturn configmapMgr\r\n}\r\n```\r\n\r\n## 参与社区贡献\r\n\r\nHigress 开源贡献小组正在火热招募贡献者。早期参与开源更容易成为项目 Committer ，并有更多机会成为 Higress PMC(Project Management Committee) 的一员，参与主导 Higress 社区的前进方向。\r\n欢迎加入 Higress 社区群：\r\n\r\n\r\n![]( https://img.alicdn.com/imgextra/i1/O1CN0166Gkdt1cRTVjJ2skL_!!6000000003597-2-tps-720-405.png)", "content_rendered": "<h2>Higress 介绍</h2>\n<p><a href=\"https://github.com/alibaba/higress\" rel=\"nofollow\">Higress</a> 是基于阿里巴巴内部两年多的 Envoy Gateway 实践沉淀，以开源 Istio 与 Envoy 为核心构建的下一代云原生网关。Higress 实现了安全防护网关、流量网关、微服务网关三层网关合一，可以显著降低网关的部署和运维成本。</p>\n<p>官网地址： <a href=\"https://higress.cn\" rel=\"nofollow\">https://higress.cn</a></p>\n<p>GitHub 地址： <a href=\"https://github.com/alibaba/higress\" rel=\"nofollow\">https://github.com/alibaba/higress</a></p>\n<p>Higress 作为云原生网关的核心优势如下：</p>\n<h3>易用性</h3>\n<p>“云原生”已经不再是一个新鲜词，但企业对云原生技术的学习使用成本仍有许多顾虑，对云原生新标准的追赶又有很多焦虑；</p>\n<p>Higress 同时提供了本地安装/生产部署的 quickstart ，可以一键部署，并通过控制台操作快速上手；基于简单易用的控制台，Higress 可以封装 Ingress/Gateway API 的标准细节，根治技术追赶焦虑。</p>\n<h3>标准化</h3>\n<p>K8s 带来了云原生的路由标准 Ingress/Gateway API ，如同 POSIX 定义 Unix 可移植操作系统标准，历时 35 年经久不衰，云原生的路由标准的生命周期一定会远超过 K8s 本身；</p>\n<p>Higress 结合阿里内部实践以及阿里云产品沉淀，积累了基于 Ingress API 的丰富的路由策略扩展能力，同时还兼容大部分 Nginx Ingress 能力，这些能力后续也将在 Gateway API 上支持。</p>\n<h3>高集成</h3>\n<p>企业内有大量传统架构部署的服务，会成为向云原生架构演进的技术负担，要求云原生网关具备对接异构服务架构的能力；</p>\n<p>基于 Higress 提供的多种服务发现机制，网关路由不仅可以转发到 K8s 服务，也可以直接配置 IP 转发到到物理机上的服务；基于 Nacos/ZooKeeper 等注册中心对接，还可以轻松实现 Spring Cloud 和 Dubbo 微服务的路由，无论其是否部署在 K8s 内。</p>\n<h3>易扩展</h3>\n<p>基于扩展机制进行二次开发的能力，是云原生网关在不同业务场景下都能适配落地的关键；</p>\n<p>Higress 提供了灵活的插件扩展机制，目前插件市场已经推出多个官方插件，并支持用户通过控制台直接上传自己开发的插件，同时开源社区的插件市场生态也在不断建设中。</p>\n<h3>热更新</h3>\n<p>传统 Nginx 更新规则需要 reload 会导致链接抖动，导致流量损失，对实时通信、视频、IOT 无法容忍；</p>\n<p>对于路由规则，Wasm 插件逻辑更新，以及证书改动等等，Higress 全部支持热更新，不会造成任何连接抖动。</p>\n<h2>Higress 全局配置</h2>\n<p>下文将介绍 Higress 全局配置控制面实现机制，Higress 数据面基于 Envoy 是 C++ 语言开发，控制面则是基于 Go 语言开发。控制面的开发上手门槛还是很低的，欢迎有更多同学参与贡献。社区也有多个学习兴趣小组，欢迎加入学习： <a href=\"https://github.com/alibaba/higress/issues?q=is%3Aopen+is%3Aissue+label%3A%22learning+to+share%22\" rel=\"nofollow\">https://github.com/alibaba/higress/issues?q=is%3Aopen+is%3Aissue+label%3A%22learning+to+share%22</a></p>\n<p>Higress 有个全局配置 ConfigMap 对象 higress-config ，参考配置如下：</p>\n<pre><code class=\"language-yaml\">apiVersion: v1\ndata:\n  higress: |-\n    tracing:\n      enable: true\n      sampling: 100\n      timeout: 500\n      skywalking:\n       service: skywalking-oap-server.op-system.svc.cluster.local\n       port: 11800\n...\n...\nkind: ConfigMap\nmetadata:\n  name: higress-config\n  namespace: higress-system\n</code></pre>\n<p>具体配置说明请参考 <a href=\"https://higress.io/zh-cn/docs/user/configmap\" rel=\"nofollow\">Higress 全局配置说明文档</a>，\n本文介绍以 Tracing 为例，详细说明 Tracing 全局配置是如何转成 EnvoyFilter 和如何同时实现实时下发到 Higress Gateway 过程。</p>\n<p>本文涉及整体架构流程、初始化过程和启动、higress-config 变更和处理流程、通知 XDSUpdater 、构建 EnvoyFilter 和下发以及如何扩展全局配置等内容。</p>\n<h2>整体架构流程</h2>\n<h3>1. 整体架构</h3>\n<p><img alt=\"img.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://higress.io/zh-cn/assets/images/configmap1-f2447fa1bd9826e78e29bcdf1f38a4ca.png\"/></p>\n<h3>2. 核心组件</h3>\n<ul>\n<li>IngressConfig</li>\n</ul>\n<p>IngressConfig 是 Higress 一个核心结构体, 负责监控 Ingress ，McpBridge, Http2Rpc, WasmPlugin 等 k8s 资源， 同时集成 ConfigStore Interface ，通过 List 接口下发 VirtualService, DestinationRule, EnvoyFilter, ServiceEntry, WasmPlugin 等 CR 资源。</p>\n<ul>\n<li>ConfigmapMgr</li>\n</ul>\n<p>ConfigmapMgr 结构体负责整个核心流程，包括通过 Informer List/Watch 机制监控 higress-config 的变更，同时遍历 ItemControllers 下发变更通知，提供构建 EnvoyFilter 列表等功能。</p>\n<ul>\n<li>TracingController</li>\n</ul>\n<p>TracingController 结构体负责具体的 Tracing 数据校验，构建 Tracing EnvoyFilter, 以及通过 ItemEventHandler 下发变更通知等。</p>\n<ul>\n<li>HigressConfig</li>\n</ul>\n<p>HigressConfig 是 higress-config Configmap 所对应数据的结构体。</p>\n<h3>3. 核心流程</h3>\n<ul>\n<li>用 Informer List/Watch 机制监控 higress-config 变更，校验变更，同时保存变更后数据。</li>\n<li>用变更数据构建 EnvoyFilter 。</li>\n<li>通知 XDSUpdater ，EnvoyFilter 有变更，重新拉取新的 EnvoyFilter 列表。</li>\n</ul>\n<h2>初始化过程</h2>\n<h3>1. 初始化入口</h3>\n<p>初始化过程入口在 NewIngressConfig ， 初始化 IngressConfig 时同时构建 HigressConfigController 和 ConfigmapMgr 。</p>\n<pre><code class=\"language-golang\">// pkg/ingress/config/ingress_config.go\nfunc NewIngressConfig(localKubeClient kube.Client, XDSUpdater model.XDSUpdater, namespace, clusterId string) *IngressConfig {\n\t// ...\n\t\n\t// 构建 controller 和 configmapMgr\n\thigressConfigController := configmap.NewController(localKubeClient, clusterId, namespace)\n\tconfig.configmapMgr = configmap.NewConfigmapMgr(XDSUpdater, namespace, higressConfigController, higressConfigController.Lister())\n\n\treturn config\n}\n</code></pre>\n<h3>2. HigressConfigController 初始化</h3>\n<p>通过 Higress 提供 NewCommonController 初始化 HigressConfigController 用于监听 higress-system 命名空间下 Configmap 的变化。</p>\n<pre><code class=\"language-golang\">// pkg/ingress/kube/configmap/controller.go\ntype HigressConfigController controller.Controller[listersv1.ConfigMapNamespaceLister]\n\nfunc NewController(client kubeclient.Client, clusterId string, namespace string) HigressConfigController {\n\tinformer := client.KubeInformer().Core().V1().ConfigMaps().Informer()\n\treturn controller.NewCommonController(\"higressConfig\", client.KubeInformer().Core().V1().ConfigMaps().Lister().ConfigMaps(namespace),\n\t\tinformer, GetConfigmap, clusterId)\n}\n\nfunc GetConfigmap(lister listersv1.ConfigMapNamespaceLister, namespacedName types.NamespacedName) (controllers.Object, error) {\n\treturn lister.Get(namespacedName.Name)\n}\n</code></pre>\n<h3>3. ConfigmapMgr 初始化</h3>\n<p>ConfigmapMgr 初始化具体步骤如下：</p>\n<ul>\n<li>构建 ConfigmapMgr</li>\n<li>设置 HigressConfigController configmap 新增或者更新回调函数为 configmapMgr.AddOrUpdateHigressConfig</li>\n<li>设置 HigressConfig 结构体默认值</li>\n<li>初始化 TracingController</li>\n<li>把 tracingController 添加到 configmapMgr itemControllers 数组里</li>\n<li>初始化 ItemEventHandler ， 同时遍历 itemControllers ，设置 ItemEventHandler</li>\n</ul>\n<pre><code class=\"language-golang\">// pkg/ingress/kube/configmap/controller.go\nfunc NewConfigmapMgr(XDSUpdater model.XDSUpdater, namespace string, higressConfigController HigressConfigController, higressConfigLister listersv1.ConfigMapNamespaceLister) *ConfigmapMgr {\n    //  构建 ConfigmapMgr\n\tconfigmapMgr := &amp;ConfigmapMgr{\n\t\tXDSUpdater:              XDSUpdater,\n\t\tNamespace:               namespace,\n\t\tHigressConfigController: higressConfigController,\n\t\tHigressConfigLister:     higressConfigLister,\n\t\thigressConfig:           atomic.Value{},\n\t}\n\t// 设置 HigressConfigController configmap 新增或者更新回调函数 configmapMgr.AddOrUpdateHigressConfig\n\tconfigmapMgr.HigressConfigController.AddEventHandler(configmapMgr.AddOrUpdateHigressConfig)\n\t// 设置 HigressConfig 结构体默认值\n\tconfigmapMgr.SetHigressConfig(NewDefaultHigressConfig())\n\n\t// 初始化 TracingController\n\ttracingController := NewTracingController(namespace)\n\t// 把 tracingController 添加到 configmapMgr itemControllers 里\n\tconfigmapMgr.AddItemControllers(tracingController)\n\t// 初始化 itemEventHandler ， 同时遍历 itemControllers ，设置 itemEventHandler\n\tconfigmapMgr.initEventHandlers()\n\n\t// 返回 configmapMgr\n\treturn configmapMgr\n}\n</code></pre>\n<h2>启动</h2>\n<p>在 IngressConfig 添加 HigressConfigController Run() 和 HasSynced() 控制流程。</p>\n<pre><code class=\"language-golang\">// pkg/ingress/config/ingress_config.go\nfunc (m *IngressConfig) Run(stop &lt;-chan struct{}) {\n\t// ...\n\t// 启动 HigressConfigController\n\tgo m.configmapMgr.HigressConfigController.Run(stop)\n}\n\nfunc (m *IngressConfig) HasSynced() bool {\n\t// ....\n\tif !m.configmapMgr.HigressConfigController.HasSynced() {\n\t\treturn false\n\t}\n}\n</code></pre>\n<h2>higress-config 变更和处理流程</h2>\n<h3>1. configmapMgr 变更处理</h3>\n<p>ConfigmapMgr 通过收到 HigressConfigController 通知来处理变更请求。</p>\n<p>具体变更流程如下：</p>\n<ul>\n<li>判断是否 higress-system 命名空间下 name 为 higress-config Configmap 发生了变化，如果不是就返回。</li>\n<li>获取 higress-config 内容。</li>\n<li>遍历 ItemControllers, 校验 higress-config 配置是否合法，如果有一个返回不合法，就返回。</li>\n<li>和上次保存在本地 higressConfig 比对, 检查这次数据是否有变化，如果没有变化就返回。</li>\n<li>如果数据有变化，就遍历 ItemControllers 通知每个 itemController 数据有变化，同时保存这次变化到本地 higressConfig 。</li>\n</ul>\n<pre><code class=\"language-golang\">// pkg/ingress/kube/configmap/controller.go\nfunc (c *ConfigmapMgr) AddOrUpdateHigressConfig(name util.ClusterNamespacedName) {\n\t// 只监听 higress-system 命名空间下 name 为 higress-config Configmap 的变化\n\tif name.Namespace != c.Namespace || name.Name != HigressConfigMapName {\n\t\treturn\n\t}\n    // ...\n\t// 获取 higress-config 内容\n\thigressConfigmap, err := c.HigressConfigLister.Get(HigressConfigMapName)\n\t\n\t// 通过 yaml.Unmarshal 转成 HigressConfig\n\tnewHigressConfig := NewDefaultHigressConfig()\n\tif err = yaml.Unmarshal([]byte(higressConfigmap.Data[HigressConfigMapKey]), newHigressConfig); err != nil {\n\t\tIngressLog.Errorf(\"data:%s,  convert to higress config error, error: %+v\", higressConfigmap.Data[HigressConfigMapKey], err)\n\t\treturn\n\t}\n\n\t// ...\n\t// 遍历 ItemControllers, 校验配置是否合法\n\tfor _, itemController := range c.ItemControllers {\n\t\tif itemErr := itemController.ValidHigressConfig(newHigressConfig); itemErr != nil {\n\t\t\tIngressLog.Errorf(\"configmap %s controller valid higress config error, error: %+v\", itemController.GetName(), itemErr)\n\t\t\treturn\n\t\t}\n\t}\n\n\t// 和上次比对这次数据是否有变更\n\toldHigressConfig := c.GetHigressConfig()\n\tresult, _ := c.CompareHigressConfig(oldHigressConfig, newHigressConfig)\n    // ...\n\t// 如果数据有变更，就遍历 ItemControllers 通知每个 itemController 数据有变更，同时保存这次变更到本地。\n\tif result == ResultReplace || result == ResultDelete {\n\t\tfor _, itemController := range c.ItemControllers {\n\t\t\tIngressLog.Infof(\"configmap %s controller AddOrUpdateHigressConfig\", itemController.GetName())\n\t\t\tif itemErr := itemController.AddOrUpdateHigressConfig(name, oldHigressConfig, newHigressConfig); itemErr != nil {\n\t\t\t\tIngressLog.Errorf(\"configmap %s controller AddOrUpdateHigressConfig error, error: %+v\", itemController.GetName(), itemErr)\n\t\t\t}\n\t\t}\n\t\t// 保存这次变更\n\t\tc.SetHigressConfig(newHigressConfig)\n\t}\n}\n</code></pre>\n<h3>2. TracingController 变更处理</h3>\n<p>TracingController 变更处理就比较简单：</p>\n<ul>\n<li>检查 Tracing 这部分数据是否有变更。</li>\n<li>如果有变更，DeepCopy 一份 Tracing 数据保存到本地，同时通过 eventHandler 下发变更通知。</li>\n</ul>\n<pre><code class=\"language-golang\">// pkg/ingress/kube/configmap/tracing.go\nfunc (t *TracingController) AddOrUpdateHigressConfig(name util.ClusterNamespacedName, old *HigressConfig, new *HigressConfig) error {\n\t// ...\n\t// 检查 Tracing 部分数据是否有变更\n\tresult, _ := compareTracing(old.Tracing, new.Tracing)\n\n\t// 如果有变更，DeepCopy 一份 Tracing 数据保存到本地，同时通过 eventHandler 下发变更通知\n\tswitch result {\n\tcase ResultReplace:\n\t\tif newTracing, err := deepCopyTracing(new.Tracing); err != nil {\n\t\t\tIngressLog.Infof(\"tracing deepcopy error:%v\", err)\n\t\t} else {\n\t\t\tt.SetTracing(newTracing)\n\t\t\tIngressLog.Infof(\"AddOrUpdate Higress config tracing\")\n\t\t\tt.eventHandler(higressTracingEnvoyFilterName)\n\t\t\tIngressLog.Infof(\"send event with filter name:%s\", higressTracingEnvoyFilterName)\n\t\t}\n\tcase ResultDelete:\n\t\tt.SetTracing(NewDefaultTracing())\n\t\tIngressLog.Infof(\"Delete Higress config tracing\")\n\t\tt.eventHandler(higressTracingEnvoyFilterName)\n\t\tIngressLog.Infof(\"send event with filter name:%s\", higressTracingEnvoyFilterName)\n\t}\n\n\treturn nil\n}\n</code></pre>\n<h2>通知 XDSUpdater</h2>\n<p>在 ConfigmapMgr 初始化时候调用 configmapMgr.initEventHandlers()， 这个 func 会创建 ItemEventHandler, 同时遍历 ItemControllers 设置 ItemEventHandler 。</p>\n<pre><code class=\"language-golang\">// pkg/ingress/kube/configmap/config.go\ntype ItemEventHandler = func(name string)\n\n// pkg/ingress/kube/configmap/controller.go\nfunc (c *ConfigmapMgr) initEventHandlers() error {\n    itemEventHandler := func(name string) {\n    c.XDSUpdater.ConfigUpdate(&amp;model.PushRequest{\n        Full: true,\n        ConfigsUpdated: map[model.ConfigKey]struct{}{{\n            Kind:      gvk.EnvoyFilter,\n            Name:      name,\n            Namespace: c.Namespace,\n        }: {}},\n        Reason: []model.TriggerReason{ModelUpdatedReason},\n        })\n    }\n    \n    for _, itemController := range c.ItemControllers {\n\t\titemController.RegisterItemEventHandler(itemEventHandler)\n    }\n    \n    return nil\n}\n</code></pre>\n<p>这里 XDSUpdater 是从 IngressConfig 初始化传入，XDSUpdater.ConfigUpdate() 用于更新通知下发。</p>\n<p>进一步跟踪可以发现在 Higress controller server 启动时执行 s.initXdsServer 函数创建 s.xdsServer ，具体逻辑不在本文讨论范围, 有兴趣可以进一步阅读源码。</p>\n<pre><code class=\"language-golang\">// pkg/bootstrap/server.go\nfunc NewServer(args *ServerArgs) (*Server, error) {\n\t// ...\n\ts := &amp;Server{\n\t\tServerArgs:      args,\n\t\thttpMux:         http.NewServeMux(),\n\t\tenvironment:     e,\n\t\treadinessProbes: make(map[string]readinessProbe),\n\t\tserver:          server.New(),\n\t}\n\ts.environment.Watcher = mesh.NewFixedWatcher(&amp;v1alpha1.MeshConfig{})\n\ts.environment.Init()\n\tinitFuncList := []func() error{\n\t\ts.initKubeClient,\n\t\ts.initXdsServer,\n\t\ts.initHttpServer,\n\t\ts.initConfigController,\n\t\ts.initRegistryEventHandlers,\n\t\ts.initAuthenticators,\n\t}\n\n\tfor _, f := range initFuncList {\n\t\tif err := f(); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\t// ...\n\treturn s, nil\n}\n\n// pkg/bootstrap/server.go\nfunc (s *Server) initXdsServer() error {\n    log.Info(\"init xds server\")\n    s.xdsServer = xds.NewDiscoveryServer(s.environment, nil, PodName, PodNamespace, s.RegistryOptions.KubeOptions.ClusterAliases)\n    // ...\n    return s.initGrpcServer()\n}\n</code></pre>\n<h2>构建和下发 EnvoyFilters</h2>\n<h3>1. IngressConfig List 下发 EnvoyFilters 列表</h3>\n<p>IngressConfig List 用于 VirtualService, DestinationRule, EnvoyFilter, ServiceEntry, WasmPlugin 等 CR 资源下发， 这里主要关注 EnvoyFilter CR 资源下发。</p>\n<pre><code class=\"language-golang\">// pkg/ingress/config/ingress_config.go\nfunc (m *IngressConfig) List(typ config.GroupVersionKind, namespace string) ([]config.Config, error) {\n\tif typ != gvk.Gateway &amp;&amp;\n\t\ttyp != gvk.VirtualService &amp;&amp;\n\t\ttyp != gvk.DestinationRule &amp;&amp;\n\t\ttyp != gvk.EnvoyFilter &amp;&amp;\n\t\ttyp != gvk.ServiceEntry &amp;&amp;\n\t\ttyp != gvk.WasmPlugin {\n\t\treturn nil, common.ErrUnsupportedOp\n\t}\n\t// ...\n\tif typ == gvk.EnvoyFilter {\n\t\tm.mutex.RLock()\n\t\tdefer m.mutex.RUnlock()\n\t\tvar envoyFilters []config.Config\n\t\t\n\t\t// 调用 ConfigmapMgr ConstructEnvoyFilters 获取需要下发 EnvoyFilter 列表\n\t\tconfigmapEnvoyFilters, err := m.configmapMgr.ConstructEnvoyFilters()\n\t\tif err != nil {\n\t\t\tIngressLog.Errorf(\"Construct configmap EnvoyFilters error %v\", err)\n\t\t} else {\n\t\t\tfor _, envoyFilter := range configmapEnvoyFilters {\n\t\t\t\tenvoyFilters = append(envoyFilters, *envoyFilter)\n\t\t\t}\n\t\t\tIngressLog.Infof(\"Append %d configmap EnvoyFilters\", len(configmapEnvoyFilters))\n\t\t}\n\t\tif len(envoyFilters) == 0 {\n\t\t\tIngressLog.Infof(\"resource type %s, configs number %d\", typ, len(m.cachedEnvoyFilters))\n\t\t\treturn m.cachedEnvoyFilters, nil\n\t\t}\n\t\t// 需要下发 configmap EnvoyFilter 列表 和 m.cachedEnvoyFilters 列表聚合一下下发\n\t\tenvoyFilters = append(envoyFilters, m.cachedEnvoyFilters...)\n\t\tIngressLog.Infof(\"resource type %s, configs number %d\", typ, len(envoyFilters))\n\t\treturn envoyFilters, nil\n\t}\n\t\n}\t\n</code></pre>\n<p>调用 ConfigmapMgr ConstructEnvoyFilters 获取需要下发 EnvoyFilter 列表， 同时和 m.cachedEnvoyFilters 列表聚合一下再下发。</p>\n<p>这里 m.cachedEnvoyFilters 是在构建 VirtualService 时生成，有兴趣可以进一步阅读 IngressConfig 源码。</p>\n<h3>2. ConfigmapMgr 构建 EnvoyFilter 列表</h3>\n<p>这里比较简单，遍历一下 ItemControllers ，聚合每个 itemController 返回的 EnvoyFilters.</p>\n<pre><code class=\"language-golang\">// /pkg/ingress/kube/configmap/controller.go\nfunc (c *ConfigmapMgr) ConstructEnvoyFilters() ([]*config.Config, error) {\n\tconfigs := make([]*config.Config, 0)\n\tfor _, itemController := range c.ItemControllers {\n\t\tIngressLog.Infof(\"controller %s ConstructEnvoyFilters\", itemController.GetName())\n\t\tif itemConfigs, err := itemController.ConstructEnvoyFilters(); err != nil {\n\t\t\tIngressLog.Errorf(\"controller %s ConstructEnvoyFilters error, error: %+v\", itemController.GetName(), err)\n\t\t} else {\n\t\t\tconfigs = append(configs, itemConfigs...)\n\t\t}\n\t}\n\treturn configs, nil\n}\n</code></pre>\n<h3>3. TracingController 构建 EnvoyFilters</h3>\n<p>这里就比较简单，根据保存的 Tracing 数据构建对应的 EnvoyFilter</p>\n<pre><code class=\"language-golang\">// pkg/ingress/kube/configmap/tracing.go\nfunc (t *TracingController) ConstructEnvoyFilters() ([]*config.Config, error) {\n\t// ...\n\ttracingConfig := t.constructTracingTracer(tracing, namespace)\n\tif len(tracingConfig) == 0 {\n\t\treturn configs, nil\n\t}\n\n\tconfig := &amp;config.Config{\n\t\tMeta: config.Meta{\n\t\t\tGroupVersionKind: gvk.EnvoyFilter,\n\t\t\tName:             higressTracingEnvoyFilterName,\n\t\t\tNamespace:        namespace,\n\t\t},\n\t\tSpec: &amp;networking.EnvoyFilter{\n\t\t\tConfigPatches: []*networking.EnvoyFilter_EnvoyConfigObjectPatch{\n\t\t\t\t{\n\t\t\t\t\tApplyTo: networking.EnvoyFilter_NETWORK_FILTER,\n\t\t\t\t\tMatch: &amp;networking.EnvoyFilter_EnvoyConfigObjectMatch{\n\t\t\t\t\t\tContext: networking.EnvoyFilter_GATEWAY,\n\t\t\t\t\t\tObjectTypes: &amp;networking.EnvoyFilter_EnvoyConfigObjectMatch_Listener{\n\t\t\t\t\t\t\tListener: &amp;networking.EnvoyFilter_ListenerMatch{\n\t\t\t\t\t\t\t\tFilterChain: &amp;networking.EnvoyFilter_ListenerMatch_FilterChainMatch{\n\t\t\t\t\t\t\t\t\tFilter: &amp;networking.EnvoyFilter_ListenerMatch_FilterMatch{\n\t\t\t\t\t\t\t\t\t\tName: \"envoy.filters.network.http_connection_manager\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tPatch: &amp;networking.EnvoyFilter_Patch{\n\t\t\t\t\t\tOperation: networking.EnvoyFilter_Patch_MERGE,\n\t\t\t\t\t\tValue:     util.BuildPatchStruct(tracingConfig),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tApplyTo: networking.EnvoyFilter_HTTP_FILTER,\n\t\t\t\t\tMatch: &amp;networking.EnvoyFilter_EnvoyConfigObjectMatch{\n\t\t\t\t\t\tContext: networking.EnvoyFilter_GATEWAY,\n\t\t\t\t\t\tObjectTypes: &amp;networking.EnvoyFilter_EnvoyConfigObjectMatch_Listener{\n\t\t\t\t\t\t\tListener: &amp;networking.EnvoyFilter_ListenerMatch{\n\t\t\t\t\t\t\t\tFilterChain: &amp;networking.EnvoyFilter_ListenerMatch_FilterChainMatch{\n\t\t\t\t\t\t\t\t\tFilter: &amp;networking.EnvoyFilter_ListenerMatch_FilterMatch{\n\t\t\t\t\t\t\t\t\t\tName: \"envoy.filters.network.http_connection_manager\",\n\t\t\t\t\t\t\t\t\t\tSubFilter: &amp;networking.EnvoyFilter_ListenerMatch_SubFilterMatch{\n\t\t\t\t\t\t\t\t\t\t\tName: \"envoy.filters.http.router\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tPatch: &amp;networking.EnvoyFilter_Patch{\n\t\t\t\t\t\tOperation: networking.EnvoyFilter_Patch_MERGE,\n\t\t\t\t\t\tValue: util.BuildPatchStruct(`{\n\t\t\t\t\t\t\t\"name\":\"envoy.filters.http.router\",\n\t\t\t\t\t\t\t\"typed_config\":{\n\t\t\t\t\t\t\t\t\"@type\": \"type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\",\n\t\t\t\t\t\t\t\t\"start_child_span\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}`),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tconfigs = append(configs, config)\n\treturn configs, nil\n}\n</code></pre>\n<h2>如何扩展全局配置</h2>\n<h3>1. HigressConfig 结构体添加对应的扩展配置</h3>\n<pre><code class=\"language-golang\">type HigressConfig struct {\n\tTracing *Tracing `json:\"tracing,omitempty\"`\n\t// 在这里添加对应的数据结构来扩展配置\n}\n</code></pre>\n<h3>2. 增加扩展配置默认值</h3>\n<pre><code class=\"language-golang\">// pkg/ingress/kube/configmap/config.go\nfunc NewDefaultHigressConfig() *HigressConfig {\n\thigressConfig := &amp;HigressConfig{\n\t\tTracing: NewDefaultTracing(),\n\t\t// 在这里增加扩展配置默认值\n\t}\n\treturn higressConfig\n}\n</code></pre>\n<h3>3. 实现 ItemController interface</h3>\n<pre><code class=\"language-golang\">type ItemController interface {\n\tGetName() string\n\tAddOrUpdateHigressConfig(name util.ClusterNamespacedName, old *HigressConfig, new *HigressConfig) error\n\tValidHigressConfig(higressConfig *HigressConfig) error\n\tConstructEnvoyFilters() ([]*config.Config, error)\n\tRegisterItemEventHandler(eventHandler ItemEventHandler)\n}\n</code></pre>\n<h3>4. 初始化扩展配置，同时添加到 ItemControllers</h3>\n<pre><code class=\"language-golang\">func NewConfigmapMgr(XDSUpdater model.XDSUpdater, namespace string, higressConfigController HigressConfigController, higressConfigLister listersv1.ConfigMapNamespaceLister) *ConfigmapMgr {\n\t// ...\n\ttracingController := NewTracingController(namespace)\n\tconfigmapMgr.AddItemControllers(tracingController)\n\t// ...\n\t// 在这里初始化扩展配置，同时添加到 ItemControllers\n\tconfigmapMgr.initEventHandlers()\n\n\treturn configmapMgr\n}\n</code></pre>\n<h2>参与社区贡献</h2>\n<p>Higress 开源贡献小组正在火热招募贡献者。早期参与开源更容易成为项目 Committer ，并有更多机会成为 Higress PMC(Project Management Committee) 的一员，参与主导 Higress 社区的前进方向。\n欢迎加入 Higress 社区群：</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://img.alicdn.com/imgextra/i1/O1CN0166Gkdt1cRTVjJ2skL_%21%216000000003597-2-tps-720-405.png\"/></p>\n", "last_modified": 1690370849, "replies": 76, "id": 959994}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 207731, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3885, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 486923, "username": "YVAN7123", "url": "https://www.v2ex.com/u/YVAN7123", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/2faf/3b44/486923_mini.png?m=1620717280", "avatar_normal": "https://cdn.v2ex.com/avatar/2faf/3b44/486923_normal.png?m=1620717280", "avatar_large": "https://cdn.v2ex.com/avatar/2faf/3b44/486923_large.png?m=1620717280", "created": 1588123987, "last_modified": 1620717280}, "last_reply_by": "echaos", "last_touched": 1690399348, "title": "特斯拉为啥卖的这么好？", "url": "https://www.v2ex.com/t/959951", "created": 1690362551, "deleted": 0, "content": "2023 年 6 月 销量中 Model 3\t22741 在同款中排第二。\r\n\r\n周围的人总是问我，为啥特斯拉卖的这么好？\r\n有没有大佬说一下，为啥呢", "content_rendered": "<p>2023 年 6 月 销量中 Model 3\t22741 在同款中排第二。</p>\n<p>周围的人总是问我，为啥特斯拉卖的这么好？\n有没有大佬说一下，为啥呢</p>\n", "last_modified": 1690362551, "replies": 73, "id": 959951}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/fc22/1309/181_large.png?m=1608240651", "name": "travel", "avatar_normal": "https://cdn.v2ex.com/navatar/fc22/1309/181_normal.png?m=1608240651", "title": "旅行", "url": "https://www.v2ex.com/go/travel", "topics": 825, "footer": "", "header": "你会把上大学的学费用来环游世界么？", "title_alternative": "Travel", "avatar_mini": "https://cdn.v2ex.com/navatar/fc22/1309/181_mini.png?m=1608240651", "stars": 939, "aliases": [], "root": false, "id": 181, "parent_node_name": "life"}, "member": {"id": 608779, "username": "fnmgzbv2", "url": "https://www.v2ex.com/u/fnmgzbv2", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/aa3af0f78b6d63bc34184e39ffaa8c28?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/aa3af0f78b6d63bc34184e39ffaa8c28?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/aa3af0f78b6d63bc34184e39ffaa8c28?s=73&d=retro", "created": 1672550456, "last_modified": 1672550456}, "last_reply_by": "dann73580", "last_touched": 1690396353, "title": "油车自驾车队里的纯电车", "url": "https://www.v2ex.com/t/959740", "created": 1690331569, "deleted": 0, "content": "长途自驾游，其中有一对准备开纯油车一起去，因为每天的行进距离大概都已经定好了，高速上面的起步阶段，一天可能就要跑 700km 左右，目的地后每天都接近 3-4 百 km ，在高速休息站放水休息的 10 来分钟，电车能搞定补能吗？哎…", "content_rendered": "长途自驾游，其中有一对准备开纯油车一起去，因为每天的行进距离大概都已经定好了，高速上面的起步阶段，一天可能就要跑 700km 左右，目的地后每天都接近 3-4 百 km ，在高速休息站放水休息的 10 来分钟，电车能搞定补能吗？哎…", "last_modified": 1690331569, "replies": 66, "id": 959740}]