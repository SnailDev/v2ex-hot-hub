[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/03af/dbd6/63_large.png?m=1596211530", "name": "java", "avatar_normal": "https://cdn.v2ex.com/navatar/03af/dbd6/63_normal.png?m=1596211530", "title": "Java", "url": "https://www.v2ex.com/go/java", "topics": 4508, "footer": "", "header": "The most popular programming language.", "title_alternative": "Java", "avatar_mini": "https://cdn.v2ex.com/navatar/03af/dbd6/63_mini.png?m=1596211530", "stars": 4590, "aliases": [], "root": false, "id": 63, "parent_node_name": "programming"}, "member": {"username": "pigbug", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/6092/341d/551286_mini.png?m=1626830698", "bio": "", "url": "https://www.v2ex.com/u/pigbug", "tagline": "", "twitter": null, "created": 1626744816, "avatar_large": "https://cdn.v2ex.com/avatar/6092/341d/551286_mini.png?m=1626830698", "avatar_mini": "https://cdn.v2ex.com/avatar/6092/341d/551286_mini.png?m=1626830698", "location": "", "btc": null, "id": 551286}, "last_reply_by": "SawyerGuo", "last_touched": 1627714968, "title": "Java 都这么多年过去了，生产级别数据库操作库除了 JPA 和 Mybatis 还有什么？ JPA 和 mybatis-plus 比优势在什么地方？", "url": "https://www.v2ex.com/t/792830", "created": 1627695238, "content": "", "content_rendered": "", "last_modified": 1627695416, "replies": 49, "id": 792830}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1615111825", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1615111825", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 15476, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1615111825", "stars": 1879, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"username": "Helsing", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/b67f/7398/269646_mini.png?m=1607050489", "bio": null, "url": "https://www.v2ex.com/u/Helsing", "tagline": null, "twitter": null, "created": 1511425689, "avatar_large": "https://cdn.v2ex.com/avatar/b67f/7398/269646_mini.png?m=1607050489", "avatar_mini": "https://cdn.v2ex.com/avatar/b67f/7398/269646_mini.png?m=1607050489", "location": null, "btc": null, "id": 269646}, "last_reply_by": "honjow", "last_touched": 1627725681, "title": "百度贴吧是怎么做到让 iOS 卡死的", "url": "https://www.v2ex.com/t/792836", "created": 1627701442, "content": "iOS 版的贴吧经常可以把系统卡死，只要列表滑的多一点，就会出现界面卡死 /后台界面无法上滑杀死应用 /系统卡死无响应。<br><br>百度是怎么做出这么垃圾的东西的……", "content_rendered": "<p>iOS 版的贴吧经常可以把系统卡死，只要列表滑的多一点，就会出现界面卡死 /后台界面无法上滑杀死应用 /系统卡死无响应。<br/><br/>百度是怎么做出这么垃圾的东西的……</p>\n", "last_modified": 1627701442, "replies": 34, "id": 792836}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/e7b2/4b11/360_large.png?m=1583044904", "name": "windows", "avatar_normal": "https://cdn.v2ex.com/navatar/e7b2/4b11/360_normal.png?m=1583044904", "title": "Windows", "url": "https://www.v2ex.com/go/windows", "topics": 2147, "footer": "", "header": "Windows, not walls.", "title_alternative": "Windows", "avatar_mini": "https://cdn.v2ex.com/navatar/e7b2/4b11/360_mini.png?m=1583044904", "stars": 714, "aliases": [], "root": false, "id": 360, "parent_node_name": "os"}, "member": {"username": "Tumblr", "website": "https://www.tumblr.com", "github": "tumblr", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/3122/ad46/344778_mini.png?m=1614787862", "bio": "A microblogging and social networking website founded by David Karp in 2007, and owned by Oath Inc.", "url": "https://www.v2ex.com/u/Tumblr", "tagline": "Come for what you love, stay for what you discover.", "twitter": "tumblr", "created": 1535382604, "avatar_large": "https://cdn.v2ex.com/avatar/3122/ad46/344778_mini.png?m=1614787862", "avatar_mini": "https://cdn.v2ex.com/avatar/3122/ad46/344778_mini.png?m=1614787862", "location": "New York City", "btc": "", "id": 344778}, "last_reply_by": "waising", "last_touched": 1627725718, "title": "Windows 11 已经可以在 Beta 通道更新", "url": "https://www.v2ex.com/t/792818", "created": 1627666308, "content": "据[微软 7 月 29 日讯]( https://blogs.windows.com/windows-insider/2021/07/22/announcing-windows-11-insider-preview-build-22000-100/)（也就是北京时间的 7 月 30 日了），“我们很得瑟地宣布，我们已经把 Windows 11 全民测试版弄进 beta 通道了！”  \r\n> We are very excited to announce we are releasing Windows 11 Insider Preview Build 22000.100 to Windows Insiders in the Beta Channel! \r\n\r\n刚刚把工作电脑加进了 beta 通道，已经下载了 51%了，看看会有什么坑。\r\n\r\n\r\n另外，据说微软在 Windows 11 中永久解决了蓝屏的问题，因为 BSOD 已经变成[Black Screen of Death]( https://www.theverge.com/2021/7/1/22559852/microsoft-windows-11-black-blue-screen-of-death-bsod-change)了。  \r\n随着行业的标准化，将来的 Windows 11 BSOD 和 Mac OS 的五国起码在颜色和闹心程度上变得更统一了。", "content_rendered": "<p>据<a href=\"https://blogs.windows.com/windows-insider/2021/07/22/announcing-windows-11-insider-preview-build-22000-100/\" rel=\"nofollow\">微软 7 月 29 日讯</a>（也就是北京时间的 7 月 30 日了），“我们很得瑟地宣布，我们已经把 Windows 11 全民测试版弄进 beta 通道了！”  </p>\n<blockquote>\n<p>We are very excited to announce we are releasing Windows 11 Insider Preview Build 22000.100 to Windows Insiders in the Beta Channel! </p>\n</blockquote>\n<p>刚刚把工作电脑加进了 beta 通道，已经下载了 51%了，看看会有什么坑。</p>\n<p>另外，据说微软在 Windows 11 中永久解决了蓝屏的问题，因为 BSOD 已经变成<a href=\"https://www.theverge.com/2021/7/1/22559852/microsoft-windows-11-black-blue-screen-of-death-bsod-change\" rel=\"nofollow\">Black Screen of Death</a>了。<br/>\n随着行业的标准化，将来的 Windows 11 BSOD 和 Mac OS 的五国起码在颜色和闹心程度上变得更统一了。</p>\n", "last_modified": 1627666308, "replies": 32, "id": 792818}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1622572533", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1622572533", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 174957, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1622572533", "stars": 3285, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"username": "t298", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/e79d/b5da/462819_mini.png?m=1588996252", "bio": null, "url": "https://www.v2ex.com/u/t298", "tagline": null, "twitter": null, "created": 1577968223, "avatar_large": "https://cdn.v2ex.com/avatar/e79d/b5da/462819_mini.png?m=1588996252", "avatar_mini": "https://cdn.v2ex.com/avatar/e79d/b5da/462819_mini.png?m=1588996252", "location": null, "btc": null, "id": 462819}, "last_reply_by": "Kininaru", "last_touched": 1627725554, "title": "租的房子有个这样的窗台，怎么折腾一下可以看起来好点呢？", "url": "https://www.v2ex.com/t/792843", "created": 1627703161, "content": "![]( https://raw.githubusercontent.com/t298/Figure-bed/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210731114216.jpg)", "content_rendered": "<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://raw.githubusercontent.com/t298/Figure-bed/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210731114216.jpg\"/></p>\n", "last_modified": 1627703161, "replies": 30, "id": 792843}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/a3c6/5c29/108_large.png?m=1620107025", "name": "bb", "avatar_normal": "https://cdn.v2ex.com/navatar/a3c6/5c29/108_normal.png?m=1620107025", "title": "宽带症候群", "url": "https://www.v2ex.com/go/bb", "topics": 9614, "footer": "", "header": "网速很重要。比快更快。", "title_alternative": "Broadband Symptom Complex", "avatar_mini": "https://cdn.v2ex.com/navatar/a3c6/5c29/108_mini.png?m=1620107025", "stars": 5070, "aliases": [], "root": false, "id": 108, "parent_node_name": "geek"}, "member": {"username": "LnTrx", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/7b8b/71f7/450865_mini.png?m=1590249670", "bio": "", "url": "https://www.v2ex.com/u/LnTrx", "tagline": "", "twitter": null, "created": 1572775617, "avatar_large": "https://cdn.v2ex.com/avatar/7b8b/71f7/450865_mini.png?m=1590249670", "avatar_mini": "https://cdn.v2ex.com/avatar/7b8b/71f7/450865_mini.png?m=1590249670", "location": "", "btc": null, "id": 450865}, "last_reply_by": "v2clay", "last_touched": 1627704735, "title": "有哪些合理合法的大流量应用？", "url": "https://www.v2ex.com/t/792771", "created": 1627644997, "content": "最近出现了很多民用宽带（乃至商宽）没有在合同中限制流量，却因为大流量上传、下载而被“关照”的消息。  \r\n\r\n在没有证据的情况下直接停宽带还是不太合理，所以在这里讨论一下，当今有哪些合理合法的大流量应用？（单月可达 TB 级）  \r\n\r\n  \r\n\r\n抛砖引玉：  \r\n1. 人工智能、机器学习的数据集。这些数据集达到 100GB 的很普遍，有的单个就突破了 1TB 。下载完成后，还有可能经过处理再上传到其他地方。  \r\n\r\n2. 在线观看超高清视频。b 站 4K 视频的流量可以达到 4GB/h 。一户人家平均每天累计观看 8.5 小时的 4K 视频，月流量就能达到 1TB 。  \r\n\r\n3. 实时监控的异地存储。在一地安装监控，将数据实时传输到云或者另一地保存以提升安全性。由于视频是 24h 连续采集的（如果没开省流等功能），即便码率不高（ 3Mbps 以上），累积下来的上传流量也可达到 1TB 。  \r\n\r\n4. 自建软件源镜像。例如自建 cnpm 仓库，光是在 V2EX 就能搜到很多讨论。这些仓库的建立和同步是很耗费流量的（ 2015 年的 cnpm 就可达 300GB ），全量同步的话达到 TB 级别应该是容易的。", "content_rendered": "<p>最近出现了很多民用宽带（乃至商宽）没有在合同中限制流量，却因为大流量上传、下载而被“关照”的消息。  </p>\n<p>在没有证据的情况下直接停宽带还是不太合理，所以在这里讨论一下，当今有哪些合理合法的大流量应用？（单月可达 TB 级）  </p>\n<p>抛砖引玉：  </p>\n<ol>\n<li>\n<p>人工智能、机器学习的数据集。这些数据集达到 100GB 的很普遍，有的单个就突破了 1TB 。下载完成后，还有可能经过处理再上传到其他地方。  </p>\n</li>\n<li>\n<p>在线观看超高清视频。b 站 4K 视频的流量可以达到 4GB/h 。一户人家平均每天累计观看 8.5 小时的 4K 视频，月流量就能达到 1TB 。  </p>\n</li>\n<li>\n<p>实时监控的异地存储。在一地安装监控，将数据实时传输到云或者另一地保存以提升安全性。由于视频是 24h 连续采集的（如果没开省流等功能），即便码率不高（ 3Mbps 以上），累积下来的上传流量也可达到 1TB 。  </p>\n</li>\n<li>\n<p>自建软件源镜像。例如自建 cnpm 仓库，光是在 V2EX 就能搜到很多讨论。这些仓库的建立和同步是很耗费流量的（ 2015 年的 cnpm 就可达 300GB ），全量同步的话达到 TB 级别应该是容易的。</p>\n</li>\n</ol>\n", "last_modified": 1627645039, "replies": 24, "id": 792771}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6e27/13a6/557_large.png?m=1608969785", "name": "life", "avatar_normal": "https://cdn.v2ex.com/navatar/6e27/13a6/557_normal.png?m=1608969785", "title": "生活", "url": "https://www.v2ex.com/go/life", "topics": 2511, "footer": "", "header": "生活中的技术讨论", "title_alternative": "Life", "avatar_mini": "https://cdn.v2ex.com/navatar/6e27/13a6/557_mini.png?m=1608969785", "stars": 606, "aliases": [], "root": false, "id": 557, "parent_node_name": ""}, "member": {"username": "vvsystem", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/3b51/522d/467031_mini.png?m=1616043358", "bio": null, "url": "https://www.v2ex.com/u/vvsystem", "tagline": null, "twitter": null, "created": 1580230465, "avatar_large": "https://cdn.v2ex.com/avatar/3b51/522d/467031_mini.png?m=1616043358", "avatar_mini": "https://cdn.v2ex.com/avatar/3b51/522d/467031_mini.png?m=1616043358", "location": null, "btc": null, "id": 467031}, "last_reply_by": "winnie2012", "last_touched": 1627627525, "title": "越来越刻薄，脾气越来越差，怎么办？", "url": "https://www.v2ex.com/t/792808", "created": 1627658971, "content": "1.住在城中村，对面的开着门大声说话、看短视频，说了也没用，让人心烦。\r\n\r\n2.去火车站取个学生票，看到工人确认一个事好几遍，自己竟然抢过工作人员的话，用不耐烦的语气(意识到后立刻减慢语速，微笑，显得自己十分虚伪)转述自己的理解，搞得买票的人连连说不好意思耽误我了。\r\n\r\n3.回到家打开朋友圈，看到几个读心理的同学转发的营销信息，说来说去就是赶紧来学心理学吧，心理学对工作婚姻、家庭、教育下一代非常有帮助，我们这有大咖 xxx，一大堆虚之又虚头衔放在大咖名字下边...心里感到恶心。去搜心理咨询行业现状，发现全是彼此捧臭脚的、带二维码的个体户在评论。火大，想到他们在挣钱，心里更是愤怒。\r\n\r\n4.去逛常常逛的 chouti，帖子的质量不是一般的低，不是禁止评论就是类似这样的评论:中国人真牛 X，我自豪我是中国人。\r\n\r\n5.同样的，在朋友圈看到未来的研究生同学在晒录取通知书，还评论说真高兴恰逢百年 xxx...，纳闷了，一个综合几个榜单排名 200 左右的二本学校、这专业刚被允许招研究生，有什么好自豪的，想起自己要和这样的同学一起读书感觉仿佛自己在自取其辱，恨自己庸人自扰。\r\n\r\n6.最烦的还是第 4 条。", "content_rendered": "1.住在城中村，对面的开着门大声说话、看短视频，说了也没用，让人心烦。<br /><br />2.去火车站取个学生票，看到工人确认一个事好几遍，自己竟然抢过工作人员的话，用不耐烦的语气(意识到后立刻减慢语速，微笑，显得自己十分虚伪)转述自己的理解，搞得买票的人连连说不好意思耽误我了。<br /><br />3.回到家打开朋友圈，看到几个读心理的同学转发的营销信息，说来说去就是赶紧来学心理学吧，心理学对工作婚姻、家庭、教育下一代非常有帮助，我们这有大咖 xxx，一大堆虚之又虚头衔放在大咖名字下边...心里感到恶心。去搜心理咨询行业现状，发现全是彼此捧臭脚的、带二维码的个体户在评论。火大，想到他们在挣钱，心里更是愤怒。<br /><br />4.去逛常常逛的 chouti，帖子的质量不是一般的低，不是禁止评论就是类似这样的评论:中国人真牛 X，我自豪我是中国人。<br /><br />5.同样的，在朋友圈看到未来的研究生同学在晒录取通知书，还评论说真高兴恰逢百年 xxx...，纳闷了，一个综合几个榜单排名 200 左右的二本学校、这专业刚被允许招研究生，有什么好自豪的，想起自己要和这样的同学一起读书感觉仿佛自己在自取其辱，恨自己庸人自扰。<br /><br />6.最烦的还是第 4 条。", "last_modified": 1627677311, "replies": 22, "id": 792808}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1615111825", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1615111825", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 15476, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1615111825", "stars": 1879, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"username": "Winter1sComing", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/5e5d/61fc/328484_mini.png?m=1580550679", "bio": "", "url": "https://www.v2ex.com/u/Winter1sComing", "tagline": "", "twitter": "", "created": 1531304731, "avatar_large": "https://cdn.v2ex.com/avatar/5e5d/61fc/328484_mini.png?m=1580550679", "avatar_mini": "https://cdn.v2ex.com/avatar/5e5d/61fc/328484_mini.png?m=1580550679", "location": "", "btc": "", "id": 328484}, "last_reply_by": "emonc", "last_touched": 1627723208, "title": "求推荐一款舒适度 ≈ Airpods 的无线耳机", "url": "https://www.v2ex.com/t/792828", "created": 1627694941, "content": "之前为了降噪把 AirPods 换成了 AirPods Pro，但舒适度降了一个档次，想找一款非耳塞的平时用，大伙有推荐么", "content_rendered": "<p>之前为了降噪把 AirPods 换成了 AirPods Pro，但舒适度降了一个档次，想找一款非耳塞的平时用，大伙有推荐么</p>\n", "last_modified": 1627694941, "replies": 21, "id": 792828}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/72b3/2a1f/57_large.png?m=1575483197", "name": "c", "avatar_normal": "https://cdn.v2ex.com/navatar/72b3/2a1f/57_normal.png?m=1575483197", "title": "C", "url": "https://www.v2ex.com/go/c", "topics": 855, "footer": "", "header": "", "title_alternative": "C", "avatar_mini": "https://cdn.v2ex.com/navatar/72b3/2a1f/57_mini.png?m=1575483197", "stars": 940, "aliases": [], "root": false, "id": 57, "parent_node_name": "programming"}, "member": {"username": "JQiue", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/gravatar/26c46491fcb256f2e1fd31be89f8ef7d?s=24&d=retro", "bio": "", "url": "https://www.v2ex.com/u/JQiue", "tagline": "", "twitter": "", "created": 1591243635, "avatar_large": "https://cdn.v2ex.com/gravatar/26c46491fcb256f2e1fd31be89f8ef7d?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/26c46491fcb256f2e1fd31be89f8ef7d?s=24&d=retro", "location": "", "btc": "", "id": 493108}, "last_reply_by": "jedihy", "last_touched": 1627682271, "title": "今天用学习用 C 实现队列结构时，编译执行阶段出现非常邪乎的问题", "url": "https://www.v2ex.com/t/792765", "created": 1627642952, "content": "这是我的环境：\r\n\r\n1. Windows 10\r\n2. VS Code\r\n3. MinGW\r\n\r\n下面是我的实现代码：\r\n\r\n```c\r\n#include \"stdio.h\"\r\n#include \"stdlib.h\"\r\n\r\n#define OK 1\r\n#define ERROR 0\r\n#define CAPACITY 10\r\n\r\ntypedef int Status;\r\ntypedef int ElementType;\r\n\r\nStatus initQueue();\r\nStatus isEmpty();\r\nStatus isFull();\r\nStatus enQueue();\r\nStatus deQueue();\r\n\r\ntypedef struct\r\n{\r\n  ElementType *array;\r\n  int front, rear;\r\n  int capacity;\r\n  int size;\r\n} *Queue;\r\n\r\nint main(void)\r\n{\r\n  Queue q = NULL;\r\n  initQueue(&q);\r\n  enQueue(q, 1);\r\n  enQueue(q, 2);\r\n  enQueue(q, 3);\r\n  int foo;\r\n  deQueue(q, &foo);\r\n  deQueue(q, &foo);\r\n  deQueue(q, &foo);\r\n  printf(\"%d\", foo);\r\n  return 0;\r\n}\r\n\r\nStatus initQueue(Queue *q)\r\n{\r\n  (*q) = (Queue)malloc(sizeof(Queue));\r\n  (*q)->capacity = CAPACITY;\r\n  printf(\"capacity = %d\\n\", (*q)->capacity);\r\n  (*q)->array = (ElementType *)malloc((*q)->capacity * sizeof(ElementType));\r\n  (*q)->front = (*q)->size = 0;\r\n  (*q)->rear = (*q)->capacity - 1;\r\n  printf(\"queue = %p, capacity = %d, size = %d, front = %d, rear = %d, array = %p\\n\", (*q), (*q)->capacity, (*q)->size, (*q)->front, (*q)->rear, (*q)->array);\r\n  return OK;\r\n}\r\n\r\nStatus isEmpty(Queue q)\r\n{\r\n  if (q->size == 0)\r\n  {\r\n    printf(\"Queqe is empty\\n\");\r\n    return OK;\r\n  }\r\n  return ERROR;\r\n}\r\n\r\nStatus isFull(Queue q)\r\n{\r\n  if (q->size == q->capacity)\r\n  {\r\n    printf(\"Queqe is full\\n\");\r\n    return OK;\r\n  }\r\n  return ERROR;\r\n}\r\n\r\nStatus enQueue(Queue q, ElementType e)\r\n{\r\n  if (isFull(q))\r\n  {\r\n    return ERROR;\r\n  }\r\n  q->rear = (q->rear + 1) % q->capacity;\r\n  q->array[q->rear] = e;\r\n  q->size++;\r\n  printf(\"%d enqueued to queue\\n\", e);\r\n  return OK;\r\n}\r\n\r\nStatus deQueue(Queue q, ElementType *e)\r\n{\r\n  if (isEmpty(q))\r\n  {\r\n    return ERROR;\r\n  }\r\n  *e = q->array[q->front];\r\n  q->front = (q->front + 1) % q->capacity;\r\n  q->size--;\r\n  printf(\"%d dequeued from queue\\n\", *e);\r\n  return OK;\r\n}\r\n```\r\n\r\n这个有意思的问题就是在终端中执行结果不太一致\r\n\r\n比如我在 VS code 中的集成终端中（ CMD ）使用 GCC 编译并执行会是这样的结果：\r\n\r\n```sh\r\ngcc SequenceQueue.c -o SequenceQueue && SequenceQueue.exe\r\n\r\ncapacity = 10\r\nqueue = 006B1810, capacity = 10, size = 0, front = 0, rear = 9, array = 006B1850\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n1 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\n如果将集成终端换成 PowerShell，却是这样的结果：\r\n\r\n```sh\r\ngcc SequenceQueue.c -o SequenceQueue; .\\SequenceQueue\r\n\r\ncapacity = 10\r\nqueue = 00A015F0, capacity = 268435466, size = 0, front = 0, rear = 268435465, array = 00A01600\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n4 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\n这 tm 太奇怪了，capacity 咋就变了，rear 是 capacity - 1 才是这样的结果，而且第一个出栈不是 1 而是 4，很明显 CMD 执行的是正确的结果，也不知道 PowerShell 发生了什么。为了排除 VS Code 的原因，直接单独打开 CMD 和 PowerShell 测试\r\n\r\nCMD：\r\n\r\n```sh\r\ngcc SequenceQueue.c -o SequenceQueue && SequenceQueue\r\n\r\ncapacity = 10\r\nqueue = 007915B8, capacity = 10, size = 0, front = 0, rear = 9, array = 007915F0\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n1 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\nPowerShell：\r\n\r\n```sh\r\ngcc SequenceQueue.c -o SequenceQueue; .\\SequenceQueue\r\n\r\ncapacity = 10\r\nqueue = 001F2AD0, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 001F2AE0\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n4 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\n这看起来和 VS Code 本身没啥关系，似乎 PowerShell 有点问题？把编译和运行命令分开执行试一下\r\n\r\n```sh\r\ngcc .\\SequenceQueue.c -o .\\SequenceQueue\r\n\r\n.\\SequenceQueue\r\n\r\ncapacity = 10\r\nqueue = 00E62AD0, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 00E62AE0\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n4 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\n好吧，看起来还是不行，capacity 的值乱七八糟，第一个出栈的还是 4 而不是 1 。但是，如果不指定生成后的文件名，PowerShell 它似乎又正确了\r\n\r\n(默认生成的 exe 程序名为 a)\r\n```sh\r\ngcc .\\SequenceQueue.c\r\n\r\n.\\a.exe\r\n\r\ncapacity = 10\r\nqueue = 00B22E40, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 02144020\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n1 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\n但是 capacity 又是乱七八糟的值，那么可能是 GCC 编译的时候出现了问题？于是在 CMD 中使用 GCC 编译并执行程序，然后在 PowerShell 中执行程序\r\n\r\n这是 CMD 中的执行结果：\r\n\r\n```sh\r\ngcc SequenceQueue.c -o SequenceQueue\r\nSequenceQueue.exe\r\n\r\ncapacity = 10\r\nqueue = 00BB15B8, capacity = 10, size = 0, front = 0, rear = 9, array = 00BB15F8\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n1 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\n这是 PowerShell 中的执行结果：\r\n\r\n```\r\n.\\SequenceQueue.exe\r\n\r\ncapacity = 10\r\nqueue = 001E2AD0, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 001E2AE0\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n4 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\n不是吧，PowerShell 咋回事？那么在 PowerShell 中编译并执行，然后在 CMD 中执行\r\n\r\n这是 PowerShell 的：\r\n\r\n```sh\r\ngcc .\\SequenceQueue.c\r\n.\\SequenceQueue.exe\r\n\r\ncapacity = 10\r\nqueue = 00AB2AD0, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 00AB2AE0\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n4 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\n这是 CMD 的：\r\n\r\n```sh\r\ngcc SequenceQueue.c -o SequenceQueue\r\nSequenceQueue.exe\r\n\r\ncapacity = 10\r\nqueue = 00B515B8, capacity = 10, size = 0, front = 0, rear = 9, array = 00B515F8\r\n1 enqueued to queue\r\n2 enqueued to queue\r\n3 enqueued to queue\r\n1 dequeued from queue\r\n2 dequeued from queue\r\n3 dequeued from queue\r\n3\r\n```\r\n\r\n妈妈，我想放弃学习了，这都啥跟啥啊，真想一脚踩烂 PowerShell 。好吧，也许不是 GCC 的锅，目前为止我也不知道代码实现是否有哪个地方的问题导致这样的结果，所以希望各位大佬能否复刻一下这种情况，产生这个问题的原因是，我使用 VScode 某个插件一键调用 GCC 编译且执行，总是得到 PowerShell 的结果，然后调试了半天发现不知道问题在哪，于是将代码换到了一些在线运行 C 的网站，发现我的代码似乎没什么太大问题，于是才有了这样的疑问", "content_rendered": "<p>这是我的环境：</p>\n<ol>\n<li>Windows 10</li>\n<li>VS Code</li>\n<li>MinGW</li>\n</ol>\n<p>下面是我的实现代码：</p>\n<pre><code class=\"language-c\">#include \"stdio.h\"\n#include \"stdlib.h\"\n\n#define OK 1\n#define ERROR 0\n#define CAPACITY 10\n\ntypedef int Status;\ntypedef int ElementType;\n\nStatus initQueue();\nStatus isEmpty();\nStatus isFull();\nStatus enQueue();\nStatus deQueue();\n\ntypedef struct\n{\n  ElementType *array;\n  int front, rear;\n  int capacity;\n  int size;\n} *Queue;\n\nint main(void)\n{\n  Queue q = NULL;\n  initQueue(&amp;q);\n  enQueue(q, 1);\n  enQueue(q, 2);\n  enQueue(q, 3);\n  int foo;\n  deQueue(q, &amp;foo);\n  deQueue(q, &amp;foo);\n  deQueue(q, &amp;foo);\n  printf(\"%d\", foo);\n  return 0;\n}\n\nStatus initQueue(Queue *q)\n{\n  (*q) = (Queue)malloc(sizeof(Queue));\n  (*q)-&gt;capacity = CAPACITY;\n  printf(\"capacity = %d\\n\", (*q)-&gt;capacity);\n  (*q)-&gt;array = (ElementType *)malloc((*q)-&gt;capacity * sizeof(ElementType));\n  (*q)-&gt;front = (*q)-&gt;size = 0;\n  (*q)-&gt;rear = (*q)-&gt;capacity - 1;\n  printf(\"queue = %p, capacity = %d, size = %d, front = %d, rear = %d, array = %p\\n\", (*q), (*q)-&gt;capacity, (*q)-&gt;size, (*q)-&gt;front, (*q)-&gt;rear, (*q)-&gt;array);\n  return OK;\n}\n\nStatus isEmpty(Queue q)\n{\n  if (q-&gt;size == 0)\n  {\n    printf(\"Queqe is empty\\n\");\n    return OK;\n  }\n  return ERROR;\n}\n\nStatus isFull(Queue q)\n{\n  if (q-&gt;size == q-&gt;capacity)\n  {\n    printf(\"Queqe is full\\n\");\n    return OK;\n  }\n  return ERROR;\n}\n\nStatus enQueue(Queue q, ElementType e)\n{\n  if (isFull(q))\n  {\n    return ERROR;\n  }\n  q-&gt;rear = (q-&gt;rear + 1) % q-&gt;capacity;\n  q-&gt;array[q-&gt;rear] = e;\n  q-&gt;size++;\n  printf(\"%d enqueued to queue\\n\", e);\n  return OK;\n}\n\nStatus deQueue(Queue q, ElementType *e)\n{\n  if (isEmpty(q))\n  {\n    return ERROR;\n  }\n  *e = q-&gt;array[q-&gt;front];\n  q-&gt;front = (q-&gt;front + 1) % q-&gt;capacity;\n  q-&gt;size--;\n  printf(\"%d dequeued from queue\\n\", *e);\n  return OK;\n}\n</code></pre>\n<p>这个有意思的问题就是在终端中执行结果不太一致</p>\n<p>比如我在 VS code 中的集成终端中（ CMD ）使用 GCC 编译并执行会是这样的结果：</p>\n<pre><code class=\"language-sh\">gcc SequenceQueue.c -o SequenceQueue &amp;&amp; SequenceQueue.exe\n\ncapacity = 10\nqueue = 006B1810, capacity = 10, size = 0, front = 0, rear = 9, array = 006B1850\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n1 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>如果将集成终端换成 PowerShell，却是这样的结果：</p>\n<pre><code class=\"language-sh\">gcc SequenceQueue.c -o SequenceQueue; .\\SequenceQueue\n\ncapacity = 10\nqueue = 00A015F0, capacity = 268435466, size = 0, front = 0, rear = 268435465, array = 00A01600\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n4 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>这 tm 太奇怪了，capacity 咋就变了，rear 是 capacity - 1 才是这样的结果，而且第一个出栈不是 1 而是 4，很明显 CMD 执行的是正确的结果，也不知道 PowerShell 发生了什么。为了排除 VS Code 的原因，直接单独打开 CMD 和 PowerShell 测试</p>\n<p>CMD：</p>\n<pre><code class=\"language-sh\">gcc SequenceQueue.c -o SequenceQueue &amp;&amp; SequenceQueue\n\ncapacity = 10\nqueue = 007915B8, capacity = 10, size = 0, front = 0, rear = 9, array = 007915F0\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n1 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>PowerShell：</p>\n<pre><code class=\"language-sh\">gcc SequenceQueue.c -o SequenceQueue; .\\SequenceQueue\n\ncapacity = 10\nqueue = 001F2AD0, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 001F2AE0\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n4 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>这看起来和 VS Code 本身没啥关系，似乎 PowerShell 有点问题？把编译和运行命令分开执行试一下</p>\n<pre><code class=\"language-sh\">gcc .\\SequenceQueue.c -o .\\SequenceQueue\n\n.\\SequenceQueue\n\ncapacity = 10\nqueue = 00E62AD0, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 00E62AE0\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n4 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>好吧，看起来还是不行，capacity 的值乱七八糟，第一个出栈的还是 4 而不是 1 。但是，如果不指定生成后的文件名，PowerShell 它似乎又正确了</p>\n<p>(默认生成的 exe 程序名为 a)</p>\n<pre><code class=\"language-sh\">gcc .\\SequenceQueue.c\n\n.\\a.exe\n\ncapacity = 10\nqueue = 00B22E40, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 02144020\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n1 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>但是 capacity 又是乱七八糟的值，那么可能是 GCC 编译的时候出现了问题？于是在 CMD 中使用 GCC 编译并执行程序，然后在 PowerShell 中执行程序</p>\n<p>这是 CMD 中的执行结果：</p>\n<pre><code class=\"language-sh\">gcc SequenceQueue.c -o SequenceQueue\nSequenceQueue.exe\n\ncapacity = 10\nqueue = 00BB15B8, capacity = 10, size = 0, front = 0, rear = 9, array = 00BB15F8\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n1 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>这是 PowerShell 中的执行结果：</p>\n<pre><code>.\\SequenceQueue.exe\n\ncapacity = 10\nqueue = 001E2AD0, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 001E2AE0\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n4 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>不是吧，PowerShell 咋回事？那么在 PowerShell 中编译并执行，然后在 CMD 中执行</p>\n<p>这是 PowerShell 的：</p>\n<pre><code class=\"language-sh\">gcc .\\SequenceQueue.c\n.\\SequenceQueue.exe\n\ncapacity = 10\nqueue = 00AB2AD0, capacity = 134217738, size = 0, front = 0, rear = 134217737, array = 00AB2AE0\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n4 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>这是 CMD 的：</p>\n<pre><code class=\"language-sh\">gcc SequenceQueue.c -o SequenceQueue\nSequenceQueue.exe\n\ncapacity = 10\nqueue = 00B515B8, capacity = 10, size = 0, front = 0, rear = 9, array = 00B515F8\n1 enqueued to queue\n2 enqueued to queue\n3 enqueued to queue\n1 dequeued from queue\n2 dequeued from queue\n3 dequeued from queue\n3\n</code></pre>\n<p>妈妈，我想放弃学习了，这都啥跟啥啊，真想一脚踩烂 PowerShell 。好吧，也许不是 GCC 的锅，目前为止我也不知道代码实现是否有哪个地方的问题导致这样的结果，所以希望各位大佬能否复刻一下这种情况，产生这个问题的原因是，我使用 VScode 某个插件一键调用 GCC 编译且执行，总是得到 PowerShell 的结果，然后调试了半天发现不知道问题在哪，于是将代码换到了一些在线运行 C 的网站，发现我的代码似乎没什么太大问题，于是才有了这样的疑问</p>\n", "last_modified": 1627642952, "replies": 20, "id": 792765}]