[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/b6d7/67d2/22_large.png?m=1635652519", "name": "macos", "avatar_normal": "https://cdn.v2ex.com/navatar/b6d7/67d2/22_normal.png?m=1635652519", "title": "macOS", "url": "https://www.v2ex.com/go/macos", "topics": 17422, "footer": "<a href=\"/mbp\">MacBook Pro</a> 及 <a href=\"/go/imac\">iMac</a> 等 <a href=\"/go/apple\">Apple</a> 公司设计的计算机所运行的操作系统。<a href=\"/go/idev\">iOS</a> 的基础。", "header": "The world’s most advanced desktop operating system.", "title_alternative": "macOS", "avatar_mini": "https://cdn.v2ex.com/navatar/b6d7/67d2/22_mini.png?m=1635652519", "stars": 4450, "aliases": [], "root": false, "id": 22, "parent_node_name": "os"}, "member": {"username": "aec4d", "website": "https://www.ficapy.com/", "github": "ficapy", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/bf44/1b0f/32727_mini.png?m=1442667076", "bio": "", "url": "https://www.v2ex.com/u/aec4d", "tagline": "", "twitter": "", "created": 1358752699, "avatar_large": "https://cdn.v2ex.com/avatar/bf44/1b0f/32727_mini.png?m=1442667076", "avatar_mini": "https://cdn.v2ex.com/avatar/bf44/1b0f/32727_mini.png?m=1442667076", "location": "", "btc": "", "id": 32727}, "last_reply_by": "felixcode", "last_touched": 1637474490, "title": "M1 的兼容性可能没你想的那么好", "url": "https://www.v2ex.com/t/816760", "created": 1637389595, "deleted": 0, "content": "看网上很多言论盛赞 M1 的兼容性，买之前我搜了下 B 站相关视频[https://www.bilibili.com/video/BV1TK4y1L7DU]( https://www.bilibili.com/video/BV1TK4y1L7DU) (只是用作举例)，觉得兼容性还不错\r\n\r\n到手后用了一周发现是过于乐观了。\r\n\r\n**M1 对 X86 二进制文件的兼容性挺好**,现在很多 App 甚至都有原生 ARM 版本。所以很多 app 和 x86 二进制文件都能完美运行。主要的问题出在涉及**C/C++**的编译流程上，老版本库尤其如此。在网上看到的很多人说 M1 兼容性好的操作是使用最新版。不得不说开发者社区很热情，很多开发工具 /库的最新版已经完美适配了 M1 。安装和使用都没有问题\r\n\r\n老版本就是另外一种情况了。若干年前应该不会有人想到自己写的针对 X86 构建流程，有人会尝试在 arm 上去构建。所以涉及到**C/C++**编译的老版本软件很有可能会构建失败\r\n\r\n我尝试安装 ARM 版的 python, **3.7 以下的版本还没有安装上**。对老项目执行了`pip install -r requirements.txt`  numpy,scipy,pandas,cryptography 等接近十个涉及到 C 的库全部不兼容，惊奇的是把这些库升级到最新版都能正常安装，只有一个库不支持, 但是也有人放出了支持的 wheel 包。最后要想使用这些库，我还得对升级后项目做一个大测试\r\n\r\n设想一下，以前用 x86 ，很多 github 项目拷贝下来就能正常运行的，用了 M1 后可能就不行了~~\r\n\r\n因此个人还是觉得 M1 适合视频工作者 /移动端，前端开发人员。他们的工具不太涉及到老版本工具的 C/C++构建流程\r\n\r\n综上，我在办公室放了一台台式机，安装了 Exsi, 虚拟了 ubuntu 和 windows ，ARM 不支持的时候走远程开发流程\r\n\r\n用了一下 jetbrains gateway ，可惜，体验并不好\r\n\r\n希望各位开发大佬下单的时候考虑一下自己工作流的兼容性，尤其是老项目的兼容性\r\n\r\n也希望远程开发工具能给力啊，毕竟谁不想拿个轻薄本连强大的服务器远程开发呢~~~", "content_rendered": "<p>看网上很多言论盛赞 M1 的兼容性，买之前我搜了下 B 站相关视频<a href=\"https://www.bilibili.com/video/BV1TK4y1L7DU\" rel=\"nofollow\">https://www.bilibili.com/video/BV1TK4y1L7DU</a> (只是用作举例)，觉得兼容性还不错</p>\n<p>到手后用了一周发现是过于乐观了。</p>\n<p><strong>M1 对 X86 二进制文件的兼容性挺好</strong>,现在很多 App 甚至都有原生 ARM 版本。所以很多 app 和 x86 二进制文件都能完美运行。主要的问题出在涉及**C/C++**的编译流程上，老版本库尤其如此。在网上看到的很多人说 M1 兼容性好的操作是使用最新版。不得不说开发者社区很热情，很多开发工具 /库的最新版已经完美适配了 M1 。安装和使用都没有问题</p>\n<p>老版本就是另外一种情况了。若干年前应该不会有人想到自己写的针对 X86 构建流程，有人会尝试在 arm 上去构建。所以涉及到**C/C++**编译的老版本软件很有可能会构建失败</p>\n<p>我尝试安装 ARM 版的 python, <strong>3.7 以下的版本还没有安装上</strong>。对老项目执行了<code>pip install -r requirements.txt</code>  numpy,scipy,pandas,cryptography 等接近十个涉及到 C 的库全部不兼容，惊奇的是把这些库升级到最新版都能正常安装，只有一个库不支持, 但是也有人放出了支持的 wheel 包。最后要想使用这些库，我还得对升级后项目做一个大测试</p>\n<p>设想一下，以前用 x86 ，很多 github 项目拷贝下来就能正常运行的，用了 M1 后可能就不行了~~</p>\n<p>因此个人还是觉得 M1 适合视频工作者 /移动端，前端开发人员。他们的工具不太涉及到老版本工具的 C/C++构建流程</p>\n<p>综上，我在办公室放了一台台式机，安装了 Exsi, 虚拟了 ubuntu 和 windows ，ARM 不支持的时候走远程开发流程</p>\n<p>用了一下 jetbrains gateway ，可惜，体验并不好</p>\n<p>希望各位开发大佬下单的时候考虑一下自己工作流的兼容性，尤其是老项目的兼容性</p>\n<p>也希望远程开发工具能给力啊，毕竟谁不想拿个轻薄本连强大的服务器远程开发呢~~~</p>\n", "last_modified": 1637389595, "replies": 74, "id": 816760}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1628872984", "name": "share", "avatar_normal": "https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1628872984", "title": "分享发现", "url": "https://www.v2ex.com/go/share", "topics": 34625, "footer": "", "header": "分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。", "title_alternative": "Share", "avatar_mini": "https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1628872984", "stars": 4647, "aliases": [], "root": false, "id": 16, "parent_node_name": "v2ex"}, "member": {"username": "AndyAO", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/b85a/cd99/512121_mini.png?m=1609231363", "bio": "", "url": "https://www.v2ex.com/u/AndyAO", "tagline": "", "twitter": null, "created": 1602407917, "avatar_large": "https://cdn.v2ex.com/avatar/b85a/cd99/512121_mini.png?m=1609231363", "avatar_mini": "https://cdn.v2ex.com/avatar/b85a/cd99/512121_mini.png?m=1609231363", "location": "", "btc": null, "id": 512121}, "last_reply_by": "Perry", "last_touched": 1637472155, "title": "真正有知识的人从来不看新闻", "url": "https://www.v2ex.com/t/816886", "created": 1637454112, "deleted": 0, "content": "看新闻会让人产生自己是个忧国忧民的知识分子的错觉。\r\n\r\n- A 总统会见 B 总统\r\n- 女演员 C 与名人 D 离婚\r\n- 意大利内阁改组\r\n- 朝鲜发射导弹\r\n- 贿赂丑闻\r\n- 阿根廷破产了\r\n- 道琼斯指数收盘价\r\n\r\n这实际上对生活没有价值。\r\n\r\n记者和编辑们的工作不是筛选那些有价值的信息，而是尽可能的夺取读者的注意，然后把你的注意力卖给别人收广告费，从而赚的盆满钵满。\r\n\r\n你每看一次新闻都是给他们塞钱。\r\n\r\n关键是这样的碎片化信息还对大脑有害，会伤害人的注意力，损害人阅读长文本的能力。\r\n\r\n人天生容易被负面信息夺走注意力，所以只要是市场化运作的媒体，往往就会被丑闻占据，总是看这种东西，会让人精神焦虑，情绪变差。\r\n\r\n不关注这些新闻会错失重要的事情吗？\r\n\r\n你完全不要有这种担心，这是很少发生的。\r\n\r\n实际上，那些记者们从不报道的事情才是最有价值的。\r\n\r\n只要记者和编辑们决定要报到那件事情，它就广为人知了。\r\n\r\n物以稀为贵，信息也是这样，你需要知道别人不知道的重要信息。\r\n\r\n1993 年互联网浏览器发明了，如此劲爆的信息，那个时候有任何新闻报道了吗？\r\n\r\n没有，头条是类似「女演员 C 与名人 D 离婚」的东西。\r\n\r\n观点来自“ Stop Reading the News：A Manifesto for a Happier, Calmer and Wiser Life ”", "content_rendered": "<p>看新闻会让人产生自己是个忧国忧民的知识分子的错觉。</p>\n<ul>\n<li>A 总统会见 B 总统</li>\n<li>女演员 C 与名人 D 离婚</li>\n<li>意大利内阁改组</li>\n<li>朝鲜发射导弹</li>\n<li>贿赂丑闻</li>\n<li>阿根廷破产了</li>\n<li>道琼斯指数收盘价</li>\n</ul>\n<p>这实际上对生活没有价值。</p>\n<p>记者和编辑们的工作不是筛选那些有价值的信息，而是尽可能的夺取读者的注意，然后把你的注意力卖给别人收广告费，从而赚的盆满钵满。</p>\n<p>你每看一次新闻都是给他们塞钱。</p>\n<p>关键是这样的碎片化信息还对大脑有害，会伤害人的注意力，损害人阅读长文本的能力。</p>\n<p>人天生容易被负面信息夺走注意力，所以只要是市场化运作的媒体，往往就会被丑闻占据，总是看这种东西，会让人精神焦虑，情绪变差。</p>\n<p>不关注这些新闻会错失重要的事情吗？</p>\n<p>你完全不要有这种担心，这是很少发生的。</p>\n<p>实际上，那些记者们从不报道的事情才是最有价值的。</p>\n<p>只要记者和编辑们决定要报到那件事情，它就广为人知了。</p>\n<p>物以稀为贵，信息也是这样，你需要知道别人不知道的重要信息。</p>\n<p>1993 年互联网浏览器发明了，如此劲爆的信息，那个时候有任何新闻报道了吗？</p>\n<p>没有，头条是类似「女演员 C 与名人 D 离婚」的东西。</p>\n<p>观点来自“ Stop Reading the News：A Manifesto for a Happier, Calmer and Wiser Life ”</p>\n", "last_modified": 1637454209, "replies": 60, "id": 816886}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/b6d7/67d2/22_large.png?m=1635652519", "name": "macos", "avatar_normal": "https://cdn.v2ex.com/navatar/b6d7/67d2/22_normal.png?m=1635652519", "title": "macOS", "url": "https://www.v2ex.com/go/macos", "topics": 17422, "footer": "<a href=\"/mbp\">MacBook Pro</a> 及 <a href=\"/go/imac\">iMac</a> 等 <a href=\"/go/apple\">Apple</a> 公司设计的计算机所运行的操作系统。<a href=\"/go/idev\">iOS</a> 的基础。", "header": "The world’s most advanced desktop operating system.", "title_alternative": "macOS", "avatar_mini": "https://cdn.v2ex.com/navatar/b6d7/67d2/22_mini.png?m=1635652519", "stars": 4450, "aliases": [], "root": false, "id": 22, "parent_node_name": "os"}, "member": {"username": "89ao", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/avatar/6b62/c3df/90033_mini.png?m=1420437469", "bio": null, "url": "https://www.v2ex.com/u/89ao", "tagline": null, "twitter": null, "created": 1420436525, "avatar_large": "https://cdn.v2ex.com/avatar/6b62/c3df/90033_mini.png?m=1420437469", "avatar_mini": "https://cdn.v2ex.com/avatar/6b62/c3df/90033_mini.png?m=1420437469", "location": null, "btc": null, "id": 90033}, "last_reply_by": "zyzhang0417", "last_touched": 1637457059, "title": "荐输入法-百度输入法 [MacOS Big Sur 11.6.1 (20G224) +MacBook Pro (13-inch, M1, 2020) 验证 OK]", "url": "https://www.v2ex.com/t/816808", "created": 1637404330, "deleted": 0, "content": "Mac 下的输入法一直是让人比较头疼的事情，前几年自己一直在用手心输入法，但眼看着 MacOS 都更新这么多个版本了他还一直『岿然不动』，上次更新貌似还是 2015 年了……\r\n\r\n最近因为系统自带输入法导致 typora 卡顿的问题又开始找了一圈输入法，结果如下：\r\n系统自带输入法：其实自带输入法改版几次了之后的确挺好用的，但是为啥就这种诡异的卡顿呢……不是自己卡就是导致其他 app 卡，是为了减少键盘损耗吗。。。\r\nGoogle 输入法：停更。\r\n腾讯输入法：停更。\r\nsogou 输入法：广告多。\r\n手心输入法：停更。\r\nRime：貌似繁体友好，简体不是很友好。\r\n清歌输入法：看起来挺美好，但优先支持五笔。（不是他的问题，是我的问题。。）\r\n最后找到了看起来比较简洁的，而且最近是在 2021 年更新的，百度输入法。\r\n界面比较简洁，输入速度比较快，还能在线联想，目前没发现广告。\r\n\r\n非广告。我也是简直了，一个企鹅员工在这推荐竞争对手的产品……", "content_rendered": "Mac 下的输入法一直是让人比较头疼的事情，前几年自己一直在用手心输入法，但眼看着 MacOS 都更新这么多个版本了他还一直『岿然不动』，上次更新貌似还是 2015 年了……<br /><br />最近因为系统自带输入法导致 typora 卡顿的问题又开始找了一圈输入法，结果如下：<br />系统自带输入法：其实自带输入法改版几次了之后的确挺好用的，但是为啥就这种诡异的卡顿呢……不是自己卡就是导致其他 app 卡，是为了减少键盘损耗吗。。。<br />Google 输入法：停更。<br />腾讯输入法：停更。<br />sogou 输入法：广告多。<br />手心输入法：停更。<br />Rime：貌似繁体友好，简体不是很友好。<br />清歌输入法：看起来挺美好，但优先支持五笔。（不是他的问题，是我的问题。。）<br />最后找到了看起来比较简洁的，而且最近是在 2021 年更新的，百度输入法。<br />界面比较简洁，输入速度比较快，还能在线联想，目前没发现广告。<br /><br />非广告。我也是简直了，一个企鹅员工在这推荐竞争对手的产品……", "last_modified": 1637404330, "replies": 49, "id": 816808}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_large.png?m=1635744526", "name": "career", "avatar_normal": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_normal.png?m=1635744526", "title": "职场话题", "url": "https://www.v2ex.com/go/career", "topics": 12370, "footer": "", "header": "这里，我们聊聊那些工作中遇到的开心和不开心的事。", "title_alternative": "Career", "avatar_mini": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_mini.png?m=1635744526", "stars": 2208, "aliases": [], "root": false, "id": 770, "parent_node_name": "work"}, "member": {"username": "xarthur", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/ac80/4ead/144059_mini.png?m=1637404637", "bio": "", "url": "https://www.v2ex.com/u/xarthur", "tagline": "", "twitter": "", "created": 1445604114, "avatar_large": "https://cdn.v2ex.com/avatar/ac80/4ead/144059_mini.png?m=1637404637", "avatar_mini": "https://cdn.v2ex.com/avatar/ac80/4ead/144059_mini.png?m=1637404637", "location": "", "btc": "", "id": 144059}, "last_reply_by": "genesislive", "last_touched": 1637452032, "title": "传闻阿里要裁员两万人", "url": "https://www.v2ex.com/t/816810", "created": 1637404665, "deleted": 0, "content": "[原文连接]( https://twitter.com/_ooT00Too_/status/1461999125696704512)\r\n\r\n[相关新闻]( https://stock.eastmoney.com/a/202111202187888882.html)\r\n![]( https://i.imgur.com/RSHg0Zm.png)", "content_rendered": "<p><a href=\"https://twitter.com/_ooT00Too_/status/1461999125696704512\" rel=\"nofollow\">原文连接</a></p>\n<p><a href=\"https://stock.eastmoney.com/a/202111202187888882.html\" rel=\"nofollow\">相关新闻</a>\n<img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.imgur.com/RSHg0Zm.png\"/></p>\n", "last_modified": 1637404969, "replies": 47, "id": 816810}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c74d/97b0/16_large.png?m=1628872984", "name": "share", "avatar_normal": "https://cdn.v2ex.com/navatar/c74d/97b0/16_normal.png?m=1628872984", "title": "分享发现", "url": "https://www.v2ex.com/go/share", "topics": 34625, "footer": "", "header": "分享你看到的好玩的，有信息量的，欢迎从这里获取灵感。", "title_alternative": "Share", "avatar_mini": "https://cdn.v2ex.com/navatar/c74d/97b0/16_mini.png?m=1628872984", "stars": 4647, "aliases": [], "root": false, "id": 16, "parent_node_name": "v2ex"}, "member": {"username": "0335boy", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/76adfd7dc531152d361b9752d774a621?s=24&d=retro", "bio": "", "url": "https://www.v2ex.com/u/0335boy", "tagline": "", "twitter": null, "created": 1594047130, "avatar_large": "https://cdn.v2ex.com/gravatar/76adfd7dc531152d361b9752d774a621?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/76adfd7dc531152d361b9752d774a621?s=24&d=retro", "location": "", "btc": null, "id": 497984}, "last_reply_by": "windirt", "last_touched": 1637474391, "title": "关于“百度网盘” 我有话要说…", "url": "https://www.v2ex.com/t/816823", "created": 1637411232, "deleted": 0, "content": "今天在用网盘看网课，突然转菊花卡死了（本机 Macbookpro M1 ）。一股“怒火”涌上心头，遂点开“百度用户服务中心”准备写点用户建议。提交之前，转念一想：我为什么蠢到给这种企业写用户反馈？用户是用脚投票的，老子不用了，卸载！  （顺路问问各位大神，这东西有什么替代品吗）    剪切--粘贴--来 V 站吐槽…… 原文如下：\r\n  1.苹果 M1 芯片上市一年了，作为国内互联网龙头企业，还没有适配 Apple silicon ，  让人失望。\r\n  2.内存占用过多，尤其是视频播放。不知道是 Rosetta 转译的问题还是程序本身存在可优化空间。\r\n  3.看视频时，如果摘下耳机，视频也要重新打开才能有声音；并且在这一过程中有小概率卡死。\r\n  4.就算程序优化、适配 Apple silicon 有困难，起码也要将应用界面的外观与 macOS11 适配，如：程序边框 R 角。\r\n  5.打开视频有概率在视频中莫名其妙出现当前视频的名称。\r\n  6.不想在主界面看见诸如“一刻相册”、“限时低价超级特惠”等内容，其作用无异于喂用户吃屎，尤其是付费用户。\r\n  7.针对“第 6 点”，如果不能做到，那是否有给付费用户自行选择的权利的可能？\r\n  8.天下苦“百度系”久矣，望君自重！", "content_rendered": "今天在用网盘看网课，突然转菊花卡死了（本机 Macbookpro M1 ）。一股“怒火”涌上心头，遂点开“百度用户服务中心”准备写点用户建议。提交之前，转念一想：我为什么蠢到给这种企业写用户反馈？用户是用脚投票的，老子不用了，卸载！  （顺路问问各位大神，这东西有什么替代品吗）    剪切--粘贴--来 V 站吐槽…… 原文如下：<br />  1.苹果 M1 芯片上市一年了，作为国内互联网龙头企业，还没有适配 Apple silicon ，  让人失望。<br />  2.内存占用过多，尤其是视频播放。不知道是 Rosetta 转译的问题还是程序本身存在可优化空间。<br />  3.看视频时，如果摘下耳机，视频也要重新打开才能有声音；并且在这一过程中有小概率卡死。<br />  4.就算程序优化、适配 Apple silicon 有困难，起码也要将应用界面的外观与 macOS11 适配，如：程序边框 R 角。<br />  5.打开视频有概率在视频中莫名其妙出现当前视频的名称。<br />  6.不想在主界面看见诸如“一刻相册”、“限时低价超级特惠”等内容，其作用无异于喂用户吃屎，尤其是付费用户。<br />  7.针对“第 6 点”，如果不能做到，那是否有给付费用户自行选择的权利的可能？<br />  8.天下苦“百度系”久矣，望君自重！", "last_modified": 1637411232, "replies": 43, "id": 816823}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/45c4/8cce/9_large.png?m=1611468519", "name": "ipad", "avatar_normal": "https://cdn.v2ex.com/navatar/45c4/8cce/9_normal.png?m=1611468519", "title": "iPad", "url": "https://www.v2ex.com/go/ipad", "topics": 1612, "footer": "", "header": "<a href=\"/go/apple\">Apple</a> 公司设计的全新理念的基于 <a href=\"/go/ios\">iOS</a> 的平板电脑。", "title_alternative": "iPad", "avatar_mini": "https://cdn.v2ex.com/navatar/45c4/8cce/9_mini.png?m=1611468519", "stars": 1146, "aliases": [], "root": false, "id": 9, "parent_node_name": "apple"}, "member": {"username": "guanhui07", "website": "google.com", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/437f/2914/164143_mini.png?m=1573455686", "bio": "tg:   aHR0cHMlM0EvL3QubWUvZ3Vhbmh1aTA3", "url": "https://www.v2ex.com/u/guanhui07", "tagline": "", "twitter": "", "created": 1458466975, "avatar_large": "https://cdn.v2ex.com/avatar/437f/2914/164143_mini.png?m=1573455686", "avatar_mini": "https://cdn.v2ex.com/avatar/437f/2914/164143_mini.png?m=1573455686", "location": "广东", "btc": "", "id": 164143}, "last_reply_by": "Torpedo", "last_touched": 1637439249, "title": "好奇大家平躺床上看视频 iPad 是如何放的", "url": "https://www.v2ex.com/t/816772", "created": 1637393232, "deleted": 0, "content": "是不是瘫着侧躺看电影 都是锁住屏幕旋转", "content_rendered": "是不是瘫着侧躺看电影 都是锁住屏幕旋转", "last_modified": 1637393232, "replies": 34, "id": 816772}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 16886, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913", "stars": 2005, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"username": "whxhjs", "website": null, "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/4afbf6ff9c4abbd233826e0328ce7cb8?s=24&d=retro", "bio": null, "url": "https://www.v2ex.com/u/whxhjs", "tagline": null, "twitter": null, "created": 1422881621, "avatar_large": "https://cdn.v2ex.com/gravatar/4afbf6ff9c4abbd233826e0328ce7cb8?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/4afbf6ff9c4abbd233826e0328ce7cb8?s=24&d=retro", "location": null, "btc": null, "id": 95389}, "last_reply_by": "Milicense", "last_touched": 1637449569, "title": "澳门 iPhone 13 Pro 加美版 AC+", "url": "https://www.v2ex.com/t/816830", "created": 1637414746, "deleted": 0, "content": "现在澳门买 iPhone 不是每天在官网刷预约就是等澳门电信，不过官网预约需要澳门号码，我从我朋友那边借了一个，这个月十号正好刷到了一台，周五直接去银河拿货。澳门电信只要给 500MOP 定金就等通知拿机就好了，而且内地号码也可以的，不过有些慢。\r\n\r\n买的是 iPhone 13 Pro MAX 512G 远峰蓝，价格 12299 葡币合 9801 元，算上浦发超白返现 10%，这一台只有 8821 元，比内地标价 11399 元便宜 2578 元，相当于 77 折拿下西比员工价 EPP 都便宜。\r\n\r\n\r\n一开始考虑过美版的，转运到澳门，自己过关拿，价格比澳门版本的还便宜一点，不过美版不支持实体双卡，只能实体单卡＋双 eSIM ，就没有考虑。\r\n\r\n原来准备在澳门买 AppleCare+，不过一看价格很贵，要 1899 葡币，算下来和大陆购买的价格一样。于是跑美国官网购买美版 Apple Care+，按照条款 AppleCare+ 是可以全球保修的，不过有可能硬件有变化。比如美版的机器变成国行的机器，不过问题不大，能用就行。\r\n\r\n购买过程有点麻烦，原来可以网页搞定，现在需要打电话给苹果，号码是+1800275 2273 ，用 Skype 可以免费打。直接和客服说你在线买不了 Apple Care+ 就可以了，我是转接了两次客服代表，提供了一下序列号就能\r\n购买，需要注意的是如果问到你地址可以准备一个免税州的地址，我给了 15 刀的税，最后会让你打开 Apple 支持跑一下诊断就好啦，付款链接会发到你的邮箱里面，用信用卡给钱就好啦。两年的计划是 199 刀不含税，合人\r\n民币 1270 元，大陆价格是 1498 元，便宜了 228 元。\r\n\r\n大陆的 AC+必须要在购买七天内购买，美版可以在两个月内购买，时间宽容了很多。付款以后不到一个小时\r\nAC+就生效啦的可以在官网查到。\r\n\r\n总共算下来一共便宜了 2806 ，四舍五入就是一个亿🌚\r\n接下来考虑从美国转运一台 MBP 回澳门再人肉背回来🌚", "content_rendered": "现在澳门买 iPhone 不是每天在官网刷预约就是等澳门电信，不过官网预约需要澳门号码，我从我朋友那边借了一个，这个月十号正好刷到了一台，周五直接去银河拿货。澳门电信只要给 500MOP 定金就等通知拿机就好了，而且内地号码也可以的，不过有些慢。<br /><br />买的是 iPhone 13 Pro MAX 512G 远峰蓝，价格 12299 葡币合 9801 元，算上浦发超白返现 10%，这一台只有 8821 元，比内地标价 11399 元便宜 2578 元，相当于 77 折拿下西比员工价 EPP 都便宜。<br /><br /><br />一开始考虑过美版的，转运到澳门，自己过关拿，价格比澳门版本的还便宜一点，不过美版不支持实体双卡，只能实体单卡＋双 eSIM ，就没有考虑。<br /><br />原来准备在澳门买 AppleCare+，不过一看价格很贵，要 1899 葡币，算下来和大陆购买的价格一样。于是跑美国官网购买美版 Apple Care+，按照条款 AppleCare+ 是可以全球保修的，不过有可能硬件有变化。比如美版的机器变成国行的机器，不过问题不大，能用就行。<br /><br />购买过程有点麻烦，原来可以网页搞定，现在需要打电话给苹果，号码是+1800275 2273 ，用 Skype 可以免费打。直接和客服说你在线买不了 Apple Care+ 就可以了，我是转接了两次客服代表，提供了一下序列号就能<br />购买，需要注意的是如果问到你地址可以准备一个免税州的地址，我给了 15 刀的税，最后会让你打开 Apple 支持跑一下诊断就好啦，付款链接会发到你的邮箱里面，用信用卡给钱就好啦。两年的计划是 199 刀不含税，合人<br />民币 1270 元，大陆价格是 1498 元，便宜了 228 元。<br /><br />大陆的 AC+必须要在购买七天内购买，美版可以在两个月内购买，时间宽容了很多。付款以后不到一个小时<br />AC+就生效啦的可以在官网查到。<br /><br />总共算下来一共便宜了 2806 ，四舍五入就是一个亿🌚<br />接下来考虑从美国转运一台 MBP 回澳门再人肉背回来🌚", "last_modified": 1637414746, "replies": 27, "id": 816830}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/8613/985e/90_large.png?m=1635654612", "name": "python", "avatar_normal": "https://cdn.v2ex.com/navatar/8613/985e/90_normal.png?m=1635654612", "title": "Python", "url": "https://www.v2ex.com/go/python", "topics": 14707, "footer": "", "header": "这里讨论各种 Python 语言编程话题，也包括 Django，Tornado 等框架的讨论。这里是一个能够帮助你解决实际问题的地方。", "title_alternative": "Python", "avatar_mini": "https://cdn.v2ex.com/navatar/8613/985e/90_mini.png?m=1635654612", "stars": 9759, "aliases": [], "root": false, "id": 90, "parent_node_name": "programming"}, "member": {"username": "firejoke", "website": "", "github": "", "psn": "", "avatar_normal": "https://cdn.v2ex.com/avatar/a098/a71b/77871_mini.png?m=1636019138", "bio": "", "url": "https://www.v2ex.com/u/firejoke", "tagline": "", "twitter": "", "created": 1413810856, "avatar_large": "https://cdn.v2ex.com/avatar/a098/a71b/77871_mini.png?m=1636019138", "avatar_mini": "https://cdn.v2ex.com/avatar/a098/a71b/77871_mini.png?m=1636019138", "location": "", "btc": "", "id": 77871}, "last_reply_by": "Contextualist", "last_touched": 1637474463, "title": "关于 asyncio 执行 IO 密集型操作的不解", "url": "https://www.v2ex.com/t/816841", "created": 1637417856, "deleted": 0, "content": "有一个读文件然后写数据库的操作，想尝试使用协程。  \r\n使用协程的：  \r\n```python\r\nasync def parse_text(file_path: Path, context_qs: [asyncio.Queue]):\r\n    ql = len(context_qs)\r\n    i = 0\r\n    # 每一个 Queue 放 step 个数据就切换下一个\r\n    step = 2\r\n    with open(file_path, encoding=\"utf8\") as f:\r\n        for text in f:\r\n            if i // step == ql:\r\n                i = 0\r\n            context_q = context_qs[i // step]\r\n            context = {}\r\n            text = re.findall(r\"\\d+\", text)\r\n            if text:\r\n                context = {\"解析然后组装成 dict\"}\r\n                await context_q.put(context)\r\n                # 这里如果不 join ，会一直在这个 for 循环里不出去\r\n                await context_q.join()\r\n                i = i + 1\r\n        else:\r\n            await context_q.put(\"结束标记\")\r\n            return\r\n\r\n\r\nasync def write_db(context_q: asyncio.Queue, model: ModelBase):\r\n    async with AsyncSession() as session:\r\n        while 1:\r\n            context = await context_q.get()\r\n            if context[\"结束标记\"] == \"end\":\r\n                return\r\n            info, obj = None, None\r\n            try:\r\n                if context[\"info\"]:\r\n                    info = await session.execute(\r\n                        select(InfoModel).filter(\r\n                            InfoModel.attr == context[\"info\"]\r\n                        )\r\n                    )\r\n                    info = info.scalars().one_or_none()\r\n                    if not info:\r\n                        info = InfoModel(attr=context[\"info\"])\r\n                        session.add(info)\r\n                if context[\"header\"]:\r\n                    obj = await session.execute(\r\n                        select(model).filter(\r\n                            model.header == context[\"header\"]\r\n                        ).options(selectinload(getattr(model, \"info\")))\r\n                    )\r\n                    obj = obj.scalars().one_or_none()\r\n                    if not obj:\r\n                        obj = model(header=context[\"header\"])\r\n                        session.add(obj)\r\n                if obj or info:\r\n                    if info not in obj.info:\r\n                        obj.info.append(info)\r\n                        session.add(obj)\r\n                    await session.commit()\r\n            except Exception as e:\r\n                await session.rollback()\r\n                raise e\r\n            else:\r\n                context_q.task_done()\r\n\r\n\r\nasync def main():\r\n\t# 每个读取文件并解析的方法对应 c_q_count 个写数据库的方法\r\n    c_q_count = 3\r\n    a_context_qs = [asyncio.Queue() for i in range(c_q_count)]\r\n    b_context_qs = [asyncio.Queue() for i in range(c_q_count)]\r\n    tasks = [\r\n        asyncio.create_task(\r\n            parse_text(Path(\"a.txt\"), a_context_qs)\r\n        ),\r\n        asyncio.create_task(\r\n            parse_text(Path(\"b.txt\"), b_context_qs)\r\n        ),\r\n    ]\r\n    for i in range(c_q_count):\r\n        tasks.append(asyncio.create_task(write_db(a_context_qs[i], AModel)))\r\n        tasks.append(asyncio.create_task(write_db(b_context_qs[i], BModel)))\r\n    await asyncio.gather(*tasks)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio.run(main(), debug=settings.DEBUG)\r\n\r\n```\r\n不使用协程的：  \r\n```python\r\ndef sync_read_file():\r\n    af = Path(\"a.txt\").open(encoding=\"utf8\")\r\n    bf = Path(\"b.txt\").open(encoding=\"utf8\")\r\n    with Session() as session:\r\n        while 1:\r\n            if af:\r\n                try:\r\n                    text = af.readline()\r\n                    context = parse_text(text)\r\n                    sync_write_db(session, context, AModel)\r\n                except IOError:\r\n                    af.close()\r\n                    af = None\r\n            if bf:\r\n                try:\r\n                    text = bf.readline()\r\n                    context = parse_text(text)\r\n                    sync_write_db(session, context, BModel)\r\n                except IOError:\r\n                    bf.close()\r\n                    bf = None\r\n            if not af and not bf:\r\n                return\r\n\r\n\r\ndef sync_write_db(session, context, model):\r\n    info, obj = None, None\r\n    try:\r\n        if context[\"info\"]:\r\n            info = session.execute(\r\n                select(Info).filter(\r\n                    Info.attr == context[\"info\"]\r\n                )\r\n            )\r\n            info = info.scalars().one_or_none()\r\n            if not info:\r\n                info = Info(attr=context[\"info\"])\r\n                session.add(info)\r\n        if context[\"header\"]:\r\n            obj = session.execute(\r\n                select(model).filter(model.info == context[\"info\"]))\r\n            obj = obj.scalars().one_or_none()\r\n            if not obj:\r\n                obj = model(info=context[\"info\"])\r\n                session.add(obj)\r\n        if obj or info:\r\n            if info not in obj.info:\r\n                obj.info.append(info)\r\n                session.add(obj)\r\n            session.commit()\r\n    except Exception as e:\r\n        session.rollback()\r\n        raise e\r\n\r\n\r\nif __name__ == '__main__':\r\n    sync_read_file()\r\n\r\n```\r\n这个协程的方法，每秒每个表可以写 400 多行，改为同步单线程的还是每秒写 400 多行。  \r\n不知道是我协程的用法有问题？还是说有别的什么原因？", "content_rendered": "<p>有一个读文件然后写数据库的操作，想尝试使用协程。<br/>\n使用协程的：  </p>\n<pre><code class=\"language-python\">async def parse_text(file_path: Path, context_qs: [asyncio.Queue]):\n    ql = len(context_qs)\n    i = 0\n    # 每一个 Queue 放 step 个数据就切换下一个\n    step = 2\n    with open(file_path, encoding=\"utf8\") as f:\n        for text in f:\n            if i // step == ql:\n                i = 0\n            context_q = context_qs[i // step]\n            context = {}\n            text = re.findall(r\"\\d+\", text)\n            if text:\n                context = {\"解析然后组装成 dict\"}\n                await context_q.put(context)\n                # 这里如果不 join ，会一直在这个 for 循环里不出去\n                await context_q.join()\n                i = i + 1\n        else:\n            await context_q.put(\"结束标记\")\n            return\n\n\nasync def write_db(context_q: asyncio.Queue, model: ModelBase):\n    async with AsyncSession() as session:\n        while 1:\n            context = await context_q.get()\n            if context[\"结束标记\"] == \"end\":\n                return\n            info, obj = None, None\n            try:\n                if context[\"info\"]:\n                    info = await session.execute(\n                        select(InfoModel).filter(\n                            InfoModel.attr == context[\"info\"]\n                        )\n                    )\n                    info = info.scalars().one_or_none()\n                    if not info:\n                        info = InfoModel(attr=context[\"info\"])\n                        session.add(info)\n                if context[\"header\"]:\n                    obj = await session.execute(\n                        select(model).filter(\n                            model.header == context[\"header\"]\n                        ).options(selectinload(getattr(model, \"info\")))\n                    )\n                    obj = obj.scalars().one_or_none()\n                    if not obj:\n                        obj = model(header=context[\"header\"])\n                        session.add(obj)\n                if obj or info:\n                    if info not in obj.info:\n                        obj.info.append(info)\n                        session.add(obj)\n                    await session.commit()\n            except Exception as e:\n                await session.rollback()\n                raise e\n            else:\n                context_q.task_done()\n\n\nasync def main():\n\t# 每个读取文件并解析的方法对应 c_q_count 个写数据库的方法\n    c_q_count = 3\n    a_context_qs = [asyncio.Queue() for i in range(c_q_count)]\n    b_context_qs = [asyncio.Queue() for i in range(c_q_count)]\n    tasks = [\n        asyncio.create_task(\n            parse_text(Path(\"a.txt\"), a_context_qs)\n        ),\n        asyncio.create_task(\n            parse_text(Path(\"b.txt\"), b_context_qs)\n        ),\n    ]\n    for i in range(c_q_count):\n        tasks.append(asyncio.create_task(write_db(a_context_qs[i], AModel)))\n        tasks.append(asyncio.create_task(write_db(b_context_qs[i], BModel)))\n    await asyncio.gather(*tasks)\n\n\n\nif __name__ == '__main__':\n    asyncio.run(main(), debug=settings.DEBUG)\n\n</code></pre>\n<p>不使用协程的：  </p>\n<pre><code class=\"language-python\">def sync_read_file():\n    af = Path(\"a.txt\").open(encoding=\"utf8\")\n    bf = Path(\"b.txt\").open(encoding=\"utf8\")\n    with Session() as session:\n        while 1:\n            if af:\n                try:\n                    text = af.readline()\n                    context = parse_text(text)\n                    sync_write_db(session, context, AModel)\n                except IOError:\n                    af.close()\n                    af = None\n            if bf:\n                try:\n                    text = bf.readline()\n                    context = parse_text(text)\n                    sync_write_db(session, context, BModel)\n                except IOError:\n                    bf.close()\n                    bf = None\n            if not af and not bf:\n                return\n\n\ndef sync_write_db(session, context, model):\n    info, obj = None, None\n    try:\n        if context[\"info\"]:\n            info = session.execute(\n                select(Info).filter(\n                    Info.attr == context[\"info\"]\n                )\n            )\n            info = info.scalars().one_or_none()\n            if not info:\n                info = Info(attr=context[\"info\"])\n                session.add(info)\n        if context[\"header\"]:\n            obj = session.execute(\n                select(model).filter(model.info == context[\"info\"]))\n            obj = obj.scalars().one_or_none()\n            if not obj:\n                obj = model(info=context[\"info\"])\n                session.add(obj)\n        if obj or info:\n            if info not in obj.info:\n                obj.info.append(info)\n                session.add(obj)\n            session.commit()\n    except Exception as e:\n        session.rollback()\n        raise e\n\n\nif __name__ == '__main__':\n    sync_read_file()\n\n</code></pre>\n<p>这个协程的方法，每秒每个表可以写 400 多行，改为同步单线程的还是每秒写 400 多行。<br/>\n不知道是我协程的用法有问题？还是说有别的什么原因？</p>\n", "last_modified": 1637417856, "replies": 23, "id": 816841}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_large.png?m=1635744526", "name": "career", "avatar_normal": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_normal.png?m=1635744526", "title": "职场话题", "url": "https://www.v2ex.com/go/career", "topics": 12370, "footer": "", "header": "这里，我们聊聊那些工作中遇到的开心和不开心的事。", "title_alternative": "Career", "avatar_mini": "https://cdn.v2ex.com/navatar/4ea0/6fbc/770_mini.png?m=1635744526", "stars": 2208, "aliases": [], "root": false, "id": 770, "parent_node_name": "work"}, "member": {"username": "camash", "website": "", "github": null, "psn": null, "avatar_normal": "https://cdn.v2ex.com/gravatar/c20f3d1d630f827db5dbecb5446dc963?s=24&d=retro", "bio": "", "url": "https://www.v2ex.com/u/camash", "tagline": "", "twitter": null, "created": 1609381284, "avatar_large": "https://cdn.v2ex.com/gravatar/c20f3d1d630f827db5dbecb5446dc963?s=24&d=retro", "avatar_mini": "https://cdn.v2ex.com/gravatar/c20f3d1d630f827db5dbecb5446dc963?s=24&d=retro", "location": "", "btc": null, "id": 526291}, "last_reply_by": "micean", "last_touched": 1637443325, "title": "中年人的 offer 求建议", "url": "https://www.v2ex.com/t/816861", "created": 1637425411, "deleted": 0, "content": "先说下中年人的基本情况：不知名的 985 本硕，刚好工作 10 年，已婚，已过 35 岁这个坎，技术栈单一就是数据库，ETL 和大数据开发的工作。由于之前家庭方面的种种原因，跳槽频繁，换了有 5 个公司了。\r\n\r\n最近一家公司，说是某类技术公司，其实主要就是在金融机构做外包，本来是想过来转型管理的，但是管理太难了，协调资源 /安排任务都让我彻夜难眠。觉得自己还是适合做点偏技术搬砖类的活。\r\n\r\n另外，外包的办公环境和能做的事情都很受限。所以，国庆之后开始投简历找工作，至这周总算得到两个 offer （按得到的时间排序）：\r\n\r\n1. 某财富 500 强外企，属于制造业，细分行业第一；工作内容是工厂数据处理，智能生产这一块；办公室离住的地方大概是 20 分钟自行车车程；打听了没什么加班，每月可以申请几天在家办公，极少量出差去工厂；设此处年薪为 1.0 ，缴 8%公积金，只有午餐补助，因为说的是晚上不加班。\r\n\r\n2. 某央企与当地政府办的合伙企业，算第三级国企，金融行业中比较热门的领域；工作内容还是数据集成和数据分析这一块；办公室大概 30 分钟地铁；试用期 6 个月必须总部出差，后面看项目决定是否还去总部； HR 说是不提倡加班，但网上搜索结论是强度大，福利好；此处的年薪为 0.85 ，多一个企业年金，缴 12%公积金，总部有三餐提供以及央企工会福利。\r\n\r\n**主要考虑的问题：**\r\n\r\n1. 没有过外企经验，如果希望长期走技术方向，外企是否更合适？面试中都点明了自己要走技术路线，外企的老外表示支持并有技术路线可走，国企没有明确的回复。\r\n\r\n2. 制造业感觉要土一点，是否金融国企后期潜力要大些？\r\n\r\n3. 国企说的后面看项目的点，感觉还是要跟着项目长期出差？\r\n\r\n4. 考虑到年龄的问题，需要权衡工作强度和裁员后还能否就业。（同时也投了互联网大厂，除了微软其它国内大厂连一面机会都没给过，以后肯定更难了）\r\n\r\n\r\n谢谢各位老铁提供建议", "content_rendered": "<p>先说下中年人的基本情况：不知名的 985 本硕，刚好工作 10 年，已婚，已过 35 岁这个坎，技术栈单一就是数据库，ETL 和大数据开发的工作。由于之前家庭方面的种种原因，跳槽频繁，换了有 5 个公司了。</p>\n<p>最近一家公司，说是某类技术公司，其实主要就是在金融机构做外包，本来是想过来转型管理的，但是管理太难了，协调资源 /安排任务都让我彻夜难眠。觉得自己还是适合做点偏技术搬砖类的活。</p>\n<p>另外，外包的办公环境和能做的事情都很受限。所以，国庆之后开始投简历找工作，至这周总算得到两个 offer （按得到的时间排序）：</p>\n<ol>\n<li>\n<p>某财富 500 强外企，属于制造业，细分行业第一；工作内容是工厂数据处理，智能生产这一块；办公室离住的地方大概是 20 分钟自行车车程；打听了没什么加班，每月可以申请几天在家办公，极少量出差去工厂；设此处年薪为 1.0 ，缴 8%公积金，只有午餐补助，因为说的是晚上不加班。</p>\n</li>\n<li>\n<p>某央企与当地政府办的合伙企业，算第三级国企，金融行业中比较热门的领域；工作内容还是数据集成和数据分析这一块；办公室大概 30 分钟地铁；试用期 6 个月必须总部出差，后面看项目决定是否还去总部； HR 说是不提倡加班，但网上搜索结论是强度大，福利好；此处的年薪为 0.85 ，多一个企业年金，缴 12%公积金，总部有三餐提供以及央企工会福利。</p>\n</li>\n</ol>\n<p><strong>主要考虑的问题：</strong></p>\n<ol>\n<li>\n<p>没有过外企经验，如果希望长期走技术方向，外企是否更合适？面试中都点明了自己要走技术路线，外企的老外表示支持并有技术路线可走，国企没有明确的回复。</p>\n</li>\n<li>\n<p>制造业感觉要土一点，是否金融国企后期潜力要大些？</p>\n</li>\n<li>\n<p>国企说的后面看项目的点，感觉还是要跟着项目长期出差？</p>\n</li>\n<li>\n<p>考虑到年龄的问题，需要权衡工作强度和裁员后还能否就业。（同时也投了互联网大厂，除了微软其它国内大厂连一面机会都没给过，以后肯定更难了）</p>\n</li>\n</ol>\n<p>谢谢各位老铁提供建议</p>\n", "last_modified": 1637425411, "replies": 23, "id": 816861}]