[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 205048, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3833, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 576052, "username": "rainoprime", "url": "https://www.v2ex.com/u/rainoprime", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/f035e841ebb750b54417b9dddd2d66c3?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/f035e841ebb750b54417b9dddd2d66c3?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/f035e841ebb750b54417b9dddd2d66c3?s=73&d=retro", "created": 1647685683, "last_modified": 1647685683}, "last_reply_by": "longline", "last_touched": 1686733333, "title": "父母诉讼离婚，我真的不知道该怎么办了", "url": "https://www.v2ex.com/t/948534", "created": 1686704524, "deleted": 0, "content": "## 内容\r\n\t父母结婚多年以来，几乎天天吵架，父亲也动手打过母亲大概三四次吧，总是因为一点生活小事琐事就争吵，搞得人尽皆知，现在他们离婚，每个人都给我打过电话，但他们俩人对我说的内容根本就合不起来，我不知道该相信谁，希望各位能帮我看看，我是真的没办法了。感激不尽\r\n## 起诉诉求\r\n\t一处平房，马上要拆迁了，一处商铺，一辆车，我妈要求固定资产平分，我爸是不想给，因为这些年，商铺是我爸还的贷款，之前断过一段时间，听他的意思貌似是上征信了，我妈也不掏钱（这是我爸告诉我的），车也是我爸买的，不过车主名字是我妈（因为我妈一直闹，怕他往外借）\r\n## 母亲性格\r\n\t爱发脾气，爱干净，喜欢把钱拿在自己手里，强势。\r\n\t比如：会因为我爸在房屋踩了几个脚印而吵架\r\n\t会因为我爸吃完饭没把桌子收拾干净而吵架\r\n\t会因为我爸每年剩不下钱而吵架（具体为什么没剩请往下看）\r\n\t会因为我爸接她的话不满意而吵架\r\n\t会因为我爸放假睡觉不帮他收拾而吵架，也就是所谓的眼里没活（厂长，一个月只有两天假）\r\n\t会因为我爸几点说要请吃饭但晚了几个小时而生气吵架\r\n\t会因为我爸不交电费而吵架\r\n\t总而言之，在我看来这都是生活中在小不能小的事情，但我妈总能找各种理由来吵架，有的时候我也不知道她为什么生气\r\n\t她爱拍抖音，我记得有一次，我和她吵起来了，一生气删了她俩视频，结果我妈气的直接把手机摔了，并让我给她找回来，说就这么点爱好，我也是第一次见到这样的母亲，容易过激。\r\n    花钱的地方就是负责日常家庭开销，以及我的生活费，我记得的唯一大的开销就是，我父亲骑电动碰了一个老头拿了 3 万还是 5 万来着，我爸拿了两万三万；因为拆迁所以盖另一个院子拿了 9 万，我爸拿了 4 万。现在在对外出租，房租都是我妈收。\r\n    我爸是一年 10 万，总说我爸不剩钱，说是外面有小三，但没有证据。\r\n    因为在家里有点小生意，也是我爸弄起来的，所以我妈平常很清闲，相当于呆着一年就挣七万吧。\r\n# 父亲的性格\r\n\t我妈总说吵架爱翻旧账，结婚初期动手打人，为家庭考虑大局，想的长远，吵起来不依不饶，除了动手最严重的时候是砸电视，砸玻璃，不会哄女人，爱和朋友吃饭喝酒，抗压能力强，在家里话比较少，算是沉孔寡言吧，我感觉是不敢说话了。\r\n    在我有记忆的时候，家里的大事一直是我爸花钱，比如房子盖东配房，商铺，汽车，我培训的学费，上私立学校的学费，以及在家弄点小生意的各种机器的费用，\r\n\t和我爸沟通少，能想到的就这些\r\n## 母亲对我说的\r\n\t首先在两周前跟我说他们要去民政局离婚了，但是没离成，说是我把不想把房产平分，让我妈去起诉吧，再然后就是各种说我爸的不好，说在我妈不在的时候对我小姨和大姨有非分之想？（说实话这个我是不信），还总说对不起我，要不是为了我早离婚了，这段时间总是对我哭，说为什么这么苦，我本来就心软，然后就让我录了段视频，证明的是那处平方是他们的共同财产。还说离婚以后不会再婚了，房产的钱都是留给我的。\r\n## 父亲对我说的\r\n\t我爸将结婚到现在所有的过往以及大的花销都说了一遍，然后说去民政局离婚是因为我妈的身份呢证号码和结婚证上不一样。其他的目的就是为了让我知道他们要离婚了，说是不想让我知道的，怕对我有影响，他说告诉我的目的就是想知道我是什么看法，如果我怪他们，那他说俩人都净身出户，所有钱和房产都给我过到我名下；如果我不怪他们，那我爸就要尽全力争共同财产，也就是想尽各种办法利益最大化。\r\n    \r\n## 我的想法\r\n\t至于协议离婚的时候他们俩说的完全不一样，我不知道该信谁的，至于其他的也是各有各的理，我已经不知道该怎怎么办了，究竟是为了自己的利益怪他们（这里对于我妈来讲，如果都打给我，她肯定会哭着找我要的，不要就会说我不孝顺，没良心，白养你这么大），还是说让他们自己看着来吧，毕竟这么多年我是想让他们离婚的。", "content_rendered": "<h2>内容</h2>\n<pre><code>父母结婚多年以来，几乎天天吵架，父亲也动手打过母亲大概三四次吧，总是因为一点生活小事琐事就争吵，搞得人尽皆知，现在他们离婚，每个人都给我打过电话，但他们俩人对我说的内容根本就合不起来，我不知道该相信谁，希望各位能帮我看看，我是真的没办法了。感激不尽\n</code></pre>\n<h2>起诉诉求</h2>\n<pre><code>一处平房，马上要拆迁了，一处商铺，一辆车，我妈要求固定资产平分，我爸是不想给，因为这些年，商铺是我爸还的贷款，之前断过一段时间，听他的意思貌似是上征信了，我妈也不掏钱（这是我爸告诉我的），车也是我爸买的，不过车主名字是我妈（因为我妈一直闹，怕他往外借）\n</code></pre>\n<h2>母亲性格</h2>\n<pre><code>爱发脾气，爱干净，喜欢把钱拿在自己手里，强势。\n比如：会因为我爸在房屋踩了几个脚印而吵架\n会因为我爸吃完饭没把桌子收拾干净而吵架\n会因为我爸每年剩不下钱而吵架（具体为什么没剩请往下看）\n会因为我爸接她的话不满意而吵架\n会因为我爸放假睡觉不帮他收拾而吵架，也就是所谓的眼里没活（厂长，一个月只有两天假）\n会因为我爸几点说要请吃饭但晚了几个小时而生气吵架\n会因为我爸不交电费而吵架\n总而言之，在我看来这都是生活中在小不能小的事情，但我妈总能找各种理由来吵架，有的时候我也不知道她为什么生气\n她爱拍抖音，我记得有一次，我和她吵起来了，一生气删了她俩视频，结果我妈气的直接把手机摔了，并让我给她找回来，说就这么点爱好，我也是第一次见到这样的母亲，容易过激。\n花钱的地方就是负责日常家庭开销，以及我的生活费，我记得的唯一大的开销就是，我父亲骑电动碰了一个老头拿了 3 万还是 5 万来着，我爸拿了两万三万；因为拆迁所以盖另一个院子拿了 9 万，我爸拿了 4 万。现在在对外出租，房租都是我妈收。\n我爸是一年 10 万，总说我爸不剩钱，说是外面有小三，但没有证据。\n因为在家里有点小生意，也是我爸弄起来的，所以我妈平常很清闲，相当于呆着一年就挣七万吧。\n</code></pre>\n<h1>父亲的性格</h1>\n<pre><code>我妈总说吵架爱翻旧账，结婚初期动手打人，为家庭考虑大局，想的长远，吵起来不依不饶，除了动手最严重的时候是砸电视，砸玻璃，不会哄女人，爱和朋友吃饭喝酒，抗压能力强，在家里话比较少，算是沉孔寡言吧，我感觉是不敢说话了。\n在我有记忆的时候，家里的大事一直是我爸花钱，比如房子盖东配房，商铺，汽车，我培训的学费，上私立学校的学费，以及在家弄点小生意的各种机器的费用，\n和我爸沟通少，能想到的就这些\n</code></pre>\n<h2>母亲对我说的</h2>\n<pre><code>首先在两周前跟我说他们要去民政局离婚了，但是没离成，说是我把不想把房产平分，让我妈去起诉吧，再然后就是各种说我爸的不好，说在我妈不在的时候对我小姨和大姨有非分之想？（说实话这个我是不信），还总说对不起我，要不是为了我早离婚了，这段时间总是对我哭，说为什么这么苦，我本来就心软，然后就让我录了段视频，证明的是那处平方是他们的共同财产。还说离婚以后不会再婚了，房产的钱都是留给我的。\n</code></pre>\n<h2>父亲对我说的</h2>\n<pre><code>我爸将结婚到现在所有的过往以及大的花销都说了一遍，然后说去民政局离婚是因为我妈的身份呢证号码和结婚证上不一样。其他的目的就是为了让我知道他们要离婚了，说是不想让我知道的，怕对我有影响，他说告诉我的目的就是想知道我是什么看法，如果我怪他们，那他说俩人都净身出户，所有钱和房产都给我过到我名下；如果我不怪他们，那我爸就要尽全力争共同财产，也就是想尽各种办法利益最大化。\n</code></pre>\n<h2>我的想法</h2>\n<pre><code>至于协议离婚的时候他们俩说的完全不一样，我不知道该信谁的，至于其他的也是各有各的理，我已经不知道该怎怎么办了，究竟是为了自己的利益怪他们（这里对于我妈来讲，如果都打给我，她肯定会哭着找我要的，不要就会说我不孝顺，没良心，白养你这么大），还是说让他们自己看着来吧，毕竟这么多年我是想让他们离婚的。\n</code></pre>\n", "last_modified": 1686704524, "replies": 147, "id": 948534}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1677911181", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1677911181", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 56584, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1677911181", "stars": 8424, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 612551, "username": "tempw", "url": "https://www.v2ex.com/u/tempw", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/dbe3761e60e8a67e7c04e1aed8827ddd?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/dbe3761e60e8a67e7c04e1aed8827ddd?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/dbe3761e60e8a67e7c04e1aed8827ddd?s=73&d=retro", "created": 1675652563, "last_modified": 1675652563}, "last_reply_by": "bk201", "last_touched": 1686733289, "title": "大学本科是否应该缩招？", "url": "https://www.v2ex.com/t/948602", "created": 1686713188, "deleted": 0, "content": "一方面年轻劳动力不足。一方面大学生毕业找不到工作。大环境确实不行。但我们的教育体制也有很严重的问题。\r\n\r\n除了一些学风还不错的大学，许多大学生大学四年下来就是在吃喝玩乐，把学校当做大型 KTV 了。当然，学校的老师教学也是很严重的问题。\r\n\r\n还有一些收费昂贵的民办二本（以前的三本），更是既教不了什么也学不了什么。就这样的教学模式，居然持续了这么多年。而且最近十多年来居然一直在扩招。学生表演上学，老师表演上课。\r\n\r\n不如缩招一半。其余考不上的都去进厂。那些没有学习能力的也不用那么挣扎了。", "content_rendered": "<p>一方面年轻劳动力不足。一方面大学生毕业找不到工作。大环境确实不行。但我们的教育体制也有很严重的问题。</p>\n<p>除了一些学风还不错的大学，许多大学生大学四年下来就是在吃喝玩乐，把学校当做大型 KTV 了。当然，学校的老师教学也是很严重的问题。</p>\n<p>还有一些收费昂贵的民办二本（以前的三本），更是既教不了什么也学不了什么。就这样的教学模式，居然持续了这么多年。而且最近十多年来居然一直在扩招。学生表演上学，老师表演上课。</p>\n<p>不如缩招一半。其余考不上的都去进厂。那些没有学习能力的也不用那么挣扎了。</p>\n", "last_modified": 1686713188, "replies": 142, "id": 948602}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/8d31/7bdc/747_large.png?m=1523201604", "name": "deals", "avatar_normal": "https://cdn.v2ex.com/navatar/8d31/7bdc/747_normal.png?m=1523201604", "title": "优惠信息", "url": "https://www.v2ex.com/go/deals", "topics": 2154, "footer": "", "header": "这里分享和发布来自互联网上的最新优惠信息", "title_alternative": "Deals", "avatar_mini": "https://cdn.v2ex.com/navatar/8d31/7bdc/747_mini.png?m=1523201604", "stars": 3156, "aliases": [], "root": false, "id": 747, "parent_node_name": "life"}, "member": {"id": 23618, "username": "liqinliqin", "url": "https://www.v2ex.com/u/liqinliqin", "website": "www.doit.am", "twitter": "", "psn": "", "github": "smartarduino", "btc": "", "location": "深圳", "tagline": "www.doiting.com", "bio": "机器人、物联网", "avatar_mini": "https://cdn.v2ex.com/avatar/80d4/c0e3/23618_mini.png?m=1650245704", "avatar_normal": "https://cdn.v2ex.com/avatar/80d4/c0e3/23618_normal.png?m=1650245704", "avatar_large": "https://cdn.v2ex.com/avatar/80d4/c0e3/23618_large.png?m=1650245704", "created": 1342575715, "last_modified": 1650245704}, "last_reply_by": "liqinliqin", "last_touched": 1686733235, "title": "过了 MFI 认证的 the Apple Find My network 产品，活动价格 29", "url": "https://www.v2ex.com/t/948578", "created": 1686709632, "deleted": 0, "content": "链接：\r\nhttps://item.taobao.com/item.htm?&id=682774174482\r\n\r\n说明：\r\n第三方认证产品一般没有 UWB ，UWB 主要作用是近场指向性，第三方是通过一个蜂鸣器实现的，蓝牙链接上，可以控制其发出声音。", "content_rendered": "链接：<br /><a target=\"_blank\" href=\"https://item.taobao.com/item.htm?&amp;id=682774174482\" rel=\"nofollow noopener\">https://item.taobao.com/item.htm?&amp;id=682774174482</a><br /><br />说明：<br />第三方认证产品一般没有 UWB ，UWB 主要作用是近场指向性，第三方是通过一个蜂鸣器实现的，蓝牙链接上，可以控制其发出声音。", "last_modified": 1686709632, "replies": 116, "id": 948578}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/70ef/df2e/17_large.png?m=1660301119", "name": "create", "avatar_normal": "https://cdn.v2ex.com/navatar/70ef/df2e/17_normal.png?m=1660301119", "title": "分享创造", "url": "https://www.v2ex.com/go/create", "topics": 20422, "footer": "", "header": "欢迎你在这里发布自己的最新作品！", "title_alternative": "Create", "avatar_mini": "https://cdn.v2ex.com/navatar/70ef/df2e/17_mini.png?m=1660301119", "stars": 4897, "aliases": [], "root": false, "id": 17, "parent_node_name": "geek"}, "member": {"id": 184621, "username": "studyingss", "url": "https://www.v2ex.com/u/studyingss", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/6ff6/40c3/184621_mini.png?m=1686048988", "avatar_normal": "https://cdn.v2ex.com/avatar/6ff6/40c3/184621_normal.png?m=1686048988", "avatar_large": "https://cdn.v2ex.com/avatar/6ff6/40c3/184621_large.png?m=1686048988", "avatar_xlarge": "https://cdn.v2ex.com/avatar/6ff6/40c3/184621_xlarge.png?m=1686048988", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/6ff6/40c3/184621_xlarge.png?m=1686048988", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/6ff6/40c3/184621_xlarge.png?m=1686048988", "created": 1469856014, "last_modified": 1686048988}, "last_reply_by": "Cambra1n", "last_touched": 1686733182, "title": "我花了一周准备，想和你分享 Clash 所有特性运用到极致之后的体验", "url": "https://www.v2ex.com/t/948499", "created": 1686671342, "deleted": 0, "content": "# 前言\r\n去年我发布了一篇关于 clash relay 的教程，在 V2EX 引发了一些讨论。\r\n\r\n比如 https://www.v2ex.com/t/894700 还有一些其他的帖子。\r\n\r\n当初随便拿来放临时配置的 gist 也有了 50 多个 star\r\nhttps://gist.github.com/miaomiaoclub/6947f7cb93846301f1658da0edcd61bf\r\n\r\n时隔半年多，这套方案在和朋友 @ RADE 的共同学习中有了不少改进，tunnels 功能的加入更是让整套方案如虎添翼，不少体验让我自己都有种“wow”的感觉，例如 **延迟降低 100%** 。\r\n\r\n最终的效果让我到现在都非常兴奋，所以我花了一周时间再来写一篇文章和大家分享。\r\n\r\n# 快速体验\r\n这是我目前使用的配置的示意图，为了美观简化了不少内容。\r\n\r\n![]( https://i.v2ex.co/LBH2ctD1.jpeg)\r\n\r\n因为所有东西要讲完真的很复杂，为了让大家快点感受我的激动，我花了一周时间写了一个模版让你可以在 30 秒内开始体验这一切。\r\n\r\n你只需要去 https://www.urlencoder.org/ 或者其他什么网站把你的订阅链接进行 url 编码。\r\n\r\n然后把编码后的内容拼接到下面这一大串链接的末尾，再把它放到 Clash 里面订阅就可以了。\r\n\r\n```\r\nhttps://api.sublink.dev/sub?target=clash&insert=false&config=https%3A%2F%2Fgist.githubusercontent.com%2Fmiaomiaoclub%2F2178a7dd7fbbf4b7774ad6f7ad2000c5%2Fraw&emoji=true&list=false&tfo=false&scv=true&fdn=false&sort=false&new_name=true&url=https%3A%2F%2Fgist.githubusercontent.com%2Fmiaomiaoclub%2F92fc5af76ede047810a7a51af86089ee%2Fraw%7C\r\n```\r\n\r\n完成之后你应该可以看到这样的分组，其中的 READY BOOST 就是使用了 tunnel + grpc 的连接，你可以把左右两边的延迟进行对比。\r\n\r\n![]( https://i.v2ex.co/57thktOc.png)\r\n\r\n然后你可以在节点选择列表的末尾找到 READY BOOST ，选中它，然后打开几个网页，另外，它应该是可以解锁 ChatGPT 的。\r\n\r\n顺带一提，当你自行实现的时候，它是 udp fullcone 的，我在这里禁用了 udp 。\r\n\r\n这套体验配置会在 1 天后失效，取决于这个帖子的回复情况延长或缩短。\r\n\r\n# 实现原理是什么？\r\n\r\n## 基于 grpc 的连接复用。\r\n\r\n  关于 proxy chain 的优点，可以查看下面这篇文章\r\n\r\n  https://luxirty.com/article/01815b7d-073d-48ef-9528-7b4ad033f8d0\r\n\r\n  这里主要讲讲 grpc ，众所周知，连接复用可以节省握手时间，http/2 就拥有连接复用的特性。\r\n\r\n  然而 clash 只为 grpc 实现了连接复用，http/2 在 clash 中并不具备连接复用。\r\n\r\n\r\n## 基于 tunnel 的 proxy chain\r\n\r\n  在实际测试中，我们（@RADE ）发现 relay 实际上导致了非常多的问题，例如 udp 无法通过、grpc 奇怪的高延迟等。\r\n\r\n  因此我们使用 tunnels 替换了 relay ，它的表现相比于 relay 优秀了很多。\r\n\r\n  你可以到 clash 的官方 wiki 来学习 tunnel 的用法\r\n  https://dreamacro.github.io/clash/configuration/configuration-reference.html\r\n\r\n  也可以看看我的博客，有稍微容易看懂的讲解\r\n  https://luxirty.com/article/chain-proxy-powered-by-clash-tunnels\r\n\r\n## 负载均衡、故障转移、最短延迟\r\n\r\n  在上面的体验配置中我并没有把所有这些特性都加上。因为写起来太麻烦了。但我相信对 V2EX 的各位来说并不难。\r\n\r\n## 实际上还有更多的内容可以讲：\r\n- 如何更方便地为 clash 自定义规则\r\n\r\n  你可以看到在上面的测试配置中，我们修改了配置并添加了节点，并且没有依赖任何自建服务，一个公开的 subconverter+gist 足够了\r\n- 使用订阅转换时，如何把来自不同订阅的 proxy 分别放到不同的 group\r\n\r\n\r\n唔…好啦，大概就这些！……希望这贴不要沉🥹", "content_rendered": "<h1>前言</h1>\n<p>去年我发布了一篇关于 clash relay 的教程，在 V2EX 引发了一些讨论。</p>\n<p>比如 <a href=\"https://www.v2ex.com/t/894700\" rel=\"nofollow\">https://www.v2ex.com/t/894700</a> 还有一些其他的帖子。</p>\n<p>当初随便拿来放临时配置的 gist 也有了 50 多个 star\n<a href=\"https://gist.github.com/miaomiaoclub/6947f7cb93846301f1658da0edcd61bf\" rel=\"nofollow\">https://gist.github.com/miaomiaoclub/6947f7cb93846301f1658da0edcd61bf</a></p>\n<p>时隔半年多，这套方案在和朋友 @ RADE 的共同学习中有了不少改进，tunnels 功能的加入更是让整套方案如虎添翼，不少体验让我自己都有种“wow”的感觉，例如 <strong>延迟降低 100%</strong> 。</p>\n<p>最终的效果让我到现在都非常兴奋，所以我花了一周时间再来写一篇文章和大家分享。</p>\n<h1>快速体验</h1>\n<p>这是我目前使用的配置的示意图，为了美观简化了不少内容。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.v2ex.co/LBH2ctD1.jpeg\"/></p>\n<p>因为所有东西要讲完真的很复杂，为了让大家快点感受我的激动，我花了一周时间写了一个模版让你可以在 30 秒内开始体验这一切。</p>\n<p>你只需要去 <a href=\"https://www.urlencoder.org/\" rel=\"nofollow\">https://www.urlencoder.org/</a> 或者其他什么网站把你的订阅链接进行 url 编码。</p>\n<p>然后把编码后的内容拼接到下面这一大串链接的末尾，再把它放到 Clash 里面订阅就可以了。</p>\n<pre><code>https://api.sublink.dev/sub?target=clash&amp;insert=false&amp;config=https%3A%2F%2Fgist.githubusercontent.com%2Fmiaomiaoclub%2F2178a7dd7fbbf4b7774ad6f7ad2000c5%2Fraw&amp;emoji=true&amp;list=false&amp;tfo=false&amp;scv=true&amp;fdn=false&amp;sort=false&amp;new_name=true&amp;url=https%3A%2F%2Fgist.githubusercontent.com%2Fmiaomiaoclub%2F92fc5af76ede047810a7a51af86089ee%2Fraw%7C\n</code></pre>\n<p>完成之后你应该可以看到这样的分组，其中的 READY BOOST 就是使用了 tunnel + grpc 的连接，你可以把左右两边的延迟进行对比。</p>\n<p><img alt=\"\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.v2ex.co/57thktOc.png\"/></p>\n<p>然后你可以在节点选择列表的末尾找到 READY BOOST ，选中它，然后打开几个网页，另外，它应该是可以解锁 ChatGPT 的。</p>\n<p>顺带一提，当你自行实现的时候，它是 udp fullcone 的，我在这里禁用了 udp 。</p>\n<p>这套体验配置会在 1 天后失效，取决于这个帖子的回复情况延长或缩短。</p>\n<h1>实现原理是什么？</h1>\n<h2>基于 grpc 的连接复用。</h2>\n<p>关于 proxy chain 的优点，可以查看下面这篇文章</p>\n<p><a href=\"https://luxirty.com/article/01815b7d-073d-48ef-9528-7b4ad033f8d0\" rel=\"nofollow\">https://luxirty.com/article/01815b7d-073d-48ef-9528-7b4ad033f8d0</a></p>\n<p>这里主要讲讲 grpc ，众所周知，连接复用可以节省握手时间，http/2 就拥有连接复用的特性。</p>\n<p>然而 clash 只为 grpc 实现了连接复用，http/2 在 clash 中并不具备连接复用。</p>\n<h2>基于 tunnel 的 proxy chain</h2>\n<p>在实际测试中，我们（@RADE ）发现 relay 实际上导致了非常多的问题，例如 udp 无法通过、grpc 奇怪的高延迟等。</p>\n<p>因此我们使用 tunnels 替换了 relay ，它的表现相比于 relay 优秀了很多。</p>\n<p>你可以到 clash 的官方 wiki 来学习 tunnel 的用法\n<a href=\"https://dreamacro.github.io/clash/configuration/configuration-reference.html\" rel=\"nofollow\">https://dreamacro.github.io/clash/configuration/configuration-reference.html</a></p>\n<p>也可以看看我的博客，有稍微容易看懂的讲解\n<a href=\"https://luxirty.com/article/chain-proxy-powered-by-clash-tunnels\" rel=\"nofollow\">https://luxirty.com/article/chain-proxy-powered-by-clash-tunnels</a></p>\n<h2>负载均衡、故障转移、最短延迟</h2>\n<p>在上面的体验配置中我并没有把所有这些特性都加上。因为写起来太麻烦了。但我相信对 V2EX 的各位来说并不难。</p>\n<h2>实际上还有更多的内容可以讲：</h2>\n<ul>\n<li>\n<p>如何更方便地为 clash 自定义规则</p>\n<p>你可以看到在上面的测试配置中，我们修改了配置并添加了节点，并且没有依赖任何自建服务，一个公开的 subconverter+gist 足够了</p>\n</li>\n<li>\n<p>使用订阅转换时，如何把来自不同订阅的 proxy 分别放到不同的 group</p>\n</li>\n</ul>\n<p>唔…好啦，大概就这些！……希望这贴不要沉🥹</p>\n", "last_modified": 1686671342, "replies": 99, "id": 948499}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 205048, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3833, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 544025, "username": "Cagliostro", "url": "https://www.v2ex.com/u/Cagliostro", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/11d2/0edc/544025_mini.png?m=1678282180", "avatar_normal": "https://cdn.v2ex.com/avatar/11d2/0edc/544025_normal.png?m=1678282180", "avatar_large": "https://cdn.v2ex.com/avatar/11d2/0edc/544025_large.png?m=1678282180", "avatar_xlarge": "https://cdn.v2ex.com/avatar/11d2/0edc/544025_xlarge.png?m=1678282180", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/11d2/0edc/544025_xlarge.png?m=1678282180", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/11d2/0edc/544025_xlarge.png?m=1678282180", "created": 1619600989, "last_modified": 1678282180}, "last_reply_by": "vsean", "last_touched": 1686732526, "title": "中药熬制是如何控制变量？", "url": "https://www.v2ex.com/t/948537", "created": 1686704992, "deleted": 0, "content": "物理、化学、生物实验都有一个关键要素就是对照组与控制变量。在中药熬制方面，医生是如何保证患者取药回家熬制时的火候与水量对药材的影响？\n\n现在一些医院还专业些了，是直接用一包包塑封的药材，都标注了多少克，但是很多医院并不提供熬药服务，都是选择让患者自行回家用砂锅熬制。\n\n难道中药有很大的容差范围？", "content_rendered": "物理、化学、生物实验都有一个关键要素就是对照组与控制变量。在中药熬制方面，医生是如何保证患者取药回家熬制时的火候与水量对药材的影响？<br /><br />现在一些医院还专业些了，是直接用一包包塑封的药材，都标注了多少克，但是很多医院并不提供熬药服务，都是选择让患者自行回家用砂锅熬制。<br /><br />难道中药有很大的容差范围？", "last_modified": 1686704992, "replies": 96, "id": 948537}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 205048, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3833, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 132693, "username": "fyxtc", "url": "https://www.v2ex.com/u/fyxtc", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/efd6/53c4/132693_mini.png?m=1686447610", "avatar_normal": "https://cdn.v2ex.com/avatar/efd6/53c4/132693_normal.png?m=1686447610", "avatar_large": "https://cdn.v2ex.com/avatar/efd6/53c4/132693_large.png?m=1686447610", "created": 1439434181, "last_modified": 1686447610}, "last_reply_by": "pengpengpeng", "last_touched": 1686732780, "title": "哪些机场按量付费比较稳定的", "url": "https://www.v2ex.com/t/948533", "created": 1686704303, "deleted": 0, "content": "用不了大流量，想找个按量的", "content_rendered": "<p>用不了大流量，想找个按量的</p>\n", "last_modified": 1686704303, "replies": 86, "id": 948533}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/093f/65e0/59_large.png?m=1615956453", "name": "random", "avatar_normal": "https://cdn.v2ex.com/navatar/093f/65e0/59_normal.png?m=1615956453", "title": "随想", "url": "https://www.v2ex.com/go/random", "topics": 3513, "footer": "", "header": "有的时候，可以停下来找找灵感，然后再继续。", "title_alternative": "Random", "avatar_mini": "https://cdn.v2ex.com/navatar/093f/65e0/59_mini.png?m=1615956453", "stars": 1134, "aliases": [], "root": false, "id": 59, "parent_node_name": "v2ex"}, "member": {"id": 629410, "username": "GT1", "url": "https://www.v2ex.com/u/GT1", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/b00a/4bf0/629410_mini.png?m=1686707956", "avatar_normal": "https://cdn.v2ex.com/avatar/b00a/4bf0/629410_normal.png?m=1686707956", "avatar_large": "https://cdn.v2ex.com/avatar/b00a/4bf0/629410_large.png?m=1686707956", "avatar_xlarge": "https://cdn.v2ex.com/avatar/b00a/4bf0/629410_xlarge.png?m=1686707956", "created": 1684307290, "last_modified": 1686707956}, "last_reply_by": "zhifSu", "last_touched": 1686733066, "title": "诊所看不起小病", "url": "https://www.v2ex.com/t/948567", "created": 1686708605, "deleted": 0, "content": "这两天嗓子肿了，就去附近的诊所看了下，医生建议我立马挂吊水，肿的厉害，吞咽很疼。我说还的上班（伤不起），先开些便宜的药吃吃。然后结算时 110 元，用的医保。\r\n如下：\r\n1. 头孢克洛胶囊，42 元\r\n2. 甘桔清咽颗粒，53 元\r\n3. 其他费用 15 元（估计是问诊费用）\r\n\r\n总费用 110 元.\r\n\r\n这个要是挂吊水，一天一次，得三天。\r\n\r\n\r\n这两个药，淘宝我扫了一下码，合起来不到 40 元，想问一下，诊所看病，就是这个费用水平吗？\r\n要是挂吊水，去大医院还是诊所。", "content_rendered": "<p>这两天嗓子肿了，就去附近的诊所看了下，医生建议我立马挂吊水，肿的厉害，吞咽很疼。我说还的上班（伤不起），先开些便宜的药吃吃。然后结算时 110 元，用的医保。\n如下：</p>\n<ol>\n<li>头孢克洛胶囊，42 元</li>\n<li>甘桔清咽颗粒，53 元</li>\n<li>其他费用 15 元（估计是问诊费用）</li>\n</ol>\n<p>总费用 110 元.</p>\n<p>这个要是挂吊水，一天一次，得三天。</p>\n<p>这两个药，淘宝我扫了一下码，合起来不到 40 元，想问一下，诊所看病，就是这个费用水平吗？\n要是挂吊水，去大医院还是诊所。</p>\n", "last_modified": 1686708605, "replies": 72, "id": 948567}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6353/8fe6/519_large.png?m=1595507885", "name": "ideas", "avatar_normal": "https://cdn.v2ex.com/navatar/6353/8fe6/519_normal.png?m=1595507885", "title": "奇思妙想", "url": "https://www.v2ex.com/go/ideas", "topics": 5575, "footer": "", "header": "让你的创意在这里自由流动吧。", "title_alternative": "Ideas", "avatar_mini": "https://cdn.v2ex.com/navatar/6353/8fe6/519_mini.png?m=1595507885", "stars": 2840, "aliases": [], "root": false, "id": 519, "parent_node_name": "v2ex"}, "member": {"id": 468205, "username": "brainzhang", "url": "https://www.v2ex.com/u/brainzhang", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/be5c/f889/468205_mini.png?m=1658281116", "avatar_normal": "https://cdn.v2ex.com/avatar/be5c/f889/468205_normal.png?m=1658281116", "avatar_large": "https://cdn.v2ex.com/avatar/be5c/f889/468205_large.png?m=1658281116", "created": 1581034952, "last_modified": 1658281116}, "last_reply_by": "hahiru", "last_touched": 1686733256, "title": "能否建立一个的 AI 训练众包平台", "url": "https://www.v2ex.com/t/948555", "created": 1686707371, "deleted": 0, "content": "已经有很多人讨论过这个点子了，就像挖矿一样；能否建立一个的 AI 训练众包平台；家里有显卡的小伙伴可以把闲置的设备租出去赚取收益；而没有强力计算设备的用户无需花费大量资金购买设备， 只需登录平台，提交任务即可进行 AI 训练；\r\n\r\n之前的技术瓶颈在于几乎不可能将大规模的 AI 训练拆分成一个个分布式的小任务，因为数据量庞大，并行交换要求高速的带宽等等；但是目前像 Stable Diffusion 这样的图像处理任务，一旦部署了稳定和标准化的模型，是可以将任务拆分为极小的数据单位的；这样技术上就能将一个个任务分配给某一台个人 PC 去处理；\r\n\r\n我拍脑袋想了一下，建立这样一个平台的难点在于反作弊和计算量评估；这两点应该都有合适的解决方案；\r\n\r\n* 反作弊可以参考挖矿的算法，为每个客户端生成一对 公 /私钥， 服务端下发每个计算任务时，采用私钥加密；客户端上传每个计算任务时，采用公钥加密；\r\n\r\n* 计算量评估先期可以采用服务端评估的方法；后期可以通过下发任务给配置类似的客户端，采用同一个客户端并行执行同一任务，然后比较计算时间，来建立一个靠谱的计算量评估机制\r\n\r\n* 最后是防止滥用和羊毛党，可以采用信用评分，对于完成任务优秀的客户端打高分，给它分配更多更高收益的任务，从经济系统上进行激励；\r\n\r\n我搜了一下，目前这个点子的相关项目不是很多，都在起步阶段，我觉得挺有前景的；\r\n\r\n大家讨论一下，这个项目在 技术 /商业 /可行性 上有哪里漏洞？\r\n\r\n我在 github 上建立一个一下项目，有兴趣的小伙伴可以去讨论下:\r\n\r\nhttps://github.com/aitobox", "content_rendered": "<p>已经有很多人讨论过这个点子了，就像挖矿一样；能否建立一个的 AI 训练众包平台；家里有显卡的小伙伴可以把闲置的设备租出去赚取收益；而没有强力计算设备的用户无需花费大量资金购买设备， 只需登录平台，提交任务即可进行 AI 训练；</p>\n<p>之前的技术瓶颈在于几乎不可能将大规模的 AI 训练拆分成一个个分布式的小任务，因为数据量庞大，并行交换要求高速的带宽等等；但是目前像 Stable Diffusion 这样的图像处理任务，一旦部署了稳定和标准化的模型，是可以将任务拆分为极小的数据单位的；这样技术上就能将一个个任务分配给某一台个人 PC 去处理；</p>\n<p>我拍脑袋想了一下，建立这样一个平台的难点在于反作弊和计算量评估；这两点应该都有合适的解决方案；</p>\n<ul>\n<li>\n<p>反作弊可以参考挖矿的算法，为每个客户端生成一对 公 /私钥， 服务端下发每个计算任务时，采用私钥加密；客户端上传每个计算任务时，采用公钥加密；</p>\n</li>\n<li>\n<p>计算量评估先期可以采用服务端评估的方法；后期可以通过下发任务给配置类似的客户端，采用同一个客户端并行执行同一任务，然后比较计算时间，来建立一个靠谱的计算量评估机制</p>\n</li>\n<li>\n<p>最后是防止滥用和羊毛党，可以采用信用评分，对于完成任务优秀的客户端打高分，给它分配更多更高收益的任务，从经济系统上进行激励；</p>\n</li>\n</ul>\n<p>我搜了一下，目前这个点子的相关项目不是很多，都在起步阶段，我觉得挺有前景的；</p>\n<p>大家讨论一下，这个项目在 技术 /商业 /可行性 上有哪里漏洞？</p>\n<p>我在 github 上建立一个一下项目，有兴趣的小伙伴可以去讨论下:</p>\n<p><a href=\"https://github.com/aitobox\" rel=\"nofollow\">https://github.com/aitobox</a></p>\n", "last_modified": 1686707371, "replies": 64, "id": 948555}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/735b/90b4/67_large.png?m=1591791625", "name": "taste", "avatar_normal": "https://cdn.v2ex.com/navatar/735b/90b4/67_normal.png?m=1591791625", "title": "美酒与美食", "url": "https://www.v2ex.com/go/taste", "topics": 638, "footer": "", "header": "关于那些好喝和好吃的", "title_alternative": "Taste", "avatar_mini": "https://cdn.v2ex.com/navatar/735b/90b4/67_mini.png?m=1591791625", "stars": 695, "aliases": [], "root": false, "id": 67, "parent_node_name": "life"}, "member": {"id": 117534, "username": "KevinChan", "url": "https://www.v2ex.com/u/KevinChan", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/0a44/c356/117534_mini.png?m=1640098985", "avatar_normal": "https://cdn.v2ex.com/avatar/0a44/c356/117534_normal.png?m=1640098985", "avatar_large": "https://cdn.v2ex.com/avatar/0a44/c356/117534_large.png?m=1640098985", "created": 1431946465, "last_modified": 1640098985}, "last_reply_by": "blucer", "last_touched": 1686731295, "title": "世卫组织建议减少摄取非糖甜味剂", "url": "https://www.v2ex.com/t/948494", "created": 1686669128, "deleted": 0, "content": "日经： https://cn.nikkei.com/politicsaeconomy/politicsasociety/52660-2023-06-13-05-01-18.html\r\nWHO： https://www.who.int/news/item/15-05-2023-who-advises-not-to-use-non-sugar-sweeteners-for-weight-control-in-newly-released-guideline\r\n\r\n以上信息仅供参考", "content_rendered": "日经： <a target=\"_blank\" href=\"https://cn.nikkei.com/politicsaeconomy/politicsasociety/52660-2023-06-13-05-01-18.html\" rel=\"nofollow noopener\">https://cn.nikkei.com/politicsaeconomy/politicsasociety/52660-2023-06-13-05-01-18.html</a><br />WHO： <a target=\"_blank\" href=\"https://www.who.int/news/item/15-05-2023-who-advises-not-to-use-non-sugar-sweeteners-for-weight-control-in-newly-released-guideline\" rel=\"nofollow noopener\">https://www.who.int/news/item/15-05-2023-who-advises-not-to-use-non-sugar-sweeteners-for-weight-control-in-newly-released-guideline</a><br /><br />以上信息仅供参考", "last_modified": 1686669128, "replies": 62, "id": 948494}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1677911181", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1677911181", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 56584, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1677911181", "stars": 8424, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 620639, "username": "ScottHU", "url": "https://www.v2ex.com/u/ScottHU", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "full stack engineer. Write a request scene management library called alova", "avatar_mini": "https://cdn.v2ex.com/avatar/d239/f440/620639_mini.png?m=1686715527", "avatar_normal": "https://cdn.v2ex.com/avatar/d239/f440/620639_normal.png?m=1686715527", "avatar_large": "https://cdn.v2ex.com/avatar/d239/f440/620639_large.png?m=1686715527", "avatar_xlarge": "https://cdn.v2ex.com/avatar/d239/f440/620639_xlarge.png?m=1686715527", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/d239/f440/620639_xlarge.png?m=1686715527", "created": 1679644923, "last_modified": 1686715527}, "last_reply_by": "weaponc", "last_touched": 1686731839, "title": "是时候该换掉你的 axios 了", "url": "https://www.v2ex.com/t/948621", "created": 1686715553, "deleted": 0, "content": "axios 是一个基于 Promise 的 HTTP 客户端，每周的 npm 下载量 4000W+，如果回到在 10 年前，promise 式的请求工具是一个很大的创新，它解决了请求繁琐的问题，在那个性能要求不那么高的年代可谓是一骑绝尘。但随着时间的推移，Axios 在开发效率和性能方面开始有所落后，现在都已经是 2023 年了，面对日益复杂的需求，我们需要的是一款更具创新性和领先性的请求工具，而 promise 式的请求工具只能被称为**传统**了，如果你想保持在快速发展的前沿，那么请继续阅读。\r\n\r\n> 首先我想声明的是，我确实不是标题党，接下来我将通过暴露随着时间的推移，axios 在一些方面表现的力不从心，并推荐一个新的，相比 axios 更具现代化和创新性的请求工具给你，它就是 [轻量级的请求策略库 alova]( https://alova.js.org/)\r\n\r\n# 接下来我们看看 Promise 式请求工具的弱点（ axios ）\r\n\r\n## 1. 与 React 、Vue 等框架割裂\r\n现在，React 、Vue 等前端 UI 框架对于前端来说几乎是不可缺少的，axios 无法和这些框架的状态深度绑定，需要开发者自行维护它们，导致开发效率较低。\r\n\r\n## 2. 在性能方面毫无作为\r\n2023 年了，相比 10 年前的应用已经复杂了不知几个数量级，在请求方面要求也越来越高，来保证页面性能的要求，axios 在这方面毫无作为，例如在频繁地重复请求、同时发起多个相同请求等场景。\r\n\r\n## 3. 臃肿的体积\r\n根据 bundlephobia 显示，axios 的体积在压缩状态下有 11+kb ，不信的话，[你可以点此去查看]( https://bundlephobia.com/package/axios)\r\n\r\n## 4. 响应数据的 Ts 类型定义混乱\r\n在使用 axios 时，你可能经常会这样写：\r\n\r\n```typescript\r\n// 创建一个 axios 实例\r\nconst inst = axios.create({\r\n  baseURL: 'https://example.com/'\r\n})\r\n\r\n// 在响应拦截器中返回 data\r\ninst.interceptors.response.use(response => {\r\n  if (response.status === 200) {\r\n    return response.data\r\n  }\r\n  throw new Error(response.status)\r\n})\r\n\r\ninterface Resp {\r\n  id: number\r\n}\r\ninst.get<Resp>('/xxx').then(result => {\r\n  // result 的类型总是为 axios.AxiosResponse<Resp>\r\n  data.data\r\n})\r\n```\r\n不知道是 axios 故意为之还是忽略了，以上的发起的 GET 请求中，响应数据`result`的类型总是`axios.AxiosResponse<Resp>`的，但其实我们在响应拦截器中已经将`response.data`返回了，这导致响应数据类型混乱而被困扰。\r\n\r\n# 在 alova 中是如何解决的呢？\r\n\r\nalova 作为一个更加现代化，更加适应复杂应用的请求方案，也给出了它更加优雅的解决方案。同时为了降低给的学习成本，也保持了和 axios 相似的 api 设计，看起来就很熟悉有木有。\r\n\r\n> alova 读作“阿洛娃”，虽然和 axios 一样都是以 a 开头，以下两个名称需要注意区分哦！\r\n\r\n## 与 UI 框架深度融合，自动管理请求相关数据\r\n假设我们需要发起一个基本的数据获取请求，以 vue 为例，直接上对比代码。\r\n\r\n**axios**\r\n```html\r\n<template>\r\n  <div v-if=\"loading\">Loading...</div>\r\n  <div v-else-if=\"error\" class=\"error\">\r\n    {{ error.message }}\r\n  </div>\r\n  <div v-else>{{ data }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport axios from 'axios';\r\nimport { ref, onMounted } from 'vue';\r\n\r\nconst loading = ref(false);\r\nconst error = ref(null);\r\nconst data = ref(null);\r\n\r\nconst requestData = () => {\r\n  loading.value = true;\r\n  axios.get('http://xxx/index').then(result => {\r\n    data.value = result;\r\n  }).catch(e => {\r\n    error.value = e;\r\n  }).finally(() => {\r\n    loading.value = false;\r\n  });\r\n}\r\nonMounted(requestData);\r\n</script>\r\n```\r\n\r\n**alova**\r\n```html\r\n<template>\r\n  <div v-if=\"loading\">Loading...</div>\r\n  <div v-else-if=\"error\" class=\"error\">\r\n    {{ error.message }}\r\n  </div>\r\n  <div v-else>{{ data }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport { createAlova } from 'alova';\r\n\r\nconst pageData = createAlova({ baseURL: 'http://xxx' }).Get('/index');\r\nconst { loading, data, error } = useRequest(pageData);\r\n</script>\r\n```\r\n\r\n在 axios 中需要自己创建对应的请求状态并自行维护，而 alova 却帮你接管了这项工作\r\n\r\n## 开箱即用的高性能功能\r\n\r\n传统 Promise 式的请求工具主要定位于通过 Promise 的方式简化请求，而提高性能可能是它们最不会考虑的一点，但作为请求策略库的 alova 中却着重突出这一点，在 alova 中默认开启了内存缓存和请求共享，这两项可以极大地提高请求性能，提升用户体验的同时还能降低服务端压力，让我们来一一了解下它们吧。\r\n\r\n**内存缓存**\r\n\r\n内存模式就是在请求响应后将响应数据保存在本地内存中，当下次再发起相同请求时就会使用缓存数据，而不会再次发送请求，试想一下，当你在实现一个列表页，点击列表项可以进入详情页查看数据，你会想到用户可能会频繁在列表中点击查看详情，当详情数据没有变化时，如果每一次进入详情页都要请求一次未免也太浪费了，而且每次还需要用户等待加载。在 alova 中你可以默认享受到这样的待遇，以下展示下效果\r\n\r\n![screenshots.gif]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/310166bcba7845faa7b5cf8ee50437f6~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n**请求共享**\r\n\r\n你可能遇到过这种情况，当一个请求发出但还未响应时，又发起了相同请求，就造成了请求浪费，或者重复提交问题，例如以下三种场景：\r\n\r\n1. 一个组件在创建时会获取初始化数据，当一个页面同时渲染多个此组件时，将会同时发出多次相同请求；\r\n2. 提交按钮未被禁用，用户点击了多次提交按钮；\r\n3. 当预加载还未完成时进入了预加载页面，将会发起多次相同请求；\r\n\r\n共享请求就是用来解决这些问题的，它是通过复用请求的方式来实现的，由于这种案例无法直观展示，就不展示了，有兴趣的小伙伴可以自行体验体验。\r\n\r\n> 除此以外，自称是请求策略库的 alova 还提供了特定场景下的请求策略，我们将在下文中介绍，有兴趣的小伙伴请继续往下看。\r\n\r\n\r\n## 轻量级的体积\r\n压缩状态下的 alova 只有 4kb+，只有 axios 的 30%+，不信的话，[你可以点此去查看]( https://bundlephobia.com/package/alova)\r\n\r\n## 更加直观的响应数据 TS 类型\r\n\r\n在 axios 中，你想要定义响应数据的类型真是会让人感到困惑，如果你是个 Typescript 的重度用户，alova 可以给你提供完整的类型体验，当你在请求处定义响应数据时的类型后，你可以在多处享受到它，会让你感觉很清晰，我们来看看。\r\n\r\n```typescript\r\ninterface Resp {\r\n  id: number\r\n}\r\nconst pageData = createAlova({ baseURL: 'http://xxx' }).Get<Resp>('/index');\r\nconst {\r\n  data,  // data 的类型为 Resp\r\n  loading, error, onSuccess, send\r\n} = useRequest(pageData);\r\nonSuccess(event => {\r\n  // 在成功回调中获取响应数据时，event.data 的值类型也是 Resp\r\n  console.log(event.data);\r\n});\r\n\r\nconst handleClick = async () => {\r\n  // send 函数可以手动再次发送请求，它将可以接收到响应数据，它的值类型还是 Resp\r\n  const data = await send();\r\n}\r\n```\r\n\r\n至此，相比传统的 Promise 式请求库，你可能已经初步了解了 alova 的厉害。\r\n\r\n**但... 它的特性还远不止于此！**\r\n\r\n# alova 的其他特性\r\n\r\n## 多 UI 框架同时支持\r\n\r\nalova 同时支持 react 、vue 、svelte ，无论你使用哪种 UI 框架，它都能满足你。\r\n\r\n## 与 axios 相似的 api 设计，用起来更简单熟悉\r\nalova 的请求信息构造几乎和 axios 相同，我们来对比一下它们的 GET 和 POST 请求。\r\n\r\n**GET 请求**\r\n\r\n```js\r\n// axios\r\naxios.get('/index', {\r\n  // 设置请求头\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  },\r\n  // params 参数\r\n  params: {\r\n    userId: 1\r\n  }\r\n});\r\n\r\n// alova\r\nconst todoListGetter = alovaInstance.Get('/index', {\r\n  // 设置请求头\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  },\r\n  // params 参数\r\n  params: {\r\n    userId: 1\r\n  }\r\n});\r\n```\r\n\r\n**POST 请求**\r\n```js\r\n// axios\r\naxios.post('/login', {\r\n  username: 'xxx',\r\n  password: 'ppp'\r\n}, {\r\n  // 设置请求头\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  },\r\n  // params 参数\r\n  params: {\r\n    userId: 1\r\n  }\r\n});\r\n\r\n// alova\r\nconst loginPoster = alovaInstance.Post('/login', {\r\n  username: 'xxx',\r\n  password: 'ppp'\r\n}, {\r\n  // 设置请求头\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  },\r\n  // params 参数\r\n  params: {\r\n    userId: 1\r\n  }\r\n});\r\n```\r\n\r\n## （请求策略）高性能分页请求策略\r\n\r\n自动维护分页相关数据和状态，并提供了常用的分页数据操作能力，据官方介绍，可以让列表页流畅性提高 300%，编码难度降低 50%，以下是官方提供的示例，有兴趣的同学可以去看看。\r\n\r\n[分页列表示例]( https://alova.js.org/example/paginated-list)\r\n\r\n[下拉加载示例]( https://alova.js.org/example/load-more)\r\n\r\n## （请求策略）无感数据交互\r\n\r\n这个在我看来，这个无感数据交互请求策略可谓是一大创举，我把它理解为更加可靠的乐观更新，官网是这样解释的：\r\n\r\n> 无感数据交互是指用户在与应用进行交互时，无需等待即可立即展示相关内容，或者提交信息时也无需等待即可展示操作结果，就像和本地数据交互一样，从而大幅提升应用的流畅性，它让用户感知不到数据传输带来的卡顿。可以更高限度地降低网络波动带来的问题，你的应用在高延迟网络甚至是断网状态下依然可用。\r\n\r\n在我的体验过程中，即使在弱网状态下，也可以让我感受到一种毫无延迟带来的顺畅感，你也来感受下吧。\r\n\r\n![screenshots.gif]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6955a59f41c406483570481075568f5~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n据我了解，它使用以下技术：\r\n1. 持久化的请求队列来保证请求的安全性和串联性；\r\n2. 请求重试策略机制，来保证请求的顺利完成；\r\n3. 虚拟响应数据（一个创新的概念），来作为未响应时的数据占位，以便在响应后定位它并替换为实际数据。\r\n\r\n关于无感数据交互更具体的可以在[官网]( https://alova.js.org/strategy/sensorless-data-interaction/overview)了解哦\r\n\r\n## 数据预拉取\r\n\r\n通过拉取数据的方式预先加载好数据并缓存在本地，当真正用到这部分数据时就可以命中缓存并直接显示数据，这种方式也极大地提升了用户体验。\r\n\r\n# 写在最后\r\n\r\n总之，alova 作为一个新生代的请求工具，具有很大的潜力，你也想试用的话，可以点击以下链接去了解。\r\n\r\n[alova 官网]( https://alova.js.org/)\r\n\r\n[alova 的 Github 地址]( https://github.com/alovajs/alova)\r\n\r\n写作不易，看都看到这了，不如帮我点个免费的爱心吧！！！感谢你的喜欢", "content_rendered": "<p>axios 是一个基于 Promise 的 HTTP 客户端，每周的 npm 下载量 4000W+，如果回到在 10 年前，promise 式的请求工具是一个很大的创新，它解决了请求繁琐的问题，在那个性能要求不那么高的年代可谓是一骑绝尘。但随着时间的推移，Axios 在开发效率和性能方面开始有所落后，现在都已经是 2023 年了，面对日益复杂的需求，我们需要的是一款更具创新性和领先性的请求工具，而 promise 式的请求工具只能被称为<strong>传统</strong>了，如果你想保持在快速发展的前沿，那么请继续阅读。</p>\n<blockquote>\n<p>首先我想声明的是，我确实不是标题党，接下来我将通过暴露随着时间的推移，axios 在一些方面表现的力不从心，并推荐一个新的，相比 axios 更具现代化和创新性的请求工具给你，它就是 <a href=\"https://alova.js.org/\" rel=\"nofollow\">轻量级的请求策略库 alova</a></p>\n</blockquote>\n<h1>接下来我们看看 Promise 式请求工具的弱点（ axios ）</h1>\n<h2>1. 与 React 、Vue 等框架割裂</h2>\n<p>现在，React 、Vue 等前端 UI 框架对于前端来说几乎是不可缺少的，axios 无法和这些框架的状态深度绑定，需要开发者自行维护它们，导致开发效率较低。</p>\n<h2>2. 在性能方面毫无作为</h2>\n<p>2023 年了，相比 10 年前的应用已经复杂了不知几个数量级，在请求方面要求也越来越高，来保证页面性能的要求，axios 在这方面毫无作为，例如在频繁地重复请求、同时发起多个相同请求等场景。</p>\n<h2>3. 臃肿的体积</h2>\n<p>根据 bundlephobia 显示，axios 的体积在压缩状态下有 11+kb ，不信的话，<a href=\"https://bundlephobia.com/package/axios\" rel=\"nofollow\">你可以点此去查看</a></p>\n<h2>4. 响应数据的 Ts 类型定义混乱</h2>\n<p>在使用 axios 时，你可能经常会这样写：</p>\n<pre><code class=\"language-typescript\">// 创建一个 axios 实例\nconst inst = axios.create({\n  baseURL: 'https://example.com/'\n})\n\n// 在响应拦截器中返回 data\ninst.interceptors.response.use(response =&gt; {\n  if (response.status === 200) {\n    return response.data\n  }\n  throw new Error(response.status)\n})\n\ninterface Resp {\n  id: number\n}\ninst.get&lt;Resp&gt;('/xxx').then(result =&gt; {\n  // result 的类型总是为 axios.AxiosResponse&lt;Resp&gt;\n  data.data\n})\n</code></pre>\n<p>不知道是 axios 故意为之还是忽略了，以上的发起的 GET 请求中，响应数据<code>result</code>的类型总是<code>axios.AxiosResponse&lt;Resp&gt;</code>的，但其实我们在响应拦截器中已经将<code>response.data</code>返回了，这导致响应数据类型混乱而被困扰。</p>\n<h1>在 alova 中是如何解决的呢？</h1>\n<p>alova 作为一个更加现代化，更加适应复杂应用的请求方案，也给出了它更加优雅的解决方案。同时为了降低给的学习成本，也保持了和 axios 相似的 api 设计，看起来就很熟悉有木有。</p>\n<blockquote>\n<p>alova 读作“阿洛娃”，虽然和 axios 一样都是以 a 开头，以下两个名称需要注意区分哦！</p>\n</blockquote>\n<h2>与 UI 框架深度融合，自动管理请求相关数据</h2>\n<p>假设我们需要发起一个基本的数据获取请求，以 vue 为例，直接上对比代码。</p>\n<p><strong>axios</strong></p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div v-if=\"loading\"&gt;Loading...&lt;/div&gt;\n  &lt;div v-else-if=\"error\" class=\"error\"&gt;\n    {{ error.message }}\n  &lt;/div&gt;\n  &lt;div v-else&gt;{{ data }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport axios from 'axios';\nimport { ref, onMounted } from 'vue';\n\nconst loading = ref(false);\nconst error = ref(null);\nconst data = ref(null);\n\nconst requestData = () =&gt; {\n  loading.value = true;\n  axios.get('http://xxx/index').then(result =&gt; {\n    data.value = result;\n  }).catch(e =&gt; {\n    error.value = e;\n  }).finally(() =&gt; {\n    loading.value = false;\n  });\n}\nonMounted(requestData);\n&lt;/script&gt;\n</code></pre>\n<p><strong>alova</strong></p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div v-if=\"loading\"&gt;Loading...&lt;/div&gt;\n  &lt;div v-else-if=\"error\" class=\"error\"&gt;\n    {{ error.message }}\n  &lt;/div&gt;\n  &lt;div v-else&gt;{{ data }}&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { createAlova } from 'alova';\n\nconst pageData = createAlova({ baseURL: 'http://xxx' }).Get('/index');\nconst { loading, data, error } = useRequest(pageData);\n&lt;/script&gt;\n</code></pre>\n<p>在 axios 中需要自己创建对应的请求状态并自行维护，而 alova 却帮你接管了这项工作</p>\n<h2>开箱即用的高性能功能</h2>\n<p>传统 Promise 式的请求工具主要定位于通过 Promise 的方式简化请求，而提高性能可能是它们最不会考虑的一点，但作为请求策略库的 alova 中却着重突出这一点，在 alova 中默认开启了内存缓存和请求共享，这两项可以极大地提高请求性能，提升用户体验的同时还能降低服务端压力，让我们来一一了解下它们吧。</p>\n<p><strong>内存缓存</strong></p>\n<p>内存模式就是在请求响应后将响应数据保存在本地内存中，当下次再发起相同请求时就会使用缓存数据，而不会再次发送请求，试想一下，当你在实现一个列表页，点击列表项可以进入详情页查看数据，你会想到用户可能会频繁在列表中点击查看详情，当详情数据没有变化时，如果每一次进入详情页都要请求一次未免也太浪费了，而且每次还需要用户等待加载。在 alova 中你可以默认享受到这样的待遇，以下展示下效果</p>\n<p><img alt=\"screenshots.gif\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/310166bcba7845faa7b5cf8ee50437f6%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p><strong>请求共享</strong></p>\n<p>你可能遇到过这种情况，当一个请求发出但还未响应时，又发起了相同请求，就造成了请求浪费，或者重复提交问题，例如以下三种场景：</p>\n<ol>\n<li>一个组件在创建时会获取初始化数据，当一个页面同时渲染多个此组件时，将会同时发出多次相同请求；</li>\n<li>提交按钮未被禁用，用户点击了多次提交按钮；</li>\n<li>当预加载还未完成时进入了预加载页面，将会发起多次相同请求；</li>\n</ol>\n<p>共享请求就是用来解决这些问题的，它是通过复用请求的方式来实现的，由于这种案例无法直观展示，就不展示了，有兴趣的小伙伴可以自行体验体验。</p>\n<blockquote>\n<p>除此以外，自称是请求策略库的 alova 还提供了特定场景下的请求策略，我们将在下文中介绍，有兴趣的小伙伴请继续往下看。</p>\n</blockquote>\n<h2>轻量级的体积</h2>\n<p>压缩状态下的 alova 只有 4kb+，只有 axios 的 30%+，不信的话，<a href=\"https://bundlephobia.com/package/alova\" rel=\"nofollow\">你可以点此去查看</a></p>\n<h2>更加直观的响应数据 TS 类型</h2>\n<p>在 axios 中，你想要定义响应数据的类型真是会让人感到困惑，如果你是个 Typescript 的重度用户，alova 可以给你提供完整的类型体验，当你在请求处定义响应数据时的类型后，你可以在多处享受到它，会让你感觉很清晰，我们来看看。</p>\n<pre><code class=\"language-typescript\">interface Resp {\n  id: number\n}\nconst pageData = createAlova({ baseURL: 'http://xxx' }).Get&lt;Resp&gt;('/index');\nconst {\n  data,  // data 的类型为 Resp\n  loading, error, onSuccess, send\n} = useRequest(pageData);\nonSuccess(event =&gt; {\n  // 在成功回调中获取响应数据时，event.data 的值类型也是 Resp\n  console.log(event.data);\n});\n\nconst handleClick = async () =&gt; {\n  // send 函数可以手动再次发送请求，它将可以接收到响应数据，它的值类型还是 Resp\n  const data = await send();\n}\n</code></pre>\n<p>至此，相比传统的 Promise 式请求库，你可能已经初步了解了 alova 的厉害。</p>\n<p><strong>但... 它的特性还远不止于此！</strong></p>\n<h1>alova 的其他特性</h1>\n<h2>多 UI 框架同时支持</h2>\n<p>alova 同时支持 react 、vue 、svelte ，无论你使用哪种 UI 框架，它都能满足你。</p>\n<h2>与 axios 相似的 api 设计，用起来更简单熟悉</h2>\n<p>alova 的请求信息构造几乎和 axios 相同，我们来对比一下它们的 GET 和 POST 请求。</p>\n<p><strong>GET 请求</strong></p>\n<pre><code class=\"language-js\">// axios\naxios.get('/index', {\n  // 设置请求头\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  // params 参数\n  params: {\n    userId: 1\n  }\n});\n\n// alova\nconst todoListGetter = alovaInstance.Get('/index', {\n  // 设置请求头\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  // params 参数\n  params: {\n    userId: 1\n  }\n});\n</code></pre>\n<p><strong>POST 请求</strong></p>\n<pre><code class=\"language-js\">// axios\naxios.post('/login', {\n  username: 'xxx',\n  password: 'ppp'\n}, {\n  // 设置请求头\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  // params 参数\n  params: {\n    userId: 1\n  }\n});\n\n// alova\nconst loginPoster = alovaInstance.Post('/login', {\n  username: 'xxx',\n  password: 'ppp'\n}, {\n  // 设置请求头\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  // params 参数\n  params: {\n    userId: 1\n  }\n});\n</code></pre>\n<h2>（请求策略）高性能分页请求策略</h2>\n<p>自动维护分页相关数据和状态，并提供了常用的分页数据操作能力，据官方介绍，可以让列表页流畅性提高 300%，编码难度降低 50%，以下是官方提供的示例，有兴趣的同学可以去看看。</p>\n<p><a href=\"https://alova.js.org/example/paginated-list\" rel=\"nofollow\">分页列表示例</a></p>\n<p><a href=\"https://alova.js.org/example/load-more\" rel=\"nofollow\">下拉加载示例</a></p>\n<h2>（请求策略）无感数据交互</h2>\n<p>这个在我看来，这个无感数据交互请求策略可谓是一大创举，我把它理解为更加可靠的乐观更新，官网是这样解释的：</p>\n<blockquote>\n<p>无感数据交互是指用户在与应用进行交互时，无需等待即可立即展示相关内容，或者提交信息时也无需等待即可展示操作结果，就像和本地数据交互一样，从而大幅提升应用的流畅性，它让用户感知不到数据传输带来的卡顿。可以更高限度地降低网络波动带来的问题，你的应用在高延迟网络甚至是断网状态下依然可用。</p>\n</blockquote>\n<p>在我的体验过程中，即使在弱网状态下，也可以让我感受到一种毫无延迟带来的顺畅感，你也来感受下吧。</p>\n<p><img alt=\"screenshots.gif\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6955a59f41c406483570481075568f5%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>据我了解，它使用以下技术：</p>\n<ol>\n<li>持久化的请求队列来保证请求的安全性和串联性；</li>\n<li>请求重试策略机制，来保证请求的顺利完成；</li>\n<li>虚拟响应数据（一个创新的概念），来作为未响应时的数据占位，以便在响应后定位它并替换为实际数据。</li>\n</ol>\n<p>关于无感数据交互更具体的可以在<a href=\"https://alova.js.org/strategy/sensorless-data-interaction/overview\" rel=\"nofollow\">官网</a>了解哦</p>\n<h2>数据预拉取</h2>\n<p>通过拉取数据的方式预先加载好数据并缓存在本地，当真正用到这部分数据时就可以命中缓存并直接显示数据，这种方式也极大地提升了用户体验。</p>\n<h1>写在最后</h1>\n<p>总之，alova 作为一个新生代的请求工具，具有很大的潜力，你也想试用的话，可以点击以下链接去了解。</p>\n<p><a href=\"https://alova.js.org/\" rel=\"nofollow\">alova 官网</a></p>\n<p><a href=\"https://github.com/alovajs/alova\" rel=\"nofollow\">alova 的 Github 地址</a></p>\n<p>写作不易，看都看到这了，不如帮我点个免费的爱心吧！！！感谢你的喜欢</p>\n", "last_modified": 1686715626, "replies": 57, "id": 948621}]