[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6e27/13a6/557_large.png?m=1608969785", "name": "life", "avatar_normal": "https://cdn.v2ex.com/navatar/6e27/13a6/557_normal.png?m=1608969785", "title": "生活", "url": "https://www.v2ex.com/go/life", "topics": 4470, "footer": "", "header": "生活中的技术讨论", "title_alternative": "Life", "avatar_mini": "https://cdn.v2ex.com/navatar/6e27/13a6/557_mini.png?m=1608969785", "stars": 1142, "aliases": [], "root": false, "id": 557, "parent_node_name": ""}, "member": {"id": 471357, "username": "QingquanBaby", "url": "https://www.v2ex.com/u/QingquanBaby", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/7cfd/c818/471357_mini.png?m=1643205786", "avatar_normal": "https://cdn.v2ex.com/avatar/7cfd/c818/471357_normal.png?m=1643205786", "avatar_large": "https://cdn.v2ex.com/avatar/7cfd/c818/471357_large.png?m=1643205786", "created": 1582317725, "last_modified": 1643205786}, "last_reply_by": "azure2023us928", "last_touched": 1686677465, "title": "支付宝金选，亏了 30%", "url": "https://www.v2ex.com/t/948196", "created": 1686618415, "deleted": 0, "content": "疫情之后有段时间涨，还挣了一点\r\n自从入了支付宝金选的最近两三年一直跌\r\n心酸，也不舍得割，现在就放那自生自灭了\r\n但是未来几年的形势，焦虑啊\r\n不懂就问，忍痛割了还是放那等回本呢", "content_rendered": "疫情之后有段时间涨，还挣了一点<br />自从入了支付宝金选的最近两三年一直跌<br />心酸，也不舍得割，现在就放那自生自灭了<br />但是未来几年的形势，焦虑啊<br />不懂就问，忍痛割了还是放那等回本呢", "last_modified": 1686618415, "replies": 171, "id": 948196}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1677911181", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1677911181", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 56556, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1677911181", "stars": 8422, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 5055, "username": "sdjl", "url": "https://www.v2ex.com/u/sdjl", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "贵州安顺", "tagline": "37岁重新做个程序员", "bio": "9年前，我从北京回贵州老家了，就不怎么写代码了（写得很少）。\r\n\r\n现在，我打算重新学习新的编程知识，更新我的工具箱，重新成为程序员！\r\n\r\n现在已经37岁了，也许我会写到60岁，谁知道呢~", "avatar_mini": "https://cdn.v2ex.com/avatar/be6a/d876/5055_mini.png?m=1677142026", "avatar_normal": "https://cdn.v2ex.com/avatar/be6a/d876/5055_normal.png?m=1677142026", "avatar_large": "https://cdn.v2ex.com/avatar/be6a/d876/5055_large.png?m=1677142026", "created": 1294652197, "last_modified": 1677142026}, "last_reply_by": "dayeye2006199", "last_touched": 1686677108, "title": "你们不觉得产品经理这活，应该由程序员自己亲自干吗？", "url": "https://www.v2ex.com/t/948294", "created": 1686632199, "deleted": 0, "content": "### 现实情况\r\n1. 产品经理做好原型图 -> 设计师画出高保真设计图 -> 程序员说“这不合理”\r\n2. 通过团队合作，产品经理看似加快了项目进度，但后期许多本可以避免的沟通又消耗了大量的时间\r\n\r\n是不是？对不对？合不合？\r\n\r\n\r\n程序员就应该自己去画原型图啊！\r\n\r\n我觉得合理的模式是：\r\n\r\n1. 程序员去理解业务需求，在理解业务的时候就能构思出解决方案、数据库设计、原型设计\r\n2. 在设计原型图时，程序员就知道能不能实现，实现难度有多高，怎么实现\r\n3. 程序员画出原型图，交给设计师画出高保真设计图\r\n4. 程序员拿着自己的产品，自己写，避免了大量的没必要的沟通\r\n\r\n所以，我认为产品经理和程序员，应该就是同一个人或同一个团队！\r\n\r\n### 什么？程序员只会写程序不会做产品？\r\n1. 有些人觉得，产品有产品的丰富经验，程序员不一定会做产品\r\n2. 瞎说，都会写程序了，还不会做产品？\r\n3. 做产品需要丰富的经验啊，要懂心理学，要懂消费行为学，程序员懂吗？\r\n4. 瞎说，我都会写程序了，我还不懂这点心理学和消费行为学？\r\n5. 做产品要会用产品经理的工具啊，这么多工具你学过吗？\r\n6. 瞎说，我直接写代码就好了，你那个工具不就是你不会写代码才学的么", "content_rendered": "<h3>现实情况</h3>\n<ol>\n<li>产品经理做好原型图 -&gt; 设计师画出高保真设计图 -&gt; 程序员说“这不合理”</li>\n<li>通过团队合作，产品经理看似加快了项目进度，但后期许多本可以避免的沟通又消耗了大量的时间</li>\n</ol>\n<p>是不是？对不对？合不合？</p>\n<p>程序员就应该自己去画原型图啊！</p>\n<p>我觉得合理的模式是：</p>\n<ol>\n<li>程序员去理解业务需求，在理解业务的时候就能构思出解决方案、数据库设计、原型设计</li>\n<li>在设计原型图时，程序员就知道能不能实现，实现难度有多高，怎么实现</li>\n<li>程序员画出原型图，交给设计师画出高保真设计图</li>\n<li>程序员拿着自己的产品，自己写，避免了大量的没必要的沟通</li>\n</ol>\n<p>所以，我认为产品经理和程序员，应该就是同一个人或同一个团队！</p>\n<h3>什么？程序员只会写程序不会做产品？</h3>\n<ol>\n<li>有些人觉得，产品有产品的丰富经验，程序员不一定会做产品</li>\n<li>瞎说，都会写程序了，还不会做产品？</li>\n<li>做产品需要丰富的经验啊，要懂心理学，要懂消费行为学，程序员懂吗？</li>\n<li>瞎说，我都会写程序了，我还不懂这点心理学和消费行为学？</li>\n<li>做产品要会用产品经理的工具啊，这么多工具你学过吗？</li>\n<li>瞎说，我直接写代码就好了，你那个工具不就是你不会写代码才学的么</li>\n</ol>\n", "last_modified": 1686632199, "replies": 170, "id": 948294}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 205003, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3833, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 541267, "username": "xwayway", "url": "https://www.v2ex.com/u/xwayway", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/gravatar/eebbfba0aa7ed95ea7e6cabac96872ab?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/eebbfba0aa7ed95ea7e6cabac96872ab?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/eebbfba0aa7ed95ea7e6cabac96872ab?s=73&d=retro", "created": 1617687725, "last_modified": 1681442696}, "last_reply_by": "zhangchongjie", "last_touched": 1686679538, "title": "618 了想要买把椅子，求推荐或者避坑", "url": "https://www.v2ex.com/t/948185", "created": 1686616642, "deleted": 0, "content": "长年腰突患者，中午不敢趴着睡觉，必须躺一会儿，不然下午没法坐。\r\n以前一直舍不得买把椅子，最主要是没找到合适的。\r\n试坐过同事的一些椅子，要不是腰托太顶，要不是腰部悬空。\r\n我对椅子的要求如下。\r\n1. 至少得有个头枕吧，中午休息用，腿托，暂时可以放弃，有肯定更好；\r\n2. 以为平时办公基本都是稍微有点前倾（聚精会神调 bug 的时候更明显）或者端坐姿势，所以要求腰撑能够满足这两个姿势；\r\n3. 其实我个人感觉，一把好的椅子，腰部其实更多应该是一个托着的状态，而不是顶着，应该顶着的反而应该是骶骨，但是试过很多椅子，感觉很多椅子都没有低估的支撑；\r\n4. 有自适应底盘更好，当然这属于锦上添花，对应的价格肯定更贵。\r\n预算的话最多 3000 左右，应该是我觉得我能负担的极限了。", "content_rendered": "长年腰突患者，中午不敢趴着睡觉，必须躺一会儿，不然下午没法坐。<br />以前一直舍不得买把椅子，最主要是没找到合适的。<br />试坐过同事的一些椅子，要不是腰托太顶，要不是腰部悬空。<br />我对椅子的要求如下。<br />1. 至少得有个头枕吧，中午休息用，腿托，暂时可以放弃，有肯定更好；<br />2. 以为平时办公基本都是稍微有点前倾（聚精会神调 bug 的时候更明显）或者端坐姿势，所以要求腰撑能够满足这两个姿势；<br />3. 其实我个人感觉，一把好的椅子，腰部其实更多应该是一个托着的状态，而不是顶着，应该顶着的反而应该是骶骨，但是试过很多椅子，感觉很多椅子都没有低估的支撑；<br />4. 有自适应底盘更好，当然这属于锦上添花，对应的价格肯定更贵。<br />预算的话最多 3000 左右，应该是我觉得我能负担的极限了。", "last_modified": 1686616642, "replies": 97, "id": 948185}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1677911181", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1677911181", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 56556, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1677911181", "stars": 8422, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 523700, "username": "JustW", "url": "https://www.v2ex.com/u/JustW", "website": "https://www.wangwangit.com", "twitter": null, "psn": null, "github": null, "btc": null, "location": "", "tagline": "", "bio": "职场小菜鸟\r\n互联网摸鱼大师\r\nAI爱好者\r\n热爱分享的路人", "avatar_mini": "https://cdn.v2ex.com/avatar/34d9/1ade/523700_mini.png?m=1682119564", "avatar_normal": "https://cdn.v2ex.com/avatar/34d9/1ade/523700_normal.png?m=1682119564", "avatar_large": "https://cdn.v2ex.com/avatar/34d9/1ade/523700_large.png?m=1682119564", "avatar_xlarge": "https://cdn.v2ex.com/avatar/34d9/1ade/523700_xlarge.png?m=1682119564", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/34d9/1ade/523700_xlarge.png?m=1682119564", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/34d9/1ade/523700_xlarge.png?m=1682119564", "created": 1607924325, "last_modified": 1682119564}, "last_reply_by": "liberty1900", "last_touched": 1686685594, "title": "Git 奇幻之旅⌛️", "url": "https://www.v2ex.com/t/948186", "created": 1686616931, "deleted": 0, "content": "## 第一天: 本地仓库\r\n\r\n故事的主角是小明，一个刚入门编程的小白。他正在为一个项目写代码，但是他发现每次修改代码都很麻烦，因为他要不断地备份文件，而且很容易弄混版本。有一天，他听说了一个叫 Git 的神奇工具，可以帮助他管理代码的变化。他决定尝试一下，于是他打开了终端，输入了下面的命令：\r\n\r\n```sh\r\ngit init # 初始化一个本地仓库\r\ngit add . # 添加所有文件到暂存区\r\ngit commit -m \"first commit\" # 提交第一次修改到本地仓库\r\n```\r\n\r\n这样，他就成功地创建了一个 Git 仓库，并且保存了他的第一个版本。他觉得很开心，因为这样他就不用担心代码丢失或者混乱了。😁\r\n\r\n## 第二天: 远程仓库\r\n\r\n小明觉得自己的代码写得很不错，想要分享给其他人看看。但是他发现把文件发给别人很麻烦，而且如果别人也修改了代码，就很难合并。有一天，他听说了一个叫 GitHub 的网站，可以免费托管 Git 仓库，并且方便和其他人协作。他决定尝试一下，于是他注册了一个 GitHub 账号，并且在网站上创建了一个空的仓库。\r\n\r\n然后，他在终端输入了下面的命令：\r\n\r\n```sh\r\ngit remote add origin https://github.com/xiaoming/myproject.git # 添加远程仓库地址\r\ngit push -u origin master # 推送本地 master 分支到远程仓库\r\n```\r\n\r\n这样，他就成功地把自己的代码上传到了 GitHub 上，并且和远程仓库建立了联系。他觉得很兴奋，因为这样他就可以和全世界的程序员交流了。😍\r\n\r\n## 第三天: 分支管理\r\n\r\n小明在 GitHub 上发现了一个很有趣的开源项目，想要参与其中。但是他不想直接修改别人的代码，而是想先在自己的电脑上做一些改进，然后再提交给项目的作者。有一天，他听说了一个叫分支的概念，可以让他在不影响主线的情况下，创建自己的代码版本。他决定尝试一下，于是他在终端输入了下面的命令：\r\n\r\n```sh\r\ngit clone https://github.com/someone/awesome-project.git # 从远程仓库克隆项目到本地\r\ncd awesome-project # 进入项目目录\r\ngit checkout -b dev # 创建并切换到 dev 分支\r\n```\r\n\r\n这样，他就成功地在本地创建了一个 dev 分支，并且和远程仓库的 master 分支分开了。他觉得很自由，因为这样他就可以随心所欲地修改代码了。😎\r\n\r\n## 第四天: 合并与冲突\r\n\r\n小明在 dev 分支上修改了一些代码，觉得很满意，想要把自己的改进合并到 master 分支上，然后推送到远程仓库，让项目的作者看看。有一天，他听说了一个叫合并的操作，可以把两个分支的代码合并成一个。他决定尝试一下，于是他在终端输入了下面的命令：\r\n\r\n```sh\r\ngit checkout master # 切换到 master 分支\r\ngit merge dev # 合并 dev 分支到 master 分支\r\ngit push origin master # 推送 master 分支到远程仓库\r\n```\r\n\r\n这样，他就成功地把自己的代码合并到了 master 分支，并且推送到了远程仓库。他觉得很骄傲，因为这样他就可以为开源项目做出贡献了。😊\r\n\r\n但是，有时候合并分支并不是一帆风顺的。有一次，小明在 dev 分支上修改了一个文件，而项目的作者也在 master 分支上修改了同一个文件，并且先于小明推送到了远程仓库。当小明想要合并分支时，就发生了冲突。有一天，他听说了一个叫解决冲突的方法，可以手动选择保留哪些代码。他决定尝试一下，于是他在终端输入了下面的命令：\r\n\r\n```sh\r\ngit pull origin master # 拉取远程仓库的 master 分支\r\ngit merge master # 合并 master 分支到 dev 分支\r\n# 打开冲突文件，编辑保存\r\ngit add . # 添加所有文件到暂存区\r\ngit commit -m \"fix conflict\" # 提交修改到本地仓库\r\ngit push origin dev # 推送 dev 分支到远程仓库\r\n```\r\n\r\n这样，他就成功地解决了冲突，并且把自己的代码推送到了远程仓库。他觉得很成就感，因为这样他就可以和其他人协作了。😄\r\n\r\n## 第五天: 标签管理与忽略文件\r\n\r\n小明在 dev 分支上开发了一个新功能，觉得很完美，想要给这个版本打一个标签，方便以后查找。有一天，他听说了一个叫标签的概念，可以给某个版本起一个有意义的名字。他决定尝试一下，于是他在终端输入了下面的命令：\r\n\r\n```sh\r\ngit tag v1.0 # 给当前版本打一个 v1.0 的标签\r\ngit push origin v1.0 # 推送标签到远程仓库\r\n```\r\n\r\n这样，他就成功地给自己的代码打了一个标签，并且推送到了远程仓库。他觉得很方便，因为这样他就可以快速定位到某个版本了。😎\r\n\r\n但是，有时候有些文件是不需要被 Git 管理的，比如编译生成的临时文件，或者敏感信息的配置文件。有一天，他听说了一个叫忽略特殊文件的方法，可以让 Git 自动忽略掉这些文件。他决定尝试一下，于是他在项目根目录下创建了一个.gitignore 文件，并且写入了下面的内容：\r\n\r\n```sh\r\n*.tmp # 忽略所有.tmp 后缀的文件\r\nconfig.ini # 忽略 config.ini 文件\r\n```\r\n\r\n这样，他就成功地让 Git 忽略掉了这些特殊文件，并且不会被提交到仓库中。他觉得很安全，因为这样他就可以避免泄露隐私或者浪费空间了。😊\r\n\r\n## 第六天: 大小写敏感\r\n\r\n小明和小红是一个团队的成员，他们都在 GitHub 上为同一个开源项目贡献代码。有一天，小明在本地修改了一个文件的名字，把它从 README.md 改成了 Readme.md ，然后提交并推送到了远程仓库。小红在自己的电脑上拉取了最新的代码，但是她发现自己的文件名还是 README.md ，而且 Git 提示她有一个未合并的文件。她很困惑，不知道为什么会出现这样的情况。\r\n\r\n原来，这是因为 Git 在不同的操作系统上对文件名大小写的敏感度不同。在 Linux 和 Mac OS X 上，Git 是区分大小写的，所以 README.md 和 Readme.md 是两个不同的文件。但是在 Windows 上，Git 是不区分大小写的，所以 README.md 和 Readme.md 是同一个文件。当小明把文件名改成了 Readme.md 时，Git 认为他删除了 README.md ，并且创建了一个新的文件 Readme.md 。当小红拉取代码时，Git 认为她需要合并这两个文件，所以出现了冲突。\r\n\r\n有一天，他们听说了一个叫解决大小写不一致导致的合并冲突的方法，可以让 Git 在 Windows 上也区分大小写。他们决定尝试一下，于是他们在终端输入了下面的命令：\r\n\r\n```sh\r\ngit config core.ignorecase false # 设置 Git 在 Windows 上也区分大小写\r\ngit mv README.md Readme.md # 重命名文件\r\ngit commit -m \"rename file\" # 提交修改\r\ngit push origin master # 推送到远程仓库\r\n```\r\n\r\n这样，他们就成功地解决了大小写不一致导致的合并冲突，并且保持了文件名的一致性。他们觉得很开心，因为这样他们就可以避免以后出现同样的问题了。😁\r\n\r\n## 第七天: 撤销错误提交与恢复误删文件\r\n\r\n小明和小红在开发一个新功能时，不小心提交了一些错误的代码，导致项目无法运行。他们想要撤销这些提交，但是又不想丢失他们的修改。有一天，他们听说了一个叫 reset 的命令，可以让他们回退到某个版本，但是保留他们的修改。他们决定尝试一下，于是他们在终端输入了下面的命令：\r\n\r\n```sh\r\ngit reset HEAD~2 # 回退到两个版本之前，保留修改\r\ngit status # 查看修改的状态\r\ngit add . # 重新添加修改到暂存区\r\ngit commit -m \"fix bug\" # 重新提交修改\r\ngit push -f origin master # 强制推送到远程仓库\r\n```\r\n\r\n这样，他们就成功地撤销了错误的提交，并且重新提交了正确的代码。他们觉得很轻松，因为这样他们就可以修复 bug 了。😊\r\n\r\n但是，有时候 reset 命令也会带来麻烦。有一次，小明在回退版本时，不小心加了一个–hard 选项，导致他的修改全部丢失了。他很慌张，不知道如何找回他的修改。有一天，他听说了一个叫 reflog 的命令，可以让他查看所有的提交历史，包括已经被删除或者回退的提交。他决定尝试一下，于是他在终端输入了下面的命令：\r\n\r\n```sh\r\ngit reflog # 查看所有的提交历史\r\ngit reset --hard c761f5c # 回退到指定的版本\r\ngit status # 查看修改的状态\r\n```\r\n\r\n这样，他就成功地找回了他丢失的修改，并且恢复到了正确的版本。他觉得很幸运，因为这样他就可以继续开发了。😄\r\n\r\n## 第八天: 多人协作与冲突处理\r\n\r\n小明和小红在同一个分支上开发一个新功能，他们经常需要拉取对方的代码，然后合并到自己的代码中。有一天，他们听说了一个叫 pull 的命令，可以让他们一步完成拉取和合并的操作。他们决定尝试一下，于是他们在终端输入了下面的命令：\r\n\r\n```sh\r\ngit pull origin master # 拉取并合并远程仓库的 master 分支\r\n```\r\n\r\n这样，他们就成功地把对方的代码合并到了自己的代码中，并且保持了同步。他们觉得很方便，因为这样他们就可以避免手动合并的麻烦了。😎\r\n\r\n但是，有时候 pull 命令也会带来问题。有一次，小明和小红在同一个文件上修改了同一行代码，导致出现了冲突。他们很困惑，不知道如何解决这个冲突。有一天，他们听说了一个叫解决冲突的方法，可以让他们手动选择保留哪些代码。他们决定尝试一下，于是他们在终端输入了下面的命令：\r\n\r\n```sh\r\ngit pull origin master # 拉取并合并远程仓库的 master 分支\r\n# 打开冲突文件，编辑保存\r\ngit add . # 添加所有文件到暂存区\r\ngit commit -m \"merge conflict\" # 提交修改到本地仓库\r\ngit push origin master # 推送到远程仓库\r\n```\r\n\r\n这样，他们就成功地解决了冲突，并且把自己的代码推送到了远程仓库。他们觉得很成就感，因为这样他们就可以和对方协作了。😄\r\n\r\n## 第九天: rebase 和 merge 的区别\r\n\r\n小明和小红在同一个项目上开发不同的功能，他们分别在自己的分支上提交了一些代码。有一天，他们想要把自己的代码合并到主分支上，但是他们不知道应该用 rebase 还是 merge 。有一天，他们听说了一个叫 rebase 和 merge 的区别的概念，可以让他们选择合适的方式来合并代码。他们决定尝试一下，于是他们在终端输入了下面的命令：\r\n\r\n```sh\r\n# 小明在 dev1 分支上\r\ngit checkout dev1 # 切换到 dev1 分支\r\ngit rebase master # 把 dev1 分支变基到 master 分支\r\ngit push -f origin dev1 # 强制推送 dev1 分支到远程仓库\r\ngit checkout master # 切换到 master 分支\r\ngit merge dev1 # 合并 dev1 分支到 master 分支\r\ngit push origin master # 推送 master 分支到远程仓库\r\n\r\n# 小红在 dev2 分支上\r\ngit checkout dev2 # 切换到 dev2 分支\r\ngit merge master # 合并 master 分支到 dev2 分支\r\ngit push origin dev2 # 推送 dev2 分支到远程仓库\r\ngit checkout master # 切换到 master 分支\r\ngit merge dev2 # 合并 dev2 分支到 master 分支\r\ngit push origin master # 推送 master 分支到远程仓库\r\n\r\n```\r\n\r\n这样，他们就成功地把自己的代码合并到了主分支上，但是他们发现了一个不同的地方。小明用了 rebase 命令，他的提交历史是一条直线，没有任何分叉；小红用了 merge 命令，她的提交历史是有多个分叉和汇合的结构。他们觉得很好奇，不知道这两种方式有什么优缺点。\r\n\r\n原来，rebase 和 merge 的区别是：\r\n\r\n- rebase 是把自己的分支变基到目标分支上，也就是把自己的提交历史放在目标分支的最后，这样可以保持提交历史的整洁和线性。\r\n- merge 是把目标分支合并到自己的分支上，也就是把目标分支的提交历史和自己的提交历史合并成一个新的提交，这样可以保持提交历史的完整和真实。\r\n\r\nrebase 和 merge 各有优缺点：\r\n\r\n- rebase 的优点是可以让提交历史看起来很简洁，方便查看和管理；缺点是会改变提交历史，可能导致冲突或者丢失信息。\r\n- merge 的优点是可以保留提交历史的原貌，方便追溯和恢复；缺点是会让提交历史看起来很复杂，不容易理解和维护。\r\n\r\n所以，在选择 rebase 还是 merge 时，要根据具体的情况和需求来决定。一般来说：\r\n\r\n- 如果你想要保持一个干净和线性的提交历史，你可以用 rebase ；\r\n- 如果你想要保留一个完整和真实的提交历史，你可以用 merge ；\r\n- 如果你想要在公共的分支上合作，你应该用 merge ，避免用 rebase ，因为 rebase 会改变提交历史，可能导致其他人的困扰；\r\n- 如果你想要在私有的分支上开发，你可以用 rebase ，因为 rebase 可以让你的提交历史更清晰，方便你自己管理。\r\n\r\n## 第十天: 撤销错误合并和恢复误删的分支\r\n\r\n小明和小红在合并分支时，不小心合并了错误的分支，导致项目出现了很多 bug 。他们想要撤销这次合并，但是又不想丢失他们的修改。有一天，他们听说了一个叫 revert 的命令，可以让他们用一次新的提交来回滚之前的提交。他们决定尝试一下，于是他们在终端输入了下面的命令：\r\n\r\n```sh\r\ngit log # 查看提交历史\r\ngit revert <commit ID> # 回滚指定的提交\r\ngit push origin master # 推送到远程仓库\r\n```\r\n\r\n这样，他们就成功地撤销了错误的合并，并且用一次新的提交来记录这次回滚。他们觉得很安全，因为这样他们就不会丢失任何修改了。😊\r\n\r\n但是，有时候 revert 命令也会带来麻烦。有一次，小明在回滚一个合并时，不小心加了一个–no-commit 选项，导致他的修改没有被提交，而是被放在了暂存区。他很慌张，不知道如何恢复这次回滚。有一天，他听说了一个叫 reset 的命令，可以让他回退到某个版本，并且保留或者丢弃他的修改。他决定尝试一下，于是他在终端输入了下面的命令：\r\n\r\n```sh\r\ngit reset --soft HEAD^ # 回退到上一个版本，并且保留修改\r\ngit status # 查看修改的状态\r\ngit add . # 重新添加修改到暂存区\r\ngit commit -m \"fix bug\" # 重新提交修改\r\ngit push -f origin master # 强制推送到远程仓库\r\n```\r\n\r\n这样，他就成功地恢复了这次回滚，并且重新提交了正确的代码。他觉得很轻松，因为这样他就可以修复 bug 了。😊\r\n\r\n## 第十一天: 删除和恢复分支\r\n\r\n小明和小红在完成一个功能后，想要删除自己的分支，因为他们觉得这个分支已经没有用了。有一天，他们听说了一个叫 delete 的命令，可以让他们删除本地或者远程的分支。他们决定尝试一下，于是他们在终端输入了下面的命令：\r\n\r\n```sh\r\ngit branch -d dev1 # 删除本地的 dev1 分支\r\ngit push origin --delete dev1 # 删除远程的 dev1 分支\r\n```\r\n\r\n这样，他们就成功地删除了自己的分支，并且释放了一些空间。他们觉得很爽快，因为这样他们就可以开始新的功能了。😎\r\n\r\n但是，有时候 delete 命令也会带来后悔。有一次，小明在删除一个分支后，发现自己还需要这个分支上的一些代码。他很懊恼，不知道如何找回这个分支。有一天，他听说了一个叫 reflog 的命令，可以让他查看所有的提交历史，包括已经被删除或者回退的提交。他决定尝试一下，于是他在终端输入了下面的命令：\r\n\r\n```sh\r\ngit reflog # 查看所有的提交历史\r\ngit checkout -b dev1 <commit ID> # 用指定的提交创建一个新的 dev1 分支\r\ngit push origin dev1 # 推送 dev1 分支到远程仓库\r\n```\r\n\r\n这样，他就成功地找回了自己的分支，并且恢复到了正确的版本。他觉得很幸运，因为这样他就可以继续使用这个分支了。😄\r\n\r\n## 最后\r\n\r\n到此为止，我已经给你讲完了小明和小红的故事，你觉得怎么样？👏", "content_rendered": "<h2>第一天: 本地仓库</h2>\n<p>故事的主角是小明，一个刚入门编程的小白。他正在为一个项目写代码，但是他发现每次修改代码都很麻烦，因为他要不断地备份文件，而且很容易弄混版本。有一天，他听说了一个叫 Git 的神奇工具，可以帮助他管理代码的变化。他决定尝试一下，于是他打开了终端，输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git init # 初始化一个本地仓库\ngit add . # 添加所有文件到暂存区\ngit commit -m \"first commit\" # 提交第一次修改到本地仓库\n</code></pre>\n<p>这样，他就成功地创建了一个 Git 仓库，并且保存了他的第一个版本。他觉得很开心，因为这样他就不用担心代码丢失或者混乱了。😁</p>\n<h2>第二天: 远程仓库</h2>\n<p>小明觉得自己的代码写得很不错，想要分享给其他人看看。但是他发现把文件发给别人很麻烦，而且如果别人也修改了代码，就很难合并。有一天，他听说了一个叫 GitHub 的网站，可以免费托管 Git 仓库，并且方便和其他人协作。他决定尝试一下，于是他注册了一个 GitHub 账号，并且在网站上创建了一个空的仓库。</p>\n<p>然后，他在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git remote add origin https://github.com/xiaoming/myproject.git # 添加远程仓库地址\ngit push -u origin master # 推送本地 master 分支到远程仓库\n</code></pre>\n<p>这样，他就成功地把自己的代码上传到了 GitHub 上，并且和远程仓库建立了联系。他觉得很兴奋，因为这样他就可以和全世界的程序员交流了。😍</p>\n<h2>第三天: 分支管理</h2>\n<p>小明在 GitHub 上发现了一个很有趣的开源项目，想要参与其中。但是他不想直接修改别人的代码，而是想先在自己的电脑上做一些改进，然后再提交给项目的作者。有一天，他听说了一个叫分支的概念，可以让他在不影响主线的情况下，创建自己的代码版本。他决定尝试一下，于是他在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git clone https://github.com/someone/awesome-project.git # 从远程仓库克隆项目到本地\ncd awesome-project # 进入项目目录\ngit checkout -b dev # 创建并切换到 dev 分支\n</code></pre>\n<p>这样，他就成功地在本地创建了一个 dev 分支，并且和远程仓库的 master 分支分开了。他觉得很自由，因为这样他就可以随心所欲地修改代码了。😎</p>\n<h2>第四天: 合并与冲突</h2>\n<p>小明在 dev 分支上修改了一些代码，觉得很满意，想要把自己的改进合并到 master 分支上，然后推送到远程仓库，让项目的作者看看。有一天，他听说了一个叫合并的操作，可以把两个分支的代码合并成一个。他决定尝试一下，于是他在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git checkout master # 切换到 master 分支\ngit merge dev # 合并 dev 分支到 master 分支\ngit push origin master # 推送 master 分支到远程仓库\n</code></pre>\n<p>这样，他就成功地把自己的代码合并到了 master 分支，并且推送到了远程仓库。他觉得很骄傲，因为这样他就可以为开源项目做出贡献了。😊</p>\n<p>但是，有时候合并分支并不是一帆风顺的。有一次，小明在 dev 分支上修改了一个文件，而项目的作者也在 master 分支上修改了同一个文件，并且先于小明推送到了远程仓库。当小明想要合并分支时，就发生了冲突。有一天，他听说了一个叫解决冲突的方法，可以手动选择保留哪些代码。他决定尝试一下，于是他在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git pull origin master # 拉取远程仓库的 master 分支\ngit merge master # 合并 master 分支到 dev 分支\n# 打开冲突文件，编辑保存\ngit add . # 添加所有文件到暂存区\ngit commit -m \"fix conflict\" # 提交修改到本地仓库\ngit push origin dev # 推送 dev 分支到远程仓库\n</code></pre>\n<p>这样，他就成功地解决了冲突，并且把自己的代码推送到了远程仓库。他觉得很成就感，因为这样他就可以和其他人协作了。😄</p>\n<h2>第五天: 标签管理与忽略文件</h2>\n<p>小明在 dev 分支上开发了一个新功能，觉得很完美，想要给这个版本打一个标签，方便以后查找。有一天，他听说了一个叫标签的概念，可以给某个版本起一个有意义的名字。他决定尝试一下，于是他在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git tag v1.0 # 给当前版本打一个 v1.0 的标签\ngit push origin v1.0 # 推送标签到远程仓库\n</code></pre>\n<p>这样，他就成功地给自己的代码打了一个标签，并且推送到了远程仓库。他觉得很方便，因为这样他就可以快速定位到某个版本了。😎</p>\n<p>但是，有时候有些文件是不需要被 Git 管理的，比如编译生成的临时文件，或者敏感信息的配置文件。有一天，他听说了一个叫忽略特殊文件的方法，可以让 Git 自动忽略掉这些文件。他决定尝试一下，于是他在项目根目录下创建了一个.gitignore 文件，并且写入了下面的内容：</p>\n<pre><code class=\"language-sh\">*.tmp # 忽略所有.tmp 后缀的文件\nconfig.ini # 忽略 config.ini 文件\n</code></pre>\n<p>这样，他就成功地让 Git 忽略掉了这些特殊文件，并且不会被提交到仓库中。他觉得很安全，因为这样他就可以避免泄露隐私或者浪费空间了。😊</p>\n<h2>第六天: 大小写敏感</h2>\n<p>小明和小红是一个团队的成员，他们都在 GitHub 上为同一个开源项目贡献代码。有一天，小明在本地修改了一个文件的名字，把它从 <a href=\"http://README.md\" rel=\"nofollow\">README.md</a> 改成了 <a href=\"http://Readme.md\" rel=\"nofollow\">Readme.md</a> ，然后提交并推送到了远程仓库。小红在自己的电脑上拉取了最新的代码，但是她发现自己的文件名还是 <a href=\"http://README.md\" rel=\"nofollow\">README.md</a> ，而且 Git 提示她有一个未合并的文件。她很困惑，不知道为什么会出现这样的情况。</p>\n<p>原来，这是因为 Git 在不同的操作系统上对文件名大小写的敏感度不同。在 Linux 和 Mac OS X 上，Git 是区分大小写的，所以 <a href=\"http://README.md\" rel=\"nofollow\">README.md</a> 和 <a href=\"http://Readme.md\" rel=\"nofollow\">Readme.md</a> 是两个不同的文件。但是在 Windows 上，Git 是不区分大小写的，所以 <a href=\"http://README.md\" rel=\"nofollow\">README.md</a> 和 <a href=\"http://Readme.md\" rel=\"nofollow\">Readme.md</a> 是同一个文件。当小明把文件名改成了 <a href=\"http://Readme.md\" rel=\"nofollow\">Readme.md</a> 时，Git 认为他删除了 <a href=\"http://README.md\" rel=\"nofollow\">README.md</a> ，并且创建了一个新的文件 <a href=\"http://Readme.md\" rel=\"nofollow\">Readme.md</a> 。当小红拉取代码时，Git 认为她需要合并这两个文件，所以出现了冲突。</p>\n<p>有一天，他们听说了一个叫解决大小写不一致导致的合并冲突的方法，可以让 Git 在 Windows 上也区分大小写。他们决定尝试一下，于是他们在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git config core.ignorecase false # 设置 Git 在 Windows 上也区分大小写\ngit mv README.md Readme.md # 重命名文件\ngit commit -m \"rename file\" # 提交修改\ngit push origin master # 推送到远程仓库\n</code></pre>\n<p>这样，他们就成功地解决了大小写不一致导致的合并冲突，并且保持了文件名的一致性。他们觉得很开心，因为这样他们就可以避免以后出现同样的问题了。😁</p>\n<h2>第七天: 撤销错误提交与恢复误删文件</h2>\n<p>小明和小红在开发一个新功能时，不小心提交了一些错误的代码，导致项目无法运行。他们想要撤销这些提交，但是又不想丢失他们的修改。有一天，他们听说了一个叫 reset 的命令，可以让他们回退到某个版本，但是保留他们的修改。他们决定尝试一下，于是他们在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git reset HEAD~2 # 回退到两个版本之前，保留修改\ngit status # 查看修改的状态\ngit add . # 重新添加修改到暂存区\ngit commit -m \"fix bug\" # 重新提交修改\ngit push -f origin master # 强制推送到远程仓库\n</code></pre>\n<p>这样，他们就成功地撤销了错误的提交，并且重新提交了正确的代码。他们觉得很轻松，因为这样他们就可以修复 bug 了。😊</p>\n<p>但是，有时候 reset 命令也会带来麻烦。有一次，小明在回退版本时，不小心加了一个–hard 选项，导致他的修改全部丢失了。他很慌张，不知道如何找回他的修改。有一天，他听说了一个叫 reflog 的命令，可以让他查看所有的提交历史，包括已经被删除或者回退的提交。他决定尝试一下，于是他在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git reflog # 查看所有的提交历史\ngit reset --hard c761f5c # 回退到指定的版本\ngit status # 查看修改的状态\n</code></pre>\n<p>这样，他就成功地找回了他丢失的修改，并且恢复到了正确的版本。他觉得很幸运，因为这样他就可以继续开发了。😄</p>\n<h2>第八天: 多人协作与冲突处理</h2>\n<p>小明和小红在同一个分支上开发一个新功能，他们经常需要拉取对方的代码，然后合并到自己的代码中。有一天，他们听说了一个叫 pull 的命令，可以让他们一步完成拉取和合并的操作。他们决定尝试一下，于是他们在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git pull origin master # 拉取并合并远程仓库的 master 分支\n</code></pre>\n<p>这样，他们就成功地把对方的代码合并到了自己的代码中，并且保持了同步。他们觉得很方便，因为这样他们就可以避免手动合并的麻烦了。😎</p>\n<p>但是，有时候 pull 命令也会带来问题。有一次，小明和小红在同一个文件上修改了同一行代码，导致出现了冲突。他们很困惑，不知道如何解决这个冲突。有一天，他们听说了一个叫解决冲突的方法，可以让他们手动选择保留哪些代码。他们决定尝试一下，于是他们在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git pull origin master # 拉取并合并远程仓库的 master 分支\n# 打开冲突文件，编辑保存\ngit add . # 添加所有文件到暂存区\ngit commit -m \"merge conflict\" # 提交修改到本地仓库\ngit push origin master # 推送到远程仓库\n</code></pre>\n<p>这样，他们就成功地解决了冲突，并且把自己的代码推送到了远程仓库。他们觉得很成就感，因为这样他们就可以和对方协作了。😄</p>\n<h2>第九天: rebase 和 merge 的区别</h2>\n<p>小明和小红在同一个项目上开发不同的功能，他们分别在自己的分支上提交了一些代码。有一天，他们想要把自己的代码合并到主分支上，但是他们不知道应该用 rebase 还是 merge 。有一天，他们听说了一个叫 rebase 和 merge 的区别的概念，可以让他们选择合适的方式来合并代码。他们决定尝试一下，于是他们在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\"># 小明在 dev1 分支上\ngit checkout dev1 # 切换到 dev1 分支\ngit rebase master # 把 dev1 分支变基到 master 分支\ngit push -f origin dev1 # 强制推送 dev1 分支到远程仓库\ngit checkout master # 切换到 master 分支\ngit merge dev1 # 合并 dev1 分支到 master 分支\ngit push origin master # 推送 master 分支到远程仓库\n\n# 小红在 dev2 分支上\ngit checkout dev2 # 切换到 dev2 分支\ngit merge master # 合并 master 分支到 dev2 分支\ngit push origin dev2 # 推送 dev2 分支到远程仓库\ngit checkout master # 切换到 master 分支\ngit merge dev2 # 合并 dev2 分支到 master 分支\ngit push origin master # 推送 master 分支到远程仓库\n\n</code></pre>\n<p>这样，他们就成功地把自己的代码合并到了主分支上，但是他们发现了一个不同的地方。小明用了 rebase 命令，他的提交历史是一条直线，没有任何分叉；小红用了 merge 命令，她的提交历史是有多个分叉和汇合的结构。他们觉得很好奇，不知道这两种方式有什么优缺点。</p>\n<p>原来，rebase 和 merge 的区别是：</p>\n<ul>\n<li>rebase 是把自己的分支变基到目标分支上，也就是把自己的提交历史放在目标分支的最后，这样可以保持提交历史的整洁和线性。</li>\n<li>merge 是把目标分支合并到自己的分支上，也就是把目标分支的提交历史和自己的提交历史合并成一个新的提交，这样可以保持提交历史的完整和真实。</li>\n</ul>\n<p>rebase 和 merge 各有优缺点：</p>\n<ul>\n<li>rebase 的优点是可以让提交历史看起来很简洁，方便查看和管理；缺点是会改变提交历史，可能导致冲突或者丢失信息。</li>\n<li>merge 的优点是可以保留提交历史的原貌，方便追溯和恢复；缺点是会让提交历史看起来很复杂，不容易理解和维护。</li>\n</ul>\n<p>所以，在选择 rebase 还是 merge 时，要根据具体的情况和需求来决定。一般来说：</p>\n<ul>\n<li>如果你想要保持一个干净和线性的提交历史，你可以用 rebase ；</li>\n<li>如果你想要保留一个完整和真实的提交历史，你可以用 merge ；</li>\n<li>如果你想要在公共的分支上合作，你应该用 merge ，避免用 rebase ，因为 rebase 会改变提交历史，可能导致其他人的困扰；</li>\n<li>如果你想要在私有的分支上开发，你可以用 rebase ，因为 rebase 可以让你的提交历史更清晰，方便你自己管理。</li>\n</ul>\n<h2>第十天: 撤销错误合并和恢复误删的分支</h2>\n<p>小明和小红在合并分支时，不小心合并了错误的分支，导致项目出现了很多 bug 。他们想要撤销这次合并，但是又不想丢失他们的修改。有一天，他们听说了一个叫 revert 的命令，可以让他们用一次新的提交来回滚之前的提交。他们决定尝试一下，于是他们在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git log # 查看提交历史\ngit revert &lt;commit ID&gt; # 回滚指定的提交\ngit push origin master # 推送到远程仓库\n</code></pre>\n<p>这样，他们就成功地撤销了错误的合并，并且用一次新的提交来记录这次回滚。他们觉得很安全，因为这样他们就不会丢失任何修改了。😊</p>\n<p>但是，有时候 revert 命令也会带来麻烦。有一次，小明在回滚一个合并时，不小心加了一个–no-commit 选项，导致他的修改没有被提交，而是被放在了暂存区。他很慌张，不知道如何恢复这次回滚。有一天，他听说了一个叫 reset 的命令，可以让他回退到某个版本，并且保留或者丢弃他的修改。他决定尝试一下，于是他在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git reset --soft HEAD^ # 回退到上一个版本，并且保留修改\ngit status # 查看修改的状态\ngit add . # 重新添加修改到暂存区\ngit commit -m \"fix bug\" # 重新提交修改\ngit push -f origin master # 强制推送到远程仓库\n</code></pre>\n<p>这样，他就成功地恢复了这次回滚，并且重新提交了正确的代码。他觉得很轻松，因为这样他就可以修复 bug 了。😊</p>\n<h2>第十一天: 删除和恢复分支</h2>\n<p>小明和小红在完成一个功能后，想要删除自己的分支，因为他们觉得这个分支已经没有用了。有一天，他们听说了一个叫 delete 的命令，可以让他们删除本地或者远程的分支。他们决定尝试一下，于是他们在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git branch -d dev1 # 删除本地的 dev1 分支\ngit push origin --delete dev1 # 删除远程的 dev1 分支\n</code></pre>\n<p>这样，他们就成功地删除了自己的分支，并且释放了一些空间。他们觉得很爽快，因为这样他们就可以开始新的功能了。😎</p>\n<p>但是，有时候 delete 命令也会带来后悔。有一次，小明在删除一个分支后，发现自己还需要这个分支上的一些代码。他很懊恼，不知道如何找回这个分支。有一天，他听说了一个叫 reflog 的命令，可以让他查看所有的提交历史，包括已经被删除或者回退的提交。他决定尝试一下，于是他在终端输入了下面的命令：</p>\n<pre><code class=\"language-sh\">git reflog # 查看所有的提交历史\ngit checkout -b dev1 &lt;commit ID&gt; # 用指定的提交创建一个新的 dev1 分支\ngit push origin dev1 # 推送 dev1 分支到远程仓库\n</code></pre>\n<p>这样，他就成功地找回了自己的分支，并且恢复到了正确的版本。他觉得很幸运，因为这样他就可以继续使用这个分支了。😄</p>\n<h2>最后</h2>\n<p>到此为止，我已经给你讲完了小明和小红的故事，你觉得怎么样？👏</p>\n", "last_modified": 1686616931, "replies": 81, "id": 948186}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 205003, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3833, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 443673, "username": "MrLQX", "url": "https://www.v2ex.com/u/MrLQX", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/2c83/a8f9/443673_mini.png?m=1673233122", "avatar_normal": "https://cdn.v2ex.com/avatar/2c83/a8f9/443673_normal.png?m=1673233122", "avatar_large": "https://cdn.v2ex.com/avatar/2c83/a8f9/443673_large.png?m=1673233122", "avatar_xlarge": "https://cdn.v2ex.com/avatar/2c83/a8f9/443673_xlarge.png?m=1673233122", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/2c83/a8f9/443673_xlarge.png?m=1673233122", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/2c83/a8f9/443673_xlarge.png?m=1673233122", "created": 1569573911, "last_modified": 1673233122}, "last_reply_by": "weicools", "last_touched": 1686664207, "title": "外省上班已经交了社保，但是家乡村里一直催交农村合作医疗", "url": "https://www.v2ex.com/t/948312", "created": 1686635752, "deleted": 0, "content": "你们遇到这种怎么回复村里的", "content_rendered": "<p>你们遇到这种怎么回复村里的</p>\n", "last_modified": 1686635752, "replies": 68, "id": 948312}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6e27/13a6/557_large.png?m=1608969785", "name": "life", "avatar_normal": "https://cdn.v2ex.com/navatar/6e27/13a6/557_normal.png?m=1608969785", "title": "生活", "url": "https://www.v2ex.com/go/life", "topics": 4470, "footer": "", "header": "生活中的技术讨论", "title_alternative": "Life", "avatar_mini": "https://cdn.v2ex.com/navatar/6e27/13a6/557_mini.png?m=1608969785", "stars": 1142, "aliases": [], "root": false, "id": 557, "parent_node_name": ""}, "member": {"id": 217326, "username": "123go", "url": "https://www.v2ex.com/u/123go", "website": "", "twitter": null, "psn": null, "github": null, "btc": null, "location": "上海闵行", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/2ae3/b5b5/217326_mini.png?m=1668867879", "avatar_normal": "https://cdn.v2ex.com/avatar/2ae3/b5b5/217326_normal.png?m=1668867879", "avatar_large": "https://cdn.v2ex.com/avatar/2ae3/b5b5/217326_large.png?m=1668867879", "avatar_xlarge": "https://cdn.v2ex.com/avatar/2ae3/b5b5/217326_xlarge.png?m=1668867879", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/2ae3/b5b5/217326_xlarge.png?m=1668867879", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/2ae3/b5b5/217326_xlarge.png?m=1668867879", "created": 1487999124, "last_modified": 1668867879}, "last_reply_by": "iam174cm", "last_touched": 1686661044, "title": "怎么帮老爸要破产老板拖欠的工资", "url": "https://www.v2ex.com/t/948207", "created": 1686620084, "deleted": 0, "content": "事情是这样的：\r\n\r\n2021 年二月的时候老爸在东莞沙田一个小的机械制造工厂里打工，一直做到 2022 年四月离职。但是临走时有三万多的工资无法结清，老板一直用各种理由拖延。我爸不善交际，我便开始了漫长的讨薪之路。 \r\n\r\n经过几次与该老板的沟通得知，老板是贵州人，有过几次创业经历都失败了，这次看样子也要破产。我在企查查上看到，他已经因为几次合同违约、拖欠款项，被其他公司起诉过，被列为失信被执行人了，已经是老赖了。我当时能够感觉到他的难处，多次沟通并没有限定非常严格的期限，甚至同意分期支付，可是一直到 2022 年六月份，他依然无法归还哪怕一点点欠款。由于每次他都承诺的非常坚定，说什么时候可以先还多少，但是屡次都不能兑现，这让我非常失望，也让我失去了对他的信任。我便提起了劳动仲裁，请求劳动局帮忙解决。 \r\n\r\n毫无意外，仲裁结果符合我们预期，签订了仲裁协议，约定七个月之内支付全部欠款，如果无法履行，将需额外支付违约金，且我们可以申请法院强制执行。老板按了手印、签了名字，本以为这个事情终于可以结束了。 \r\n\r\n没想到这个鸟人，连一期都没有付过，就好像没有仲裁过，视法律为无物。 于是我下定决心，在 2022 年 11 月份开始申请法院强制执行。\r\n\r\n现在执行流程已经走到司法拍卖，但是老板工厂的资产评估下来只有三千多块，还不够欠款的零头(这个评估我非常纳闷，根据现场的一些照片，那些机械设备和物料怎么也不可能只值这么点钱。)。在同时有我、我爸、工厂老板、另一个被欠薪的工人、法院工作人员的群里，工厂老板总是说“是因为你们走法院，我才破产的，现在好了，工厂也没了，你们高兴了？？”类似这样的转嫁责任的说辞。\r\n\r\n我用淘宝租了个企查查的 svip ，查了下这个老板的财产线索，发现确实没有什么资产，几乎全是被申请强制执行、拍卖相关的线索，好像他确实是个不幸、又无能的老板。\r\n\r\n我最担心的是我的爸和我妈会因为这个事情影响情绪、进而影响身体。打工一年挣的钱拿不到手，说出去好像有点无能的感觉，好像是被老板欺负了。他们要面子，所以不管老板是不是真的可怜，这个钱还是不要不行。\r\n\r\n本来想过要去老板工厂或者家里闹一闹，送个花圈什么的，但是我人在上海，我爸在杭州，不管是东莞还是贵州，都没有什么人，成本和风险都挺高。\r\n\r\n现在的问题就是这个钱还能怎么要，要怎么安抚我爸的情绪，有没有别的什么思路？", "content_rendered": "<p>事情是这样的：</p>\n<p>2021 年二月的时候老爸在东莞沙田一个小的机械制造工厂里打工，一直做到 2022 年四月离职。但是临走时有三万多的工资无法结清，老板一直用各种理由拖延。我爸不善交际，我便开始了漫长的讨薪之路。 </p>\n<p>经过几次与该老板的沟通得知，老板是贵州人，有过几次创业经历都失败了，这次看样子也要破产。我在企查查上看到，他已经因为几次合同违约、拖欠款项，被其他公司起诉过，被列为失信被执行人了，已经是老赖了。我当时能够感觉到他的难处，多次沟通并没有限定非常严格的期限，甚至同意分期支付，可是一直到 2022 年六月份，他依然无法归还哪怕一点点欠款。由于每次他都承诺的非常坚定，说什么时候可以先还多少，但是屡次都不能兑现，这让我非常失望，也让我失去了对他的信任。我便提起了劳动仲裁，请求劳动局帮忙解决。 </p>\n<p>毫无意外，仲裁结果符合我们预期，签订了仲裁协议，约定七个月之内支付全部欠款，如果无法履行，将需额外支付违约金，且我们可以申请法院强制执行。老板按了手印、签了名字，本以为这个事情终于可以结束了。 </p>\n<p>没想到这个鸟人，连一期都没有付过，就好像没有仲裁过，视法律为无物。 于是我下定决心，在 2022 年 11 月份开始申请法院强制执行。</p>\n<p>现在执行流程已经走到司法拍卖，但是老板工厂的资产评估下来只有三千多块，还不够欠款的零头(这个评估我非常纳闷，根据现场的一些照片，那些机械设备和物料怎么也不可能只值这么点钱。)。在同时有我、我爸、工厂老板、另一个被欠薪的工人、法院工作人员的群里，工厂老板总是说“是因为你们走法院，我才破产的，现在好了，工厂也没了，你们高兴了？？”类似这样的转嫁责任的说辞。</p>\n<p>我用淘宝租了个企查查的 svip ，查了下这个老板的财产线索，发现确实没有什么资产，几乎全是被申请强制执行、拍卖相关的线索，好像他确实是个不幸、又无能的老板。</p>\n<p>我最担心的是我的爸和我妈会因为这个事情影响情绪、进而影响身体。打工一年挣的钱拿不到手，说出去好像有点无能的感觉，好像是被老板欺负了。他们要面子，所以不管老板是不是真的可怜，这个钱还是不要不行。</p>\n<p>本来想过要去老板工厂或者家里闹一闹，送个花圈什么的，但是我人在上海，我爸在杭州，不管是东莞还是贵州，都没有什么人，成本和风险都挺高。</p>\n<p>现在的问题就是这个钱还能怎么要，要怎么安抚我爸的情绪，有没有别的什么思路？</p>\n", "last_modified": 1686620106, "replies": 55, "id": 948207}]