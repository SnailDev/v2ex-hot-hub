[{"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6e27/13a6/557_large.png?m=1608969785", "name": "life", "avatar_normal": "https://cdn.v2ex.com/navatar/6e27/13a6/557_normal.png?m=1608969785", "title": "生活", "url": "https://www.v2ex.com/go/life", "topics": 3782, "footer": "", "header": "生活中的技术讨论", "title_alternative": "Life", "avatar_mini": "https://cdn.v2ex.com/navatar/6e27/13a6/557_mini.png?m=1608969785", "stars": 1013, "aliases": [], "root": false, "id": 557, "parent_node_name": ""}, "member": {"id": 556038, "username": "8UbNRbE5c9tvj2", "url": "https://www.v2ex.com/u/8UbNRbE5c9tvj2", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/023fde12818f52d308d2c99f15fbd578?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/023fde12818f52d308d2c99f15fbd578?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/023fde12818f52d308d2c99f15fbd578?s=73&d=retro", "created": 1631677815, "last_modified": 1647305972}, "last_reply_by": "zxCoder", "last_touched": 1672387396, "title": "得新冠转阴之后多久能洗澡呢", "url": "https://www.v2ex.com/t/905547", "created": 1672372411, "deleted": 0, "content": "现在都是说不能洗，但国外好像没这个说法", "content_rendered": "<p>现在都是说不能洗，但国外好像没这个说法</p>\n", "last_modified": 1672372411, "replies": 118, "id": 905547}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1670445459", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1670445459", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 52686, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1670445459", "stars": 8134, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 580599, "username": "ahdark", "url": "https://www.v2ex.com/u/ahdark", "website": "https://www.ahdark.com", "twitter": "AHdark_0428", "psn": "", "github": "AH-dark", "btc": "", "location": "Beijing", "tagline": "", "bio": "全栈开发小蒟蒻", "avatar_mini": "https://cdn.v2ex.com/avatar/9195/5f81/580599_mini.png?m=1672359937", "avatar_normal": "https://cdn.v2ex.com/avatar/9195/5f81/580599_normal.png?m=1672359937", "avatar_large": "https://cdn.v2ex.com/avatar/9195/5f81/580599_large.png?m=1672359937", "avatar_xlarge": "https://cdn.v2ex.com/avatar/9195/5f81/580599_xlarge.png?m=1672359937", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/9195/5f81/580599_xlarge.png?m=1672359937", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/9195/5f81/580599_xlarge.png?m=1672359937", "created": 1652028534, "last_modified": 1672359937}, "last_reply_by": "dyxiaodong2022", "last_touched": 1672386582, "title": "靠年龄来营销自己是否已经成为社会舆论的正确导向？", "url": "https://www.v2ex.com/t/905496", "created": 1672359958, "deleted": 0, "content": "可以说是酸吧，看到一个帖子说自己 14 岁写了个脚手架，底下回复一顿夸，Twitter 也有一堆大佬夸\r\n然后这项目一下子就来了 PR 来了 Issue 来了 Star\r\n那我当年 14 岁玩 CNN 玩 RNN 玩 NLP 往这一发我是不是就是抖音百万粉丝大红人了？\r\n这事没问题吗？？\r\n反正我不能接受为了 Star 写开源，我认为开源精神不是这么玩的。", "content_rendered": "可以说是酸吧，看到一个帖子说自己 14 岁写了个脚手架，底下回复一顿夸，Twitter 也有一堆大佬夸<br />然后这项目一下子就来了 PR 来了 Issue 来了 Star<br />那我当年 14 岁玩 CNN 玩 RNN 玩 NLP 往这一发我是不是就是抖音百万粉丝大红人了？<br />这事没问题吗？？<br />反正我不能接受为了 Star 写开源，我认为开源精神不是这么玩的。", "last_modified": 1672360244, "replies": 100, "id": 905496}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1670445459", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1670445459", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 52686, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1670445459", "stars": 8134, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 608460, "username": "FurryR", "url": "https://www.v2ex.com/u/FurryR", "website": "furryr.github.io", "twitter": "xnu11ptr", "psn": "DevRinHK", "github": "FurryR", "btc": "", "location": "广州", "tagline": "时间好像不够了？", "bio": "14 岁的福瑞极客。不知道怎么才能给项目热度。", "avatar_mini": "https://cdn.v2ex.com/avatar/7ad8/793a/608460_mini.png?m=1672312247", "avatar_normal": "https://cdn.v2ex.com/avatar/7ad8/793a/608460_normal.png?m=1672312247", "avatar_large": "https://cdn.v2ex.com/avatar/7ad8/793a/608460_large.png?m=1672312247", "avatar_xlarge": "https://cdn.v2ex.com/avatar/7ad8/793a/608460_xlarge.png?m=1672312247", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/7ad8/793a/608460_xlarge.png?m=1672312247", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/7ad8/793a/608460_xlarge.png?m=1672312247", "created": 1672310891, "last_modified": 1672312247}, "last_reply_by": "bjzhush", "last_touched": 1672386937, "title": "13 岁初中生写的一个简单 Typescript mirai-api-http 对接库", "url": "https://www.v2ex.com/t/905504", "created": 1672364784, "deleted": 0, "content": "起因是在 QQ 群看到了，感觉很有意思就注册了一个 V2EX 账号。\r\n\r\n这个帖子是用来对标之前 14 岁初中生写的前端工具库的。前端对后端？\r\n\r\n特例独行地，我写 Bot 的时候顺带搓了一个对接框架（因为 Mirai-js 用得不是很顺手）。\r\n\r\n不久前刚过 14 岁生日，但是这个库最后一次更新是在我 13 岁的时候，那就当 13 岁吧。\r\n\r\n你可以在 [这里]( https://github.com/FurDevsCN/mirai-foxes) 访问这个项目（移到 org 的原因是和他们玩得很好，并且我希望有人能来帮我维护一下，即使并没有组织成员会这样做）。\r\n\r\n项目附带全中文的完整 Typescript 说明文档。并且 JSDoc 100%(?) 完成注释。你可以在 [这里]( https://github.com/FurDevsCN/foxes-awesome) 找到一个完整的示例。我还写了一个并不好的模块管理器，你可以在 [这里]( https://github.com/FurDevsCN/foxes-plugin) 下载。mirai-foxes 有一个地方可能滥用了 never ，正在为此苦恼。\r\n\r\n注意！！！因为说明文档有 FurDevsCN 成员带着写，所以会有一定的异物混入，请不要在意。\r\n\r\n我写了很多 breaking 的更新，不过短时间内这个算是变成 stable 版了，所以没有任何问题。\r\n\r\n总之，感谢 pr 的陌生人（他修正了一些文档的错误）和 FurDevsCN 的大家。\r\n\r\n如果你只是想下载这个库看看：\r\n\r\n```\r\nnpm i mirai-foxes # 也可以使用 yarn 或者 pnpm ，应该？\r\n```\r\n\r\n如果你还没配置 mirai ？嘛，开发者文档里应该写了配置方式吧。\r\n\r\n顺便给 TLDR 的各位中文文档链接：[Github Pages]( https://furdevscn.github.io/mirai-foxes)。\r\n\r\n不会 OOP ，轻喷。不过我写 Bot 的时候用得顺手，这是好的。\r\n\r\n我之前还写了个对接 OneBot 的整活框架：[nobot]( https://github.com/FurryR/nobot)，支持 Python 和 C++，同样的我也给 Python 版注好了 typing 和 Doxygen 。不过不建议使用就是了。什么时候想写个 Rust 版，不知道 Rust 有什么好一点的 net 库？（好吧，我承认我不会 Rust 式编程，Rc<RefCell> 已经满天飞了。）\r\n\r\n自豪地不使用格式化（别学我）。\r\n\r\n到时候想到什么就再加吧。", "content_rendered": "<p>起因是在 QQ 群看到了，感觉很有意思就注册了一个 V2EX 账号。</p>\n<p>这个帖子是用来对标之前 14 岁初中生写的前端工具库的。前端对后端？</p>\n<p>特例独行地，我写 Bot 的时候顺带搓了一个对接框架（因为 Mirai-js 用得不是很顺手）。</p>\n<p>不久前刚过 14 岁生日，但是这个库最后一次更新是在我 13 岁的时候，那就当 13 岁吧。</p>\n<p>你可以在 <a href=\"https://github.com/FurDevsCN/mirai-foxes\" rel=\"nofollow\">这里</a> 访问这个项目（移到 org 的原因是和他们玩得很好，并且我希望有人能来帮我维护一下，即使并没有组织成员会这样做）。</p>\n<p>项目附带全中文的完整 Typescript 说明文档。并且 JSDoc 100%(?) 完成注释。你可以在 <a href=\"https://github.com/FurDevsCN/foxes-awesome\" rel=\"nofollow\">这里</a> 找到一个完整的示例。我还写了一个并不好的模块管理器，你可以在 <a href=\"https://github.com/FurDevsCN/foxes-plugin\" rel=\"nofollow\">这里</a> 下载。mirai-foxes 有一个地方可能滥用了 never ，正在为此苦恼。</p>\n<p>注意！！！因为说明文档有 FurDevsCN 成员带着写，所以会有一定的异物混入，请不要在意。</p>\n<p>我写了很多 breaking 的更新，不过短时间内这个算是变成 stable 版了，所以没有任何问题。</p>\n<p>总之，感谢 pr 的陌生人（他修正了一些文档的错误）和 FurDevsCN 的大家。</p>\n<p>如果你只是想下载这个库看看：</p>\n<pre><code>npm i mirai-foxes # 也可以使用 yarn 或者 pnpm ，应该？\n</code></pre>\n<p>如果你还没配置 mirai ？嘛，开发者文档里应该写了配置方式吧。</p>\n<p>顺便给 TLDR 的各位中文文档链接：<a href=\"https://furdevscn.github.io/mirai-foxes\" rel=\"nofollow\">Github Pages</a>。</p>\n<p>不会 OOP ，轻喷。不过我写 Bot 的时候用得顺手，这是好的。</p>\n<p>我之前还写了个对接 OneBot 的整活框架：<a href=\"https://github.com/FurryR/nobot\" rel=\"nofollow\">nobot</a>，支持 Python 和 C++，同样的我也给 Python 版注好了 typing 和 Doxygen 。不过不建议使用就是了。什么时候想写个 Rust 版，不知道 Rust 有什么好一点的 net 库？（好吧，我承认我不会 Rust 式编程，Rc&lt;RefCell&gt; 已经满天飞了。）</p>\n<p>自豪地不使用格式化（别学我）。</p>\n<p>到时候想到什么就再加吧。</p>\n", "last_modified": 1672365130, "replies": 90, "id": 905504}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 195229, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3663, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 340878, "username": "Crazy07", "url": "https://www.v2ex.com/u/Crazy07", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/avatar/bf3e/2fc3/340878_mini.png?m=1543656415", "avatar_normal": "https://cdn.v2ex.com/avatar/bf3e/2fc3/340878_normal.png?m=1543656415", "avatar_large": "https://cdn.v2ex.com/avatar/bf3e/2fc3/340878_large.png?m=1543656415", "created": 1534160171, "last_modified": 1543656415}, "last_reply_by": "allgy", "last_touched": 1672386066, "title": "毕业工作 7 年了，你们还有联系的大学同学吗？", "url": "https://www.v2ex.com/t/905528", "created": 1672368517, "deleted": 0, "content": "毕业工作 7 年了，你们还有联系的大学同学吗？\r\n\r\n我先说，目前只有一个一年联系几次的朋友，我大学最好的一个哥们。\r\n\r\n现在联系明显变少，原本关系还行，后来他沉迷于币圈（韭菜圈），让我日益远离。", "content_rendered": "<p>毕业工作 7 年了，你们还有联系的大学同学吗？</p>\n<p>我先说，目前只有一个一年联系几次的朋友，我大学最好的一个哥们。</p>\n<p>现在联系明显变少，原本关系还行，后来他沉迷于币圈（韭菜圈），让我日益远离。</p>\n", "last_modified": 1672368517, "replies": 71, "id": 905528}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1650095340", "name": "qna", "avatar_normal": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1650095340", "title": "问与答", "url": "https://www.v2ex.com/go/qna", "topics": 195229, "footer": "", "header": "一个更好的世界需要你持续地提出好问题。", "title_alternative": "Questions and Answers", "avatar_mini": "https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1650095340", "stars": 3663, "aliases": [], "root": false, "id": 12, "parent_node_name": "v2ex"}, "member": {"id": 437888, "username": "fredhwang", "url": "https://www.v2ex.com/u/fredhwang", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/55236a9816dc15df34698729006e6a30?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/55236a9816dc15df34698729006e6a30?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/55236a9816dc15df34698729006e6a30?s=73&d=retro", "created": 1566725299, "last_modified": 1566725299}, "last_reply_by": "cheng4741", "last_touched": 1672386962, "title": "阿兹夫定片，网上一查，不敢吃", "url": "https://www.v2ex.com/t/905448", "created": 1672318319, "deleted": 0, "content": "胸闷了几天，今早还咳嗽起来，就上午去做了 CT 检查，说是双肺内见多发斑片状磨玻璃影，诊断意见是双肺感染（考虑病毒性感染）。\r\n医生给开了阿兹夫定片。一开始说可能没药，后来拿到药了，还挺高兴。结果晚上在网上一查，感觉非常的不靠谱（几篇文章都在说临床研究数据少，毒性大），再看看盒子里随附的说明书上罗列的一长串不良反应，实在没胆吃。请专业人士出来替我一决。\r\n\r\n另听说 paxlovid 挺好，不知道怎么搞得到，有资源的能否分享下，付费。万一搞不到药，也希望自己能挺过去。", "content_rendered": "<p>胸闷了几天，今早还咳嗽起来，就上午去做了 CT 检查，说是双肺内见多发斑片状磨玻璃影，诊断意见是双肺感染（考虑病毒性感染）。\n医生给开了阿兹夫定片。一开始说可能没药，后来拿到药了，还挺高兴。结果晚上在网上一查，感觉非常的不靠谱（几篇文章都在说临床研究数据少，毒性大），再看看盒子里随附的说明书上罗列的一长串不良反应，实在没胆吃。请专业人士出来替我一决。</p>\n<p>另听说 paxlovid 挺好，不知道怎么搞得到，有资源的能否分享下，付费。万一搞不到药，也希望自己能挺过去。</p>\n", "last_modified": 1672318319, "replies": 65, "id": 905448}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1630643913", "name": "apple", "avatar_normal": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1630643913", "title": "Apple", "url": "https://www.v2ex.com/go/apple", "topics": 20996, "footer": "", "header": "设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。", "title_alternative": "Apple", "avatar_mini": "https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1630643913", "stars": 2452, "aliases": [], "root": false, "id": 184, "parent_node_name": "hardware"}, "member": {"id": 243529, "username": "nosugar", "url": "https://www.v2ex.com/u/nosugar", "website": "", "twitter": "", "psn": "", "github": "", "btc": "", "location": "", "tagline": "", "bio": "", "avatar_mini": "https://cdn.v2ex.com/avatar/1fc6/2c8b/243529_mini.png?m=1661909160", "avatar_normal": "https://cdn.v2ex.com/avatar/1fc6/2c8b/243529_normal.png?m=1661909160", "avatar_large": "https://cdn.v2ex.com/avatar/1fc6/2c8b/243529_large.png?m=1661909160", "avatar_xlarge": "https://cdn.v2ex.com/avatar/1fc6/2c8b/243529_xlarge.png?m=1661909160", "avatar_xxlarge": "https://cdn.v2ex.com/avatar/1fc6/2c8b/243529_xlarge.png?m=1661909160", "avatar_xxxlarge": "https://cdn.v2ex.com/avatar/1fc6/2c8b/243529_xlarge.png?m=1661909160", "created": 1500616848, "last_modified": 1661909160}, "last_reply_by": "vZexc0m", "last_touched": 1672387529, "title": "苹果的 ARM M 系列芯片似乎在 CPU、GPU 性能方面逐渐被竞争对手超越甚至碾压，专业视频制作领域也逐渐失势", "url": "https://www.v2ex.com/t/905506", "created": 1672365509, "deleted": 0, "content": "见：\r\n\r\n《选 Mac 还是 PC ？交了这么多学费后，我终于悟了...》影视飓风\r\n\r\nhttps://www.bilibili.com/video/BV1h3411D76J/\r\n\r\n如果一个公司希望把所有方面都自己做，能超越专攻单独领域的对手吗？", "content_rendered": "<p>见：</p>\n<p>《选 Mac 还是 PC ？交了这么多学费后，我终于悟了...》影视飓风</p>\n<p><a href=\"https://www.bilibili.com/video/BV1h3411D76J/\" rel=\"nofollow\">https://www.bilibili.com/video/BV1h3411D76J/</a></p>\n<p>如果一个公司希望把所有方面都自己做，能超越专攻单独领域的对手吗？</p>\n", "last_modified": 1672365576, "replies": 64, "id": 905506}, {"node": {"avatar_large": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1670445459", "name": "programmer", "avatar_normal": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1670445459", "title": "程序员", "url": "https://www.v2ex.com/go/programmer", "topics": 52686, "footer": "", "header": "While code monkeys are not eating bananas, they're coding.", "title_alternative": "Programmer", "avatar_mini": "https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1670445459", "stars": 8134, "aliases": [], "root": false, "id": 300, "parent_node_name": "computer"}, "member": {"id": 436628, "username": "ngduncent", "url": "https://www.v2ex.com/u/ngduncent", "website": null, "twitter": null, "psn": null, "github": null, "btc": null, "location": null, "tagline": null, "bio": null, "avatar_mini": "https://cdn.v2ex.com/gravatar/790a61b695165bc329a93775d40af2f7?s=24&d=retro", "avatar_normal": "https://cdn.v2ex.com/gravatar/790a61b695165bc329a93775d40af2f7?s=48&d=retro", "avatar_large": "https://cdn.v2ex.com/gravatar/790a61b695165bc329a93775d40af2f7?s=73&d=retro", "created": 1566116388, "last_modified": 1665629177}, "last_reply_by": "zhengfan2016", "last_touched": 1672384602, "title": "总结开源项目中的常见坏实践（Bad Practice）", "url": "https://www.v2ex.com/t/905432", "created": 1672311036, "deleted": 0, "content": "### 一些开源项目包含了各种编程的最佳实践供人参考学习和借鉴。但是也有一些开源项目虽然初衷是好的。但是包含了一些代码的坏实践。特别是对于一部分刚入行的大学生来说，可能会给到一些错误的示范。于是在此列举一些项目中的坏实践。\r\n\r\n\r\n\r\n\r\n#### 1.方法的用意判断是与否却返回字符串的“0”或者“1”\r\n    \r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa642f347a684db59b7b2e126ee24ab5~tplv-k3u1fbpfcp-watermark.image?)\r\n如果一个方法明确返回是与否这两种情况，那么没有必要返回字符串的 0 或者 1 。这样会造成很多地方需要使用\r\n字符串的形式来匹配结果判断是与否。例如以下这种形式。\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a333ce60c3b140c1b25097c262204be3~tplv-k3u1fbpfcp-watermark.image?)\r\n方法应该直接返回 true 或者 false 。 代码会简洁明了很多。\r\n\r\n\r\n#### 2.滥用三元运算符\r\n\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2063836c00db48668e21192e23224ade~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb10fc763eac43b68814f7dfd84a6770~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n#### 3.滥用机翻英语\r\n\r\nPoor 有不好，差的意思。 例如 My english is poor.\r\n这里的 Poor 是差的意思。\r\n但是下图这个方法 getDatePoor 。也用 poor 来表达获取时间“差”的含义。\r\n英语还是程序员应该要掌握学习的。不能光高靠机翻英语，不然容易闹笑话。\r\n![图片.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ea0bfdcf19c47c09b99ef70ba3a899c~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 4.造不必要的大量轮子\r\n\r\n\r\n很多方法或者功能我们应该尽可能的搜索是否已经有开源成熟的 jar 包或者框架实现。成熟的开源 jar 包或者框架，有大量完备的测试以及广泛的用户来确保质量。\r\n如果实在需要自己造小轮子，请使用单元测试来确保质量\r\n\r\n\r\n![图片.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5a1b7ac5b344d30a997dea22054dd90~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n\r\n#### 5.大量 if else 语句\r\n\r\n\r\n大量的 if-else 语句，具体情况具体分析。但是大部分都可以用卫语句提前返回结果。避免大量嵌套。\r\n\r\n例如左边的写法可以改为右边的写法\r\n\r\n\r\n![图片.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0965d2269d4e44e08f411c9e9af75985~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n像下图这种情况可以用 Stream Lambda 来进行简化\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d932bcb85d4244c0975bf9963f96cecb~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n优化后\r\n\r\n![图片.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a7344b96c4f47ad9e26a855bbcb2522~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n#### 6.多余的代码判断\r\n\r\n有些时候可能会写出一些不必要的冗余判断\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecff96b960bb451a802ed415f524c06a~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 7.大量的代码细节让阅读者增加心智负担\r\n\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c409acbd5a5b49c586b775e94269a4fd~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n我们应该封装一部分代码细节，暴露出代码的主流程，优化后\r\n\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c21bc8d48484467abbe2e5698c2fd25b~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n#### 8.繁琐的代码逻辑\r\n\r\n![图片.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1a629861d8b487b9ceba383272d66a4~tplv-k3u1fbpfcp-watermark.image?)\r\n像上图这种情形，我们其实可以使用一句 Stream 语句就可以描述出来。\r\n\r\n\r\n\r\n\r\n#### 9.数据库中是与否可以直接用 tinyInt 映射，不要用字符串来映射\r\n\r\n这样会造成布尔字段取出时，还需要跟字符串 1 或者 0 进行比对，这是很尴尬的设计。\r\n![图片.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6aff1f70d3f4496e97b644a7622afe7f~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 10.异常捕获之后不做任何处理\r\n\r\n我们捕获异常之后一般都需要使用 log 来记录错误情形，如果什么都不做，就很可能丢失错误信息，并且使代码排查过程更加困难。\r\n\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15289f74e1674c69a2f05d547ff3ddde~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99a949365c9b48d4a75694bced9f974b~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n#### 11.使用 Map 填充数据\r\n使用 Java 是静态语言，使用 Map 填充数据，反而失去了静态语言带来了代码检查以及 IDEA 识别字段引用的功能。\r\n\r\n\r\n![图片.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c89217ce5e504f67b8bfabe99898f33a~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n#### 12.混乱的常量\r\n请不用将项目中所有的常量一股脑的放到一个类中。\r\n\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f773e5fcd567417889971ecde3b3965c~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n可以使用像这种静态类的方式，分门别类地放入不同的常量\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92a1caf2de204bbab836464c3408c1af~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n#### 13.请使用驼峰命名\r\n\r\n\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d894d5dac1fe46b9b79d16a8d5da31c6~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 14.变量的定义请在系统内保持一致，比如 1 在系统内表示是。 请勿有时表示是，有时表示否。\r\n有时候用 1 表示肯定，有时候用 0 表示肯定，有时候用 Y 表示肯定。\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30d934211a8f43c0b919aef7e7f818be~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/162c6f55e5b94e898bfd80d07ea05fbb~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86241af64875469dbe268933b780bf7b~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 15.奇葩的代码脑回路\r\n\r\n在外层方法判断一遍，在内层方法又进行一遍一样的判断\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83e9a83217824e7c827462debd9597ad~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 16.常量随意的命名格式\r\n常量的命名请使用大写加下划线的格式\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1743c3bac7b4f34bff3a775dc0272da~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n#### 17.嵌套的 Switch 语句\r\n\r\n就一种 case 了  完全没有必要使用 switch 语句\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4649a7980ff5461d812deff9e7e3e330~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 18.使用魔法值\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16b772c6897741dbbfc35707863eb0a3~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n例如项目中大量使用了“jpg”的字符串魔法值，使用魔法值使得我们无法统一找到代码的引用处。在重构的时候难免会有疏漏。\r\n\r\n![图片.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73759506f9dc44618d004d1077c03a6b~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 19.单个方法代码超过 80 行\r\n如果单个方法的代码行超过 80 行，意味你的代码缺乏封装和可读性。例如这种一大坨的代码。\r\n\r\n````\r\npublic static void initColumnField(GenTableColumn column, GenTable table)\r\n{\r\n    String dataType = getDbType(column.getColumnType());\r\n    String columnName = column.getColumnName();\r\n    column.setTableId(table.getTableId());\r\n    column.setCreateBy(table.getCreateBy());\r\n    // 设置 java 字段名\r\n    column.setJavaField(StringUtils.toCamelCase(columnName));\r\n    // 设置默认类型\r\n    column.setJavaType(GenConstants.TYPE_STRING);\r\n    column.setQueryType(GenConstants.QUERY_EQ);\r\n\r\n    if (arraysContains(GenConstants.COLUMNTYPE_STR, dataType) || arraysContains(GenConstants.COLUMNTYPE_TEXT, dataType))\r\n    {\r\n        // 字符串长度超过 500 设置为文本域\r\n        Integer columnLength = getColumnLength(column.getColumnType());\r\n        String htmlType = columnLength >= 500 || arraysContains(GenConstants.COLUMNTYPE_TEXT, dataType) ? GenConstants.HTML_TEXTAREA : GenConstants.HTML_INPUT;\r\n        column.setHtmlType(htmlType);\r\n    }\r\n    else if (arraysContains(GenConstants.COLUMNTYPE_TIME, dataType))\r\n    {\r\n        column.setJavaType(GenConstants.TYPE_DATE);\r\n        column.setHtmlType(GenConstants.HTML_DATETIME);\r\n    }\r\n    else if (arraysContains(GenConstants.COLUMNTYPE_NUMBER, dataType))\r\n    {\r\n        column.setHtmlType(GenConstants.HTML_INPUT);\r\n\r\n        // 如果是浮点型 统一用 BigDecimal\r\n        String[] str = StringUtils.split(StringUtils.substringBetween(column.getColumnType(), \"(\", \")\"), \",\");\r\n        if (str != null && str.length == 2 && Integer.parseInt(str[1]) > 0)\r\n        {\r\n            column.setJavaType(GenConstants.TYPE_BIGDECIMAL);\r\n        }\r\n        // 如果是整形\r\n        else if (str != null && str.length == 1 && Integer.parseInt(str[0]) <= 10)\r\n        {\r\n            column.setJavaType(GenConstants.TYPE_INTEGER);\r\n        }\r\n        // 长整形\r\n        else\r\n        {\r\n            column.setJavaType(GenConstants.TYPE_LONG);\r\n        }\r\n    }\r\n\r\n    // 插入字段（默认所有字段都需要插入）\r\n    column.setIsInsert(GenConstants.REQUIRE);\r\n\r\n    // 编辑字段\r\n    if (!arraysContains(GenConstants.COLUMNNAME_NOT_EDIT, columnName) && !column.isPk())\r\n    {\r\n        column.setIsEdit(GenConstants.REQUIRE);\r\n    }\r\n    // 列表字段\r\n    if (!arraysContains(GenConstants.COLUMNNAME_NOT_LIST, columnName) && !column.isPk())\r\n    {\r\n        column.setIsList(GenConstants.REQUIRE);\r\n    }\r\n    // 查询字段\r\n    if (!arraysContains(GenConstants.COLUMNNAME_NOT_QUERY, columnName) && !column.isPk())\r\n    {\r\n        column.setIsQuery(GenConstants.REQUIRE);\r\n    }\r\n\r\n    // 查询字段类型\r\n    if (StringUtils.endsWithIgnoreCase(columnName, \"name\"))\r\n    {\r\n        column.setQueryType(GenConstants.QUERY_LIKE);\r\n    }\r\n    // 状态字段设置单选框\r\n    if (StringUtils.endsWithIgnoreCase(columnName, \"status\"))\r\n    {\r\n        column.setHtmlType(GenConstants.HTML_RADIO);\r\n    }\r\n    // 类型&性别字段设置下拉框\r\n    else if (StringUtils.endsWithIgnoreCase(columnName, \"type\")\r\n            || StringUtils.endsWithIgnoreCase(columnName, \"sex\"))\r\n    {\r\n        column.setHtmlType(GenConstants.HTML_SELECT);\r\n    }\r\n    // 图片字段设置图片上传控件\r\n    else if (StringUtils.endsWithIgnoreCase(columnName, \"image\"))\r\n    {\r\n        column.setHtmlType(GenConstants.HTML_IMAGE_UPLOAD);\r\n    }\r\n    // 文件字段设置文件上传控件\r\n    else if (StringUtils.endsWithIgnoreCase(columnName, \"file\"))\r\n    {\r\n        column.setHtmlType(GenConstants.HTML_FILE_UPLOAD);\r\n    }\r\n    // 内容字段设置富文本控件\r\n    else if (StringUtils.endsWithIgnoreCase(columnName, \"content\"))\r\n    {\r\n        column.setHtmlType(GenConstants.HTML_EDITOR);\r\n    }\r\n}\r\n````\r\n\r\n\r\n#### 20.避免使用反逻辑\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0daa82ca78a497a86b520e9f11cf524~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n像图中```!(x == 0) ``` 可以直接改成```x != 0 ``` 即可\r\n\r\n\r\n还有以下这种冗余代码。\r\n\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77965de686e74498b2e6d74491044631~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n#### 21.复杂的判断使用有意义的变量来替代\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/587fe1fff73b4843b90ddd3d4d71392e~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n比如上图的判断我们可以用一个变量 isLongField 来替代 提高代码的可读性。\r\n\r\n\r\n\r\n#### 22.常量没有使用 final 来修饰\r\n\r\n如果没有使用 final 来修饰的话，就有可能在代码中被修改。\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/350f7098c5b94114b7bd529e973f4680~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 23.字符编码直接用字符串表示\r\n\r\n\r\n\r\n![图片.png]( https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b9b26b0cf66436f805812be5c85761a~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n字符编码，JDK 中都有常量可以直接表示，我们可以直接使用\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5483484718fc4926be19ca5ea478282d~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n\r\n\r\n####  24.多余的方法修饰符\r\n\r\n\r\nJava 中 interface 类，方法默认都是 Public 的，没必要再加上 public 修饰符\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c9ba5f660da483597762d927375b676~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 25.不必要的 ToString\r\n\r\n\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b961ebdfa234ad08b60ecc43c56c70a~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n![图片.png]( https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ba82aebd5324984945ed5381bdb3708~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n\r\n#### 26.多余的变量声明\r\n\r\n\r\n如果变量声明之后没有做任何处理，请直接通过 return 返回，不要多声明一个变量\r\n\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91980ebae5604d25828176a276e7e072~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 27.使用语义不清晰的方法\r\n例如 String 的 indexOf 方法 我们完全可以使用 contains 方法来替代，使代码的语义更一目了然。\r\n\r\n![图片.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40dc0a23bd9544d5902e03e9f1110e60~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n\r\n#### 28.毫无必要的包装语句 unboxing 和 boxing\r\n\r\n```\r\nInteger.valueOf\r\n```\r\n返回的本身就是 int, 没有必要再调用 intValue 方法\r\n![图片.png]( https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7a81cd9c7a34f329b54fe980cbb4dcf~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n\r\n#### 29.使用+=进行在循环中字符串拼接\r\n\r\n![图片.png]( https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ca256d68d8f40d4a7796a1480b47706~tplv-k3u1fbpfcp-watermark.image?)\r\n\r\n+=会造出临时的字符串，我们应该使用 StringBuilder 在循环中拼接字符串\r\n\r\n\r\n\r\n#### 以上就是总结的关于项目中的一些坏实践，请大家务必使用。有其他坏实践，恳请大家继续补充。\r\n---\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n##### 鄙人在业余时间弄了一个全栈项目 Agileboot ，初衷是想做一个代码规范，项目结构良好，可供大学生或者入门 3 年内的开发者参考使用的项目。\r\n\r\n后端地址：\r\nhttps://github.com/valarchie/AgileBoot-Back-End  \r\n鄙人能力水平有限，如果项目中发现不足或者错误，恳请指正。欢迎 PR 。一起构建一个规范完善的后端项目。\r\n\r\n\r\n前端地址：\r\nhttps://github.com/valarchie/AgileBoot-Front-End\r\n\r\n鄙人前端小白，关于前端项目的规范以及优化仅作了力所能及的部分，还有很多优化空间。哪位前端大佬有兴趣一起帮忙规范和优化吗？\r\n\r\n\r\n演示地址\r\n[www.agileboot.vip]( http://www.agileboot.vip)\r\n\r\n\r\n\r\n\r\n\r\n\r\n###### 欢迎加入全栈技术交流群：1398880", "content_rendered": "<h3>一些开源项目包含了各种编程的最佳实践供人参考学习和借鉴。但是也有一些开源项目虽然初衷是好的。但是包含了一些代码的坏实践。特别是对于一部分刚入行的大学生来说，可能会给到一些错误的示范。于是在此列举一些项目中的坏实践。</h3>\n<h4>1.方法的用意判断是与否却返回字符串的“0”或者“1”</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa642f347a684db59b7b2e126ee24ab5%7Etplv-k3u1fbpfcp-watermark.image?\"/>\n如果一个方法明确返回是与否这两种情况，那么没有必要返回字符串的 0 或者 1 。这样会造成很多地方需要使用\n字符串的形式来匹配结果判断是与否。例如以下这种形式。\n<img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a333ce60c3b140c1b25097c262204be3%7Etplv-k3u1fbpfcp-watermark.image?\"/>\n方法应该直接返回 true 或者 false 。 代码会简洁明了很多。</p>\n<h4>2.滥用三元运算符</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2063836c00db48668e21192e23224ade%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb10fc763eac43b68814f7dfd84a6770%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>3.滥用机翻英语</h4>\n<p>Poor 有不好，差的意思。 例如 My english is poor.\n这里的 Poor 是差的意思。\n但是下图这个方法 getDatePoor 。也用 poor 来表达获取时间“差”的含义。\n英语还是程序员应该要掌握学习的。不能光高靠机翻英语，不然容易闹笑话。\n<img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ea0bfdcf19c47c09b99ef70ba3a899c%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>4.造不必要的大量轮子</h4>\n<p>很多方法或者功能我们应该尽可能的搜索是否已经有开源成熟的 jar 包或者框架实现。成熟的开源 jar 包或者框架，有大量完备的测试以及广泛的用户来确保质量。\n如果实在需要自己造小轮子，请使用单元测试来确保质量</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5a1b7ac5b344d30a997dea22054dd90%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>5.大量 if else 语句</h4>\n<p>大量的 if-else 语句，具体情况具体分析。但是大部分都可以用卫语句提前返回结果。避免大量嵌套。</p>\n<p>例如左边的写法可以改为右边的写法</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0965d2269d4e44e08f411c9e9af75985%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>像下图这种情况可以用 Stream Lambda 来进行简化\n<img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d932bcb85d4244c0975bf9963f96cecb%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>优化后</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a7344b96c4f47ad9e26a855bbcb2522%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>6.多余的代码判断</h4>\n<p>有些时候可能会写出一些不必要的冗余判断</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecff96b960bb451a802ed415f524c06a%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>7.大量的代码细节让阅读者增加心智负担</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c409acbd5a5b49c586b775e94269a4fd%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>我们应该封装一部分代码细节，暴露出代码的主流程，优化后</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c21bc8d48484467abbe2e5698c2fd25b%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>8.繁琐的代码逻辑</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1a629861d8b487b9ceba383272d66a4%7Etplv-k3u1fbpfcp-watermark.image?\"/>\n像上图这种情形，我们其实可以使用一句 Stream 语句就可以描述出来。</p>\n<h4>9.数据库中是与否可以直接用 tinyInt 映射，不要用字符串来映射</h4>\n<p>这样会造成布尔字段取出时，还需要跟字符串 1 或者 0 进行比对，这是很尴尬的设计。\n<img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6aff1f70d3f4496e97b644a7622afe7f%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>10.异常捕获之后不做任何处理</h4>\n<p>我们捕获异常之后一般都需要使用 log 来记录错误情形，如果什么都不做，就很可能丢失错误信息，并且使代码排查过程更加困难。</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15289f74e1674c69a2f05d547ff3ddde%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/99a949365c9b48d4a75694bced9f974b%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>11.使用 Map 填充数据</h4>\n<p>使用 Java 是静态语言，使用 Map 填充数据，反而失去了静态语言带来了代码检查以及 IDEA 识别字段引用的功能。</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c89217ce5e504f67b8bfabe99898f33a%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>12.混乱的常量</h4>\n<p>请不用将项目中所有的常量一股脑的放到一个类中。</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f773e5fcd567417889971ecde3b3965c%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>可以使用像这种静态类的方式，分门别类地放入不同的常量</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92a1caf2de204bbab836464c3408c1af%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>13.请使用驼峰命名</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d894d5dac1fe46b9b79d16a8d5da31c6%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>14.变量的定义请在系统内保持一致，比如 1 在系统内表示是。 请勿有时表示是，有时表示否。</h4>\n<p>有时候用 1 表示肯定，有时候用 0 表示肯定，有时候用 Y 表示肯定。</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30d934211a8f43c0b919aef7e7f818be%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/162c6f55e5b94e898bfd80d07ea05fbb%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86241af64875469dbe268933b780bf7b%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>15.奇葩的代码脑回路</h4>\n<p>在外层方法判断一遍，在内层方法又进行一遍一样的判断</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83e9a83217824e7c827462debd9597ad%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>16.常量随意的命名格式</h4>\n<p>常量的命名请使用大写加下划线的格式</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1743c3bac7b4f34bff3a775dc0272da%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>17.嵌套的 Switch 语句</h4>\n<p>就一种 case 了  完全没有必要使用 switch 语句\n<img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4649a7980ff5461d812deff9e7e3e330%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>18.使用魔法值</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16b772c6897741dbbfc35707863eb0a3%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>例如项目中大量使用了“jpg”的字符串魔法值，使用魔法值使得我们无法统一找到代码的引用处。在重构的时候难免会有疏漏。</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73759506f9dc44618d004d1077c03a6b%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>19.单个方法代码超过 80 行</h4>\n<p>如果单个方法的代码行超过 80 行，意味你的代码缺乏封装和可读性。例如这种一大坨的代码。</p>\n<pre><code>public static void initColumnField(GenTableColumn column, GenTable table)\n{\n    String dataType = getDbType(column.getColumnType());\n    String columnName = column.getColumnName();\n    column.setTableId(table.getTableId());\n    column.setCreateBy(table.getCreateBy());\n    // 设置 java 字段名\n    column.setJavaField(StringUtils.toCamelCase(columnName));\n    // 设置默认类型\n    column.setJavaType(GenConstants.TYPE_STRING);\n    column.setQueryType(GenConstants.QUERY_EQ);\n\n    if (arraysContains(GenConstants.COLUMNTYPE_STR, dataType) || arraysContains(GenConstants.COLUMNTYPE_TEXT, dataType))\n    {\n        // 字符串长度超过 500 设置为文本域\n        Integer columnLength = getColumnLength(column.getColumnType());\n        String htmlType = columnLength &gt;= 500 || arraysContains(GenConstants.COLUMNTYPE_TEXT, dataType) ? GenConstants.HTML_TEXTAREA : GenConstants.HTML_INPUT;\n        column.setHtmlType(htmlType);\n    }\n    else if (arraysContains(GenConstants.COLUMNTYPE_TIME, dataType))\n    {\n        column.setJavaType(GenConstants.TYPE_DATE);\n        column.setHtmlType(GenConstants.HTML_DATETIME);\n    }\n    else if (arraysContains(GenConstants.COLUMNTYPE_NUMBER, dataType))\n    {\n        column.setHtmlType(GenConstants.HTML_INPUT);\n\n        // 如果是浮点型 统一用 BigDecimal\n        String[] str = StringUtils.split(StringUtils.substringBetween(column.getColumnType(), \"(\", \")\"), \",\");\n        if (str != null &amp;&amp; str.length == 2 &amp;&amp; Integer.parseInt(str[1]) &gt; 0)\n        {\n            column.setJavaType(GenConstants.TYPE_BIGDECIMAL);\n        }\n        // 如果是整形\n        else if (str != null &amp;&amp; str.length == 1 &amp;&amp; Integer.parseInt(str[0]) &lt;= 10)\n        {\n            column.setJavaType(GenConstants.TYPE_INTEGER);\n        }\n        // 长整形\n        else\n        {\n            column.setJavaType(GenConstants.TYPE_LONG);\n        }\n    }\n\n    // 插入字段（默认所有字段都需要插入）\n    column.setIsInsert(GenConstants.REQUIRE);\n\n    // 编辑字段\n    if (!arraysContains(GenConstants.COLUMNNAME_NOT_EDIT, columnName) &amp;&amp; !column.isPk())\n    {\n        column.setIsEdit(GenConstants.REQUIRE);\n    }\n    // 列表字段\n    if (!arraysContains(GenConstants.COLUMNNAME_NOT_LIST, columnName) &amp;&amp; !column.isPk())\n    {\n        column.setIsList(GenConstants.REQUIRE);\n    }\n    // 查询字段\n    if (!arraysContains(GenConstants.COLUMNNAME_NOT_QUERY, columnName) &amp;&amp; !column.isPk())\n    {\n        column.setIsQuery(GenConstants.REQUIRE);\n    }\n\n    // 查询字段类型\n    if (StringUtils.endsWithIgnoreCase(columnName, \"name\"))\n    {\n        column.setQueryType(GenConstants.QUERY_LIKE);\n    }\n    // 状态字段设置单选框\n    if (StringUtils.endsWithIgnoreCase(columnName, \"status\"))\n    {\n        column.setHtmlType(GenConstants.HTML_RADIO);\n    }\n    // 类型&amp;性别字段设置下拉框\n    else if (StringUtils.endsWithIgnoreCase(columnName, \"type\")\n            || StringUtils.endsWithIgnoreCase(columnName, \"sex\"))\n    {\n        column.setHtmlType(GenConstants.HTML_SELECT);\n    }\n    // 图片字段设置图片上传控件\n    else if (StringUtils.endsWithIgnoreCase(columnName, \"image\"))\n    {\n        column.setHtmlType(GenConstants.HTML_IMAGE_UPLOAD);\n    }\n    // 文件字段设置文件上传控件\n    else if (StringUtils.endsWithIgnoreCase(columnName, \"file\"))\n    {\n        column.setHtmlType(GenConstants.HTML_FILE_UPLOAD);\n    }\n    // 内容字段设置富文本控件\n    else if (StringUtils.endsWithIgnoreCase(columnName, \"content\"))\n    {\n        column.setHtmlType(GenConstants.HTML_EDITOR);\n    }\n}\n</code></pre>\n<h4>20.避免使用反逻辑</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0daa82ca78a497a86b520e9f11cf524%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>像图中<code>!(x == 0) </code> 可以直接改成<code>x != 0 </code> 即可</p>\n<p>还有以下这种冗余代码。</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77965de686e74498b2e6d74491044631%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>21.复杂的判断使用有意义的变量来替代</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/587fe1fff73b4843b90ddd3d4d71392e%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>比如上图的判断我们可以用一个变量 isLongField 来替代 提高代码的可读性。</p>\n<h4>22.常量没有使用 final 来修饰</h4>\n<p>如果没有使用 final 来修饰的话，就有可能在代码中被修改。</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/350f7098c5b94114b7bd529e973f4680%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>23.字符编码直接用字符串表示</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b9b26b0cf66436f805812be5c85761a%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>字符编码，JDK 中都有常量可以直接表示，我们可以直接使用</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5483484718fc4926be19ca5ea478282d%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>24.多余的方法修饰符</h4>\n<p>Java 中 interface 类，方法默认都是 Public 的，没必要再加上 public 修饰符</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c9ba5f660da483597762d927375b676%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>25.不必要的 ToString</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b961ebdfa234ad08b60ecc43c56c70a%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ba82aebd5324984945ed5381bdb3708%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>26.多余的变量声明</h4>\n<p>如果变量声明之后没有做任何处理，请直接通过 return 返回，不要多声明一个变量</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91980ebae5604d25828176a276e7e072%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>27.使用语义不清晰的方法</h4>\n<p>例如 String 的 indexOf 方法 我们完全可以使用 contains 方法来替代，使代码的语义更一目了然。</p>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40dc0a23bd9544d5902e03e9f1110e60%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>28.毫无必要的包装语句 unboxing 和 boxing</h4>\n<pre><code>Integer.valueOf\n</code></pre>\n<p>返回的本身就是 int, 没有必要再调用 intValue 方法\n<img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7a81cd9c7a34f329b54fe980cbb4dcf%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<h4>29.使用+=进行在循环中字符串拼接</h4>\n<p><img alt=\"图片.png\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ca256d68d8f40d4a7796a1480b47706%7Etplv-k3u1fbpfcp-watermark.image?\"/></p>\n<p>+=会造出临时的字符串，我们应该使用 StringBuilder 在循环中拼接字符串</p>\n<h4>以上就是总结的关于项目中的一些坏实践，请大家务必使用。有其他坏实践，恳请大家继续补充。</h4>\n<hr/>\n<h5>鄙人在业余时间弄了一个全栈项目 Agileboot ，初衷是想做一个代码规范，项目结构良好，可供大学生或者入门 3 年内的开发者参考使用的项目。</h5>\n<p>后端地址：\n<a href=\"https://github.com/valarchie/AgileBoot-Back-End\" rel=\"nofollow\">https://github.com/valarchie/AgileBoot-Back-End</a><br/>\n鄙人能力水平有限，如果项目中发现不足或者错误，恳请指正。欢迎 PR 。一起构建一个规范完善的后端项目。</p>\n<p>前端地址：\n<a href=\"https://github.com/valarchie/AgileBoot-Front-End\" rel=\"nofollow\">https://github.com/valarchie/AgileBoot-Front-End</a></p>\n<p>鄙人前端小白，关于前端项目的规范以及优化仅作了力所能及的部分，还有很多优化空间。哪位前端大佬有兴趣一起帮忙规范和优化吗？</p>\n<p>演示地址\n<a href=\"http://www.agileboot.vip\" rel=\"nofollow\">www.agileboot.vip</a></p>\n<h6>欢迎加入全栈技术交流群：1398880</h6>\n", "last_modified": 1672311036, "replies": 57, "id": 905432}]